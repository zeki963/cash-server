// 說明
// https://docs.microsoft.com/zh-tw/dotnet/architecture/grpc-for-wcf-developers/protobuf-data-types

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v4.0.0
// source: member.proto

package casinogrpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DbGameConfigs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*DbGameConfigData `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *DbGameConfigs) Reset() {
	*x = DbGameConfigs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbGameConfigs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbGameConfigs) ProtoMessage() {}

func (x *DbGameConfigs) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbGameConfigs.ProtoReflect.Descriptor instead.
func (*DbGameConfigs) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{0}
}

func (x *DbGameConfigs) GetList() []*DbGameConfigData {
	if x != nil {
		return x.List
	}
	return nil
}

type DbGameConfigData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode       int32  `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"`
	EOpName      string `protobuf:"bytes,2,opt,name=EOpName,proto3" json:"EOpName,omitempty"`
	IsEnable     int32  `protobuf:"varint,3,opt,name=IsEnable,proto3" json:"IsEnable,omitempty"`
	IsGame       int32  `protobuf:"varint,4,opt,name=IsGame,proto3" json:"IsGame,omitempty"`
	IsHot        int32  `protobuf:"varint,5,opt,name=IsHot,proto3" json:"IsHot,omitempty"`
	IsNew        int32  `protobuf:"varint,6,opt,name=IsNew,proto3" json:"IsNew,omitempty"`
	IsComingSoon int32  `protobuf:"varint,7,opt,name=IsComingSoon,proto3" json:"IsComingSoon,omitempty"`
	Priority     int32  `protobuf:"varint,8,opt,name=Priority,proto3" json:"Priority,omitempty"`
	Name         string `protobuf:"bytes,9,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *DbGameConfigData) Reset() {
	*x = DbGameConfigData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbGameConfigData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbGameConfigData) ProtoMessage() {}

func (x *DbGameConfigData) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbGameConfigData.ProtoReflect.Descriptor instead.
func (*DbGameConfigData) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{1}
}

func (x *DbGameConfigData) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *DbGameConfigData) GetEOpName() string {
	if x != nil {
		return x.EOpName
	}
	return ""
}

func (x *DbGameConfigData) GetIsEnable() int32 {
	if x != nil {
		return x.IsEnable
	}
	return 0
}

func (x *DbGameConfigData) GetIsGame() int32 {
	if x != nil {
		return x.IsGame
	}
	return 0
}

func (x *DbGameConfigData) GetIsHot() int32 {
	if x != nil {
		return x.IsHot
	}
	return 0
}

func (x *DbGameConfigData) GetIsNew() int32 {
	if x != nil {
		return x.IsNew
	}
	return 0
}

func (x *DbGameConfigData) GetIsComingSoon() int32 {
	if x != nil {
		return x.IsComingSoon
	}
	return 0
}

func (x *DbGameConfigData) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *DbGameConfigData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EmptyInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyInput) Reset() {
	*x = EmptyInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyInput) ProtoMessage() {}

func (x *EmptyInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyInput.ProtoReflect.Descriptor instead.
func (*EmptyInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{2}
}

// 這個之後要取代 DbStringInput
type DbStrInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *DbStrInput) Reset() {
	*x = DbStrInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbStrInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbStrInput) ProtoMessage() {}

func (x *DbStrInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbStrInput.ProtoReflect.Descriptor instead.
func (*DbStrInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{3}
}

func (x *DbStrInput) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type DbMyIDInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *DbMyIDInput) Reset() {
	*x = DbMyIDInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbMyIDInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbMyIDInput) ProtoMessage() {}

func (x *DbMyIDInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbMyIDInput.ProtoReflect.Descriptor instead.
func (*DbMyIDInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{4}
}

func (x *DbMyIDInput) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type DbGUIDInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *DbGUIDInput) Reset() {
	*x = DbGUIDInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbGUIDInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbGUIDInput) ProtoMessage() {}

func (x *DbGUIDInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbGUIDInput.ProtoReflect.Descriptor instead.
func (*DbGUIDInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{5}
}

func (x *DbGUIDInput) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type DbIntInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key int32 `protobuf:"varint,1,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *DbIntInput) Reset() {
	*x = DbIntInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbIntInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbIntInput) ProtoMessage() {}

func (x *DbIntInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbIntInput.ProtoReflect.Descriptor instead.
func (*DbIntInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{6}
}

func (x *DbIntInput) GetKey() int32 {
	if x != nil {
		return x.Key
	}
	return 0
}

// 已經驗證完畢，寫入資料庫
type DbStringInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *DbStringInput) Reset() {
	*x = DbStringInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbStringInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbStringInput) ProtoMessage() {}

func (x *DbStringInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbStringInput.ProtoReflect.Descriptor instead.
func (*DbStringInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{7}
}

func (x *DbStringInput) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DbStringInput) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type DbEOpCodeInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   int32 `protobuf:"varint,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value int32 `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *DbEOpCodeInput) Reset() {
	*x = DbEOpCodeInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbEOpCodeInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbEOpCodeInput) ProtoMessage() {}

func (x *DbEOpCodeInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbEOpCodeInput.ProtoReflect.Descriptor instead.
func (*DbEOpCodeInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{8}
}

func (x *DbEOpCodeInput) GetKey() int32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *DbEOpCodeInput) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type DbIntWithFloatInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   int32   `protobuf:"varint,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value float32 `protobuf:"fixed32,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *DbIntWithFloatInput) Reset() {
	*x = DbIntWithFloatInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbIntWithFloatInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbIntWithFloatInput) ProtoMessage() {}

func (x *DbIntWithFloatInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbIntWithFloatInput.ProtoReflect.Descriptor instead.
func (*DbIntWithFloatInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{9}
}

func (x *DbIntWithFloatInput) GetKey() int32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *DbIntWithFloatInput) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type DbIntWithStringInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   int32  `protobuf:"varint,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *DbIntWithStringInput) Reset() {
	*x = DbIntWithStringInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbIntWithStringInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbIntWithStringInput) ProtoMessage() {}

func (x *DbIntWithStringInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbIntWithStringInput.ProtoReflect.Descriptor instead.
func (*DbIntWithStringInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{10}
}

func (x *DbIntWithStringInput) GetKey() int32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *DbIntWithStringInput) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SetTakeMoneyStatusInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderID string `protobuf:"bytes,1,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	Status  int32  `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"`
	Memo    string `protobuf:"bytes,3,opt,name=Memo,proto3" json:"Memo,omitempty"`
}

func (x *SetTakeMoneyStatusInput) Reset() {
	*x = SetTakeMoneyStatusInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTakeMoneyStatusInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTakeMoneyStatusInput) ProtoMessage() {}

func (x *SetTakeMoneyStatusInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTakeMoneyStatusInput.ProtoReflect.Descriptor instead.
func (*SetTakeMoneyStatusInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{11}
}

func (x *SetTakeMoneyStatusInput) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *SetTakeMoneyStatusInput) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SetTakeMoneyStatusInput) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type LoginInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids *Ids   `protobuf:"bytes,1,opt,name=ids,proto3" json:"ids,omitempty"`
	IP  string `protobuf:"bytes,2,opt,name=IP,proto3" json:"IP,omitempty"`
}

func (x *LoginInput) Reset() {
	*x = LoginInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginInput) ProtoMessage() {}

func (x *LoginInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginInput.ProtoReflect.Descriptor instead.
func (*LoginInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{12}
}

func (x *LoginInput) GetIds() *Ids {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *LoginInput) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

type Ids struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceID string `protobuf:"bytes,1,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	PhoneID  string `protobuf:"bytes,2,opt,name=PhoneID,proto3" json:"PhoneID,omitempty"`
	MyID     string `protobuf:"bytes,3,opt,name=MyID,proto3" json:"MyID,omitempty"`
}

func (x *Ids) Reset() {
	*x = Ids{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ids) ProtoMessage() {}

func (x *Ids) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ids.ProtoReflect.Descriptor instead.
func (*Ids) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{13}
}

func (x *Ids) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *Ids) GetPhoneID() string {
	if x != nil {
		return x.PhoneID
	}
	return ""
}

func (x *Ids) GetMyID() string {
	if x != nil {
		return x.MyID
	}
	return ""
}

type IncreaseInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type             string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Value            string `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
	UpdateDBRightNow bool   `protobuf:"varint,4,opt,name=UpdateDBRightNow,proto3" json:"UpdateDBRightNow,omitempty"`
}

func (x *IncreaseInput) Reset() {
	*x = IncreaseInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncreaseInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreaseInput) ProtoMessage() {}

func (x *IncreaseInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreaseInput.ProtoReflect.Descriptor instead.
func (*IncreaseInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{14}
}

func (x *IncreaseInput) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *IncreaseInput) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IncreaseInput) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *IncreaseInput) GetUpdateDBRightNow() bool {
	if x != nil {
		return x.UpdateDBRightNow
	}
	return false
}

type ChangeAvatarInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AvatarIndex int32  `protobuf:"varint,2,opt,name=AvatarIndex,proto3" json:"AvatarIndex,omitempty"`
}

func (x *ChangeAvatarInput) Reset() {
	*x = ChangeAvatarInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeAvatarInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAvatarInput) ProtoMessage() {}

func (x *ChangeAvatarInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAvatarInput.ProtoReflect.Descriptor instead.
func (*ChangeAvatarInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{15}
}

func (x *ChangeAvatarInput) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ChangeAvatarInput) GetAvatarIndex() int32 {
	if x != nil {
		return x.AvatarIndex
	}
	return 0
}

type ChangeNameInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *ChangeNameInput) Reset() {
	*x = ChangeNameInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeNameInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeNameInput) ProtoMessage() {}

func (x *ChangeNameInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeNameInput.ProtoReflect.Descriptor instead.
func (*ChangeNameInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{16}
}

func (x *ChangeNameInput) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ChangeNameInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 已經驗證完畢，寫入資料庫
type BindPhoneInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	PhoneID string `protobuf:"bytes,2,opt,name=PhoneID,proto3" json:"PhoneID,omitempty"`
	PW      string `protobuf:"bytes,3,opt,name=PW,proto3" json:"PW,omitempty"`
}

func (x *BindPhoneInput) Reset() {
	*x = BindPhoneInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindPhoneInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindPhoneInput) ProtoMessage() {}

func (x *BindPhoneInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindPhoneInput.ProtoReflect.Descriptor instead.
func (*BindPhoneInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{17}
}

func (x *BindPhoneInput) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *BindPhoneInput) GetPhoneID() string {
	if x != nil {
		return x.PhoneID
	}
	return ""
}

func (x *BindPhoneInput) GetPW() string {
	if x != nil {
		return x.PW
	}
	return ""
}

// 填寫 提現單
type DbTakeMoneyInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	OrderID string `protobuf:"bytes,2,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	Cash    int32  `protobuf:"varint,3,opt,name=Cash,proto3" json:"Cash,omitempty"`
}

func (x *DbTakeMoneyInput) Reset() {
	*x = DbTakeMoneyInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbTakeMoneyInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbTakeMoneyInput) ProtoMessage() {}

func (x *DbTakeMoneyInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbTakeMoneyInput.ProtoReflect.Descriptor instead.
func (*DbTakeMoneyInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{18}
}

func (x *DbTakeMoneyInput) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DbTakeMoneyInput) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *DbTakeMoneyInput) GetCash() int32 {
	if x != nil {
		return x.Cash
	}
	return 0
}

type DbPlayerBanInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	IsBan bool   `protobuf:"varint,2,opt,name=IsBan,proto3" json:"IsBan,omitempty"`
}

func (x *DbPlayerBanInput) Reset() {
	*x = DbPlayerBanInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbPlayerBanInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbPlayerBanInput) ProtoMessage() {}

func (x *DbPlayerBanInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbPlayerBanInput.ProtoReflect.Descriptor instead.
func (*DbPlayerBanInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{19}
}

func (x *DbPlayerBanInput) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DbPlayerBanInput) GetIsBan() bool {
	if x != nil {
		return x.IsBan
	}
	return false
}

type DbStoredMoneyInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId string  `protobuf:"bytes,1,opt,name=OrderId,proto3" json:"OrderId,omitempty"`
	BuyerId string  `protobuf:"bytes,2,opt,name=BuyerId,proto3" json:"BuyerId,omitempty"`
	Date    string  `protobuf:"bytes,3,opt,name=Date,proto3" json:"Date,omitempty"`
	Money   float64 `protobuf:"fixed64,4,opt,name=Money,proto3" json:"Money,omitempty"`
}

func (x *DbStoredMoneyInput) Reset() {
	*x = DbStoredMoneyInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbStoredMoneyInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbStoredMoneyInput) ProtoMessage() {}

func (x *DbStoredMoneyInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbStoredMoneyInput.ProtoReflect.Descriptor instead.
func (*DbStoredMoneyInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{20}
}

func (x *DbStoredMoneyInput) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *DbStoredMoneyInput) GetBuyerId() string {
	if x != nil {
		return x.BuyerId
	}
	return ""
}

func (x *DbStoredMoneyInput) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *DbStoredMoneyInput) GetMoney() float64 {
	if x != nil {
		return x.Money
	}
	return 0
}

//LoginLogSet(player.ID,player.Name,"Login",false);
type DbLoginLogInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	ActionType   string `protobuf:"bytes,3,opt,name=ActionType,proto3" json:"ActionType,omitempty"` // 例如 Login,Logout,DZP,DZPout ... 等等進入個遊戲
	IsAI         bool   `protobuf:"varint,4,opt,name=IsAI,proto3" json:"IsAI,omitempty"`
	IP           string `protobuf:"bytes,5,opt,name=IP,proto3" json:"IP,omitempty"`
	ActiveDate   string `protobuf:"bytes,6,opt,name=ActiveDate,proto3" json:"ActiveDate,omitempty"`     // 發生時間(Client)
	Delay        int32  `protobuf:"varint,7,opt,name=Delay,proto3" json:"Delay,omitempty"`              // 延遲毫秒數
	UserDeviceID string `protobuf:"bytes,8,opt,name=UserDeviceID,proto3" json:"UserDeviceID,omitempty"` // 登入時使用的機器
}

func (x *DbLoginLogInput) Reset() {
	*x = DbLoginLogInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbLoginLogInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbLoginLogInput) ProtoMessage() {}

func (x *DbLoginLogInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbLoginLogInput.ProtoReflect.Descriptor instead.
func (*DbLoginLogInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{21}
}

func (x *DbLoginLogInput) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DbLoginLogInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DbLoginLogInput) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *DbLoginLogInput) GetIsAI() bool {
	if x != nil {
		return x.IsAI
	}
	return false
}

func (x *DbLoginLogInput) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *DbLoginLogInput) GetActiveDate() string {
	if x != nil {
		return x.ActiveDate
	}
	return ""
}

func (x *DbLoginLogInput) GetDelay() int32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *DbLoginLogInput) GetUserDeviceID() string {
	if x != nil {
		return x.UserDeviceID
	}
	return ""
}

/// 後台查詢
type QueryConditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayStart  int32  `protobuf:"varint,1,opt,name=DisplayStart,proto3" json:"DisplayStart,omitempty"`   //資料開始的index
	DisplayLength int32  `protobuf:"varint,2,opt,name=DisplayLength,proto3" json:"DisplayLength,omitempty"` //資料長度
	Search        string `protobuf:"bytes,3,opt,name=Search,proto3" json:"Search,omitempty"`                //拿來做模糊查詢
}

func (x *QueryConditions) Reset() {
	*x = QueryConditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryConditions) ProtoMessage() {}

func (x *QueryConditions) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryConditions.ProtoReflect.Descriptor instead.
func (*QueryConditions) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{22}
}

func (x *QueryConditions) GetDisplayStart() int32 {
	if x != nil {
		return x.DisplayStart
	}
	return 0
}

func (x *QueryConditions) GetDisplayLength() int32 {
	if x != nil {
		return x.DisplayLength
	}
	return 0
}

func (x *QueryConditions) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

///紀錄下注
type BetInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	TableID   int32  `protobuf:"varint,3,opt,name=TableID,proto3" json:"TableID,omitempty"`
	RoundID   string `protobuf:"bytes,4,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	BetType   string `protobuf:"bytes,5,opt,name=BetType,proto3" json:"BetType,omitempty"`
	AddGold   string `protobuf:"bytes,6,opt,name=AddGold,proto3" json:"AddGold,omitempty"`
	Gold      string `protobuf:"bytes,7,opt,name=Gold,proto3" json:"Gold,omitempty"`
	IsAI      bool   `protobuf:"varint,8,opt,name=IsAI,proto3" json:"IsAI,omitempty"`
	EOpCode   int32  `protobuf:"varint,9,opt,name=EOpCode,proto3" json:"EOpCode,omitempty"`
	WaterGold string `protobuf:"bytes,10,opt,name=WaterGold,proto3" json:"WaterGold,omitempty"`
}

func (x *BetInput) Reset() {
	*x = BetInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetInput) ProtoMessage() {}

func (x *BetInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetInput.ProtoReflect.Descriptor instead.
func (*BetInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{23}
}

func (x *BetInput) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *BetInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BetInput) GetTableID() int32 {
	if x != nil {
		return x.TableID
	}
	return 0
}

func (x *BetInput) GetRoundID() string {
	if x != nil {
		return x.RoundID
	}
	return ""
}

func (x *BetInput) GetBetType() string {
	if x != nil {
		return x.BetType
	}
	return ""
}

func (x *BetInput) GetAddGold() string {
	if x != nil {
		return x.AddGold
	}
	return ""
}

func (x *BetInput) GetGold() string {
	if x != nil {
		return x.Gold
	}
	return ""
}

func (x *BetInput) GetIsAI() bool {
	if x != nil {
		return x.IsAI
	}
	return false
}

func (x *BetInput) GetEOpCode() int32 {
	if x != nil {
		return x.EOpCode
	}
	return 0
}

func (x *BetInput) GetWaterGold() string {
	if x != nil {
		return x.WaterGold
	}
	return ""
}

// 紀錄牌局結果
type ProtoDTFGameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundID     string `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	TableID     int32  `protobuf:"varint,2,opt,name=TableID,proto3" json:"TableID,omitempty"`
	RoundResult string `protobuf:"bytes,3,opt,name=RoundResult,proto3" json:"RoundResult,omitempty"`
	StakeDragon int32  `protobuf:"varint,4,opt,name=StakeDragon,proto3" json:"StakeDragon,omitempty"`
	StakeTiger  int32  `protobuf:"varint,5,opt,name=StakeTiger,proto3" json:"StakeTiger,omitempty"`
	StakeDraw   int32  `protobuf:"varint,6,opt,name=StakeDraw,proto3" json:"StakeDraw,omitempty"`
	WinDragon   int32  `protobuf:"varint,7,opt,name=WinDragon,proto3" json:"WinDragon,omitempty"`
	WinTiger    int32  `protobuf:"varint,8,opt,name=WinTiger,proto3" json:"WinTiger,omitempty"`
	WinDraw     int32  `protobuf:"varint,9,opt,name=WinDraw,proto3" json:"WinDraw,omitempty"`
	StockGold   string `protobuf:"bytes,10,opt,name=StockGold,proto3" json:"StockGold,omitempty"`
	WaterGold   string `protobuf:"bytes,11,opt,name=WaterGold,proto3" json:"WaterGold,omitempty"`
	BankerID    string `protobuf:"bytes,12,opt,name=BankerID,proto3" json:"BankerID,omitempty"`
}

func (x *ProtoDTFGameResult) Reset() {
	*x = ProtoDTFGameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoDTFGameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDTFGameResult) ProtoMessage() {}

func (x *ProtoDTFGameResult) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDTFGameResult.ProtoReflect.Descriptor instead.
func (*ProtoDTFGameResult) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{24}
}

func (x *ProtoDTFGameResult) GetRoundID() string {
	if x != nil {
		return x.RoundID
	}
	return ""
}

func (x *ProtoDTFGameResult) GetTableID() int32 {
	if x != nil {
		return x.TableID
	}
	return 0
}

func (x *ProtoDTFGameResult) GetRoundResult() string {
	if x != nil {
		return x.RoundResult
	}
	return ""
}

func (x *ProtoDTFGameResult) GetStakeDragon() int32 {
	if x != nil {
		return x.StakeDragon
	}
	return 0
}

func (x *ProtoDTFGameResult) GetStakeTiger() int32 {
	if x != nil {
		return x.StakeTiger
	}
	return 0
}

func (x *ProtoDTFGameResult) GetStakeDraw() int32 {
	if x != nil {
		return x.StakeDraw
	}
	return 0
}

func (x *ProtoDTFGameResult) GetWinDragon() int32 {
	if x != nil {
		return x.WinDragon
	}
	return 0
}

func (x *ProtoDTFGameResult) GetWinTiger() int32 {
	if x != nil {
		return x.WinTiger
	}
	return 0
}

func (x *ProtoDTFGameResult) GetWinDraw() int32 {
	if x != nil {
		return x.WinDraw
	}
	return 0
}

func (x *ProtoDTFGameResult) GetStockGold() string {
	if x != nil {
		return x.StockGold
	}
	return ""
}

func (x *ProtoDTFGameResult) GetWaterGold() string {
	if x != nil {
		return x.WaterGold
	}
	return ""
}

func (x *ProtoDTFGameResult) GetBankerID() string {
	if x != nil {
		return x.BankerID
	}
	return ""
}

// 紀錄牌局結果
type ProtoBMWGameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundID      string `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	TableID      int32  `protobuf:"varint,2,opt,name=TableID,proto3" json:"TableID,omitempty"`
	RoundResult  string `protobuf:"bytes,3,opt,name=RoundResult,proto3" json:"RoundResult,omitempty"`
	StakeFerrari int32  `protobuf:"varint,4,opt,name=StakeFerrari,proto3" json:"StakeFerrari,omitempty"`
	StakeBenz    int32  `protobuf:"varint,5,opt,name=StakeBenz,proto3" json:"StakeBenz,omitempty"`
	StakeBMW     int32  `protobuf:"varint,6,opt,name=StakeBMW,proto3" json:"StakeBMW,omitempty"`
	StakeAudi    int32  `protobuf:"varint,7,opt,name=StakeAudi,proto3" json:"StakeAudi,omitempty"`
	StakeVW      int32  `protobuf:"varint,8,opt,name=StakeVW,proto3" json:"StakeVW,omitempty"`
	StakeToyota  int32  `protobuf:"varint,9,opt,name=StakeToyota,proto3" json:"StakeToyota,omitempty"`
	WinFerrari   int32  `protobuf:"varint,10,opt,name=WinFerrari,proto3" json:"WinFerrari,omitempty"`
	WinBenz      int32  `protobuf:"varint,11,opt,name=WinBenz,proto3" json:"WinBenz,omitempty"`
	WinBMW       int32  `protobuf:"varint,12,opt,name=WinBMW,proto3" json:"WinBMW,omitempty"`
	WinAudi      int32  `protobuf:"varint,13,opt,name=WinAudi,proto3" json:"WinAudi,omitempty"`
	WinVW        int32  `protobuf:"varint,14,opt,name=WinVW,proto3" json:"WinVW,omitempty"`
	WinToyota    int32  `protobuf:"varint,15,opt,name=WinToyota,proto3" json:"WinToyota,omitempty"`
	StockGold    string `protobuf:"bytes,16,opt,name=StockGold,proto3" json:"StockGold,omitempty"`
	WaterGold    string `protobuf:"bytes,17,opt,name=WaterGold,proto3" json:"WaterGold,omitempty"`
	BankerID     string `protobuf:"bytes,18,opt,name=BankerID,proto3" json:"BankerID,omitempty"`
}

func (x *ProtoBMWGameResult) Reset() {
	*x = ProtoBMWGameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBMWGameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBMWGameResult) ProtoMessage() {}

func (x *ProtoBMWGameResult) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBMWGameResult.ProtoReflect.Descriptor instead.
func (*ProtoBMWGameResult) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{25}
}

func (x *ProtoBMWGameResult) GetRoundID() string {
	if x != nil {
		return x.RoundID
	}
	return ""
}

func (x *ProtoBMWGameResult) GetTableID() int32 {
	if x != nil {
		return x.TableID
	}
	return 0
}

func (x *ProtoBMWGameResult) GetRoundResult() string {
	if x != nil {
		return x.RoundResult
	}
	return ""
}

func (x *ProtoBMWGameResult) GetStakeFerrari() int32 {
	if x != nil {
		return x.StakeFerrari
	}
	return 0
}

func (x *ProtoBMWGameResult) GetStakeBenz() int32 {
	if x != nil {
		return x.StakeBenz
	}
	return 0
}

func (x *ProtoBMWGameResult) GetStakeBMW() int32 {
	if x != nil {
		return x.StakeBMW
	}
	return 0
}

func (x *ProtoBMWGameResult) GetStakeAudi() int32 {
	if x != nil {
		return x.StakeAudi
	}
	return 0
}

func (x *ProtoBMWGameResult) GetStakeVW() int32 {
	if x != nil {
		return x.StakeVW
	}
	return 0
}

func (x *ProtoBMWGameResult) GetStakeToyota() int32 {
	if x != nil {
		return x.StakeToyota
	}
	return 0
}

func (x *ProtoBMWGameResult) GetWinFerrari() int32 {
	if x != nil {
		return x.WinFerrari
	}
	return 0
}

func (x *ProtoBMWGameResult) GetWinBenz() int32 {
	if x != nil {
		return x.WinBenz
	}
	return 0
}

func (x *ProtoBMWGameResult) GetWinBMW() int32 {
	if x != nil {
		return x.WinBMW
	}
	return 0
}

func (x *ProtoBMWGameResult) GetWinAudi() int32 {
	if x != nil {
		return x.WinAudi
	}
	return 0
}

func (x *ProtoBMWGameResult) GetWinVW() int32 {
	if x != nil {
		return x.WinVW
	}
	return 0
}

func (x *ProtoBMWGameResult) GetWinToyota() int32 {
	if x != nil {
		return x.WinToyota
	}
	return 0
}

func (x *ProtoBMWGameResult) GetStockGold() string {
	if x != nil {
		return x.StockGold
	}
	return ""
}

func (x *ProtoBMWGameResult) GetWaterGold() string {
	if x != nil {
		return x.WaterGold
	}
	return ""
}

func (x *ProtoBMWGameResult) GetBankerID() string {
	if x != nil {
		return x.BankerID
	}
	return ""
}

// 紀錄牌局結果
type ProtoHDWGameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundID          string `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	TableID          int32  `protobuf:"varint,2,opt,name=TableID,proto3" json:"TableID,omitempty"`
	RoundResult      string `protobuf:"bytes,3,opt,name=RoundResult,proto3" json:"RoundResult,omitempty"`
	StakeFront       int32  `protobuf:"varint,4,opt,name=StakeFront,proto3" json:"StakeFront,omitempty"`
	StakeCenter      int32  `protobuf:"varint,5,opt,name=StakeCenter,proto3" json:"StakeCenter,omitempty"`
	StakeBack        int32  `protobuf:"varint,6,opt,name=StakeBack,proto3" json:"StakeBack,omitempty"`
	StakeSpecial     int32  `protobuf:"varint,7,opt,name=StakeSpecial,proto3" json:"StakeSpecial,omitempty"`
	StakeFrontCenter int32  `protobuf:"varint,8,opt,name=StakeFrontCenter,proto3" json:"StakeFrontCenter,omitempty"`
	StakeCenterBack  int32  `protobuf:"varint,9,opt,name=StakeCenterBack,proto3" json:"StakeCenterBack,omitempty"`
	WinFront         string `protobuf:"bytes,10,opt,name=WinFront,proto3" json:"WinFront,omitempty"`
	WinCenter        string `protobuf:"bytes,11,opt,name=WinCenter,proto3" json:"WinCenter,omitempty"`
	WinBack          string `protobuf:"bytes,12,opt,name=WinBack,proto3" json:"WinBack,omitempty"`
	WinSpecial       string `protobuf:"bytes,13,opt,name=WinSpecial,proto3" json:"WinSpecial,omitempty"`
	WinFrontCenter   string `protobuf:"bytes,14,opt,name=WinFrontCenter,proto3" json:"WinFrontCenter,omitempty"`
	WinCenterBack    string `protobuf:"bytes,15,opt,name=WinCenterBack,proto3" json:"WinCenterBack,omitempty"`
	StockGold        string `protobuf:"bytes,16,opt,name=StockGold,proto3" json:"StockGold,omitempty"`
	WaterGold        string `protobuf:"bytes,17,opt,name=WaterGold,proto3" json:"WaterGold,omitempty"`
	BankerID         string `protobuf:"bytes,18,opt,name=BankerID,proto3" json:"BankerID,omitempty"`
}

func (x *ProtoHDWGameResult) Reset() {
	*x = ProtoHDWGameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoHDWGameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoHDWGameResult) ProtoMessage() {}

func (x *ProtoHDWGameResult) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoHDWGameResult.ProtoReflect.Descriptor instead.
func (*ProtoHDWGameResult) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{26}
}

func (x *ProtoHDWGameResult) GetRoundID() string {
	if x != nil {
		return x.RoundID
	}
	return ""
}

func (x *ProtoHDWGameResult) GetTableID() int32 {
	if x != nil {
		return x.TableID
	}
	return 0
}

func (x *ProtoHDWGameResult) GetRoundResult() string {
	if x != nil {
		return x.RoundResult
	}
	return ""
}

func (x *ProtoHDWGameResult) GetStakeFront() int32 {
	if x != nil {
		return x.StakeFront
	}
	return 0
}

func (x *ProtoHDWGameResult) GetStakeCenter() int32 {
	if x != nil {
		return x.StakeCenter
	}
	return 0
}

func (x *ProtoHDWGameResult) GetStakeBack() int32 {
	if x != nil {
		return x.StakeBack
	}
	return 0
}

func (x *ProtoHDWGameResult) GetStakeSpecial() int32 {
	if x != nil {
		return x.StakeSpecial
	}
	return 0
}

func (x *ProtoHDWGameResult) GetStakeFrontCenter() int32 {
	if x != nil {
		return x.StakeFrontCenter
	}
	return 0
}

func (x *ProtoHDWGameResult) GetStakeCenterBack() int32 {
	if x != nil {
		return x.StakeCenterBack
	}
	return 0
}

func (x *ProtoHDWGameResult) GetWinFront() string {
	if x != nil {
		return x.WinFront
	}
	return ""
}

func (x *ProtoHDWGameResult) GetWinCenter() string {
	if x != nil {
		return x.WinCenter
	}
	return ""
}

func (x *ProtoHDWGameResult) GetWinBack() string {
	if x != nil {
		return x.WinBack
	}
	return ""
}

func (x *ProtoHDWGameResult) GetWinSpecial() string {
	if x != nil {
		return x.WinSpecial
	}
	return ""
}

func (x *ProtoHDWGameResult) GetWinFrontCenter() string {
	if x != nil {
		return x.WinFrontCenter
	}
	return ""
}

func (x *ProtoHDWGameResult) GetWinCenterBack() string {
	if x != nil {
		return x.WinCenterBack
	}
	return ""
}

func (x *ProtoHDWGameResult) GetStockGold() string {
	if x != nil {
		return x.StockGold
	}
	return ""
}

func (x *ProtoHDWGameResult) GetWaterGold() string {
	if x != nil {
		return x.WaterGold
	}
	return ""
}

func (x *ProtoHDWGameResult) GetBankerID() string {
	if x != nil {
		return x.BankerID
	}
	return ""
}

// 紀錄牌局結果
type ProtoRBFGameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundID      string `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	TableID      int32  `protobuf:"varint,2,opt,name=TableID,proto3" json:"TableID,omitempty"`
	RoundResult  string `protobuf:"bytes,3,opt,name=RoundResult,proto3" json:"RoundResult,omitempty"`
	StakeRed     int32  `protobuf:"varint,4,opt,name=StakeRed,proto3" json:"StakeRed,omitempty"`
	StakeBlack   int32  `protobuf:"varint,5,opt,name=StakeBlack,proto3" json:"StakeBlack,omitempty"`
	StakeSpecial int32  `protobuf:"varint,6,opt,name=StakeSpecial,proto3" json:"StakeSpecial,omitempty"`
	WinRed       int32  `protobuf:"varint,7,opt,name=WinRed,proto3" json:"WinRed,omitempty"`
	WinBlack     int32  `protobuf:"varint,8,opt,name=WinBlack,proto3" json:"WinBlack,omitempty"`
	WinSpecial   int32  `protobuf:"varint,9,opt,name=WinSpecial,proto3" json:"WinSpecial,omitempty"`
	StockGold    string `protobuf:"bytes,10,opt,name=StockGold,proto3" json:"StockGold,omitempty"`
	WaterGold    string `protobuf:"bytes,11,opt,name=WaterGold,proto3" json:"WaterGold,omitempty"`
	BankerID     string `protobuf:"bytes,12,opt,name=BankerID,proto3" json:"BankerID,omitempty"`
}

func (x *ProtoRBFGameResult) Reset() {
	*x = ProtoRBFGameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoRBFGameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoRBFGameResult) ProtoMessage() {}

func (x *ProtoRBFGameResult) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoRBFGameResult.ProtoReflect.Descriptor instead.
func (*ProtoRBFGameResult) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{27}
}

func (x *ProtoRBFGameResult) GetRoundID() string {
	if x != nil {
		return x.RoundID
	}
	return ""
}

func (x *ProtoRBFGameResult) GetTableID() int32 {
	if x != nil {
		return x.TableID
	}
	return 0
}

func (x *ProtoRBFGameResult) GetRoundResult() string {
	if x != nil {
		return x.RoundResult
	}
	return ""
}

func (x *ProtoRBFGameResult) GetStakeRed() int32 {
	if x != nil {
		return x.StakeRed
	}
	return 0
}

func (x *ProtoRBFGameResult) GetStakeBlack() int32 {
	if x != nil {
		return x.StakeBlack
	}
	return 0
}

func (x *ProtoRBFGameResult) GetStakeSpecial() int32 {
	if x != nil {
		return x.StakeSpecial
	}
	return 0
}

func (x *ProtoRBFGameResult) GetWinRed() int32 {
	if x != nil {
		return x.WinRed
	}
	return 0
}

func (x *ProtoRBFGameResult) GetWinBlack() int32 {
	if x != nil {
		return x.WinBlack
	}
	return 0
}

func (x *ProtoRBFGameResult) GetWinSpecial() int32 {
	if x != nil {
		return x.WinSpecial
	}
	return 0
}

func (x *ProtoRBFGameResult) GetStockGold() string {
	if x != nil {
		return x.StockGold
	}
	return ""
}

func (x *ProtoRBFGameResult) GetWaterGold() string {
	if x != nil {
		return x.WaterGold
	}
	return ""
}

func (x *ProtoRBFGameResult) GetBankerID() string {
	if x != nil {
		return x.BankerID
	}
	return ""
}

// 紀錄牌局結果
type ProtoBCRGameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundID         string `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	TableID         int32  `protobuf:"varint,2,opt,name=TableID,proto3" json:"TableID,omitempty"`
	RoundResult     string `protobuf:"bytes,3,opt,name=RoundResult,proto3" json:"RoundResult,omitempty"`
	StakeBanker     int32  `protobuf:"varint,4,opt,name=StakeBanker,proto3" json:"StakeBanker,omitempty"`
	StakePlayer     int32  `protobuf:"varint,5,opt,name=StakePlayer,proto3" json:"StakePlayer,omitempty"`
	StakeDraw       int32  `protobuf:"varint,6,opt,name=StakeDraw,proto3" json:"StakeDraw,omitempty"`
	StakeBankerPair int32  `protobuf:"varint,7,opt,name=StakeBankerPair,proto3" json:"StakeBankerPair,omitempty"`
	StakePlayerPair int32  `protobuf:"varint,8,opt,name=StakePlayerPair,proto3" json:"StakePlayerPair,omitempty"`
	WinBanker       int32  `protobuf:"varint,9,opt,name=WinBanker,proto3" json:"WinBanker,omitempty"`
	WinPlayer       int32  `protobuf:"varint,10,opt,name=WinPlayer,proto3" json:"WinPlayer,omitempty"`
	WinDraw         int32  `protobuf:"varint,11,opt,name=WinDraw,proto3" json:"WinDraw,omitempty"`
	WinBankerPair   int32  `protobuf:"varint,12,opt,name=WinBankerPair,proto3" json:"WinBankerPair,omitempty"`
	WinPlayerPair   int32  `protobuf:"varint,13,opt,name=WinPlayerPair,proto3" json:"WinPlayerPair,omitempty"`
	StockGold       string `protobuf:"bytes,14,opt,name=StockGold,proto3" json:"StockGold,omitempty"`
	WaterGold       string `protobuf:"bytes,15,opt,name=WaterGold,proto3" json:"WaterGold,omitempty"`
	BankerID        string `protobuf:"bytes,16,opt,name=BankerID,proto3" json:"BankerID,omitempty"`
}

func (x *ProtoBCRGameResult) Reset() {
	*x = ProtoBCRGameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBCRGameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBCRGameResult) ProtoMessage() {}

func (x *ProtoBCRGameResult) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBCRGameResult.ProtoReflect.Descriptor instead.
func (*ProtoBCRGameResult) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{28}
}

func (x *ProtoBCRGameResult) GetRoundID() string {
	if x != nil {
		return x.RoundID
	}
	return ""
}

func (x *ProtoBCRGameResult) GetTableID() int32 {
	if x != nil {
		return x.TableID
	}
	return 0
}

func (x *ProtoBCRGameResult) GetRoundResult() string {
	if x != nil {
		return x.RoundResult
	}
	return ""
}

func (x *ProtoBCRGameResult) GetStakeBanker() int32 {
	if x != nil {
		return x.StakeBanker
	}
	return 0
}

func (x *ProtoBCRGameResult) GetStakePlayer() int32 {
	if x != nil {
		return x.StakePlayer
	}
	return 0
}

func (x *ProtoBCRGameResult) GetStakeDraw() int32 {
	if x != nil {
		return x.StakeDraw
	}
	return 0
}

func (x *ProtoBCRGameResult) GetStakeBankerPair() int32 {
	if x != nil {
		return x.StakeBankerPair
	}
	return 0
}

func (x *ProtoBCRGameResult) GetStakePlayerPair() int32 {
	if x != nil {
		return x.StakePlayerPair
	}
	return 0
}

func (x *ProtoBCRGameResult) GetWinBanker() int32 {
	if x != nil {
		return x.WinBanker
	}
	return 0
}

func (x *ProtoBCRGameResult) GetWinPlayer() int32 {
	if x != nil {
		return x.WinPlayer
	}
	return 0
}

func (x *ProtoBCRGameResult) GetWinDraw() int32 {
	if x != nil {
		return x.WinDraw
	}
	return 0
}

func (x *ProtoBCRGameResult) GetWinBankerPair() int32 {
	if x != nil {
		return x.WinBankerPair
	}
	return 0
}

func (x *ProtoBCRGameResult) GetWinPlayerPair() int32 {
	if x != nil {
		return x.WinPlayerPair
	}
	return 0
}

func (x *ProtoBCRGameResult) GetStockGold() string {
	if x != nil {
		return x.StockGold
	}
	return ""
}

func (x *ProtoBCRGameResult) GetWaterGold() string {
	if x != nil {
		return x.WaterGold
	}
	return ""
}

func (x *ProtoBCRGameResult) GetBankerID() string {
	if x != nil {
		return x.BankerID
	}
	return ""
}

// 紀錄牌局結果
type ProtoREDGameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundID            string `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	TableID            int32  `protobuf:"varint,2,opt,name=TableID,proto3" json:"TableID,omitempty"`
	RoundResult        string `protobuf:"bytes,3,opt,name=RoundResult,proto3" json:"RoundResult,omitempty"`
	BombNum            int32  `protobuf:"varint,4,opt,name=BombNum,proto3" json:"BombNum,omitempty"`                        //MineNumber // 炸彈號碼
	BankerRedGold      int32  `protobuf:"varint,5,opt,name=BankerRedGold,proto3" json:"BankerRedGold,omitempty"`            //紅包金額
	RedCount           int32  `protobuf:"varint,6,opt,name=RedCount,proto3" json:"RedCount,omitempty"`                      //紅包數量
	BankerGold         int32  `protobuf:"varint,7,opt,name=BankerGold,proto3" json:"BankerGold,omitempty"`                  //Banker 莊家輸贏
	ReceiveCount       int32  `protobuf:"varint,8,opt,name=ReceiveCount,proto3" json:"ReceiveCount,omitempty"`              //被領走的紅包數量
	ReceiveGold        int32  `protobuf:"varint,9,opt,name=ReceiveGold,proto3" json:"ReceiveGold,omitempty"`                //被領走的紅包金額
	BombCount          int32  `protobuf:"varint,10,opt,name=BombCount,proto3" json:"BombCount,omitempty"`                   //中炸彈數量
	BombGold           int32  `protobuf:"varint,11,opt,name=BombGold,proto3" json:"BombGold,omitempty"`                     //中炸彈金額
	StakeBanker        int32  `protobuf:"varint,12,opt,name=StakeBanker,proto3" json:"StakeBanker,omitempty"`               //(BankerRedGold) 紅包金額(真人)
	WinBanker          int32  `protobuf:"varint,13,opt,name=WinBanker,proto3" json:"WinBanker,omitempty"`                   //莊家輸贏(真人)
	ReceiveCountPlayer int32  `protobuf:"varint,14,opt,name=ReceiveCountPlayer,proto3" json:"ReceiveCountPlayer,omitempty"` //被領走的紅包數量(真人)
	ReceiveGoldPlayer  int32  `protobuf:"varint,15,opt,name=ReceiveGoldPlayer,proto3" json:"ReceiveGoldPlayer,omitempty"`   //被領走的紅包金額(真人)
	BombCountPlayer    int32  `protobuf:"varint,16,opt,name=BombCountPlayer,proto3" json:"BombCountPlayer,omitempty"`       //中炸彈數量(真人)
	BombGoldPlayer     int32  `protobuf:"varint,17,opt,name=BombGoldPlayer,proto3" json:"BombGoldPlayer,omitempty"`         //中炸彈金額(真人)
	StockGold          string `protobuf:"bytes,18,opt,name=StockGold,proto3" json:"StockGold,omitempty"`                    //庫存增減
	WaterGold          string `protobuf:"bytes,19,opt,name=WaterGold,proto3" json:"WaterGold,omitempty"`                    //水錢增加
	BankerID           string `protobuf:"bytes,20,opt,name=BankerID,proto3" json:"BankerID,omitempty"`
}

func (x *ProtoREDGameResult) Reset() {
	*x = ProtoREDGameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoREDGameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoREDGameResult) ProtoMessage() {}

func (x *ProtoREDGameResult) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoREDGameResult.ProtoReflect.Descriptor instead.
func (*ProtoREDGameResult) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{29}
}

func (x *ProtoREDGameResult) GetRoundID() string {
	if x != nil {
		return x.RoundID
	}
	return ""
}

func (x *ProtoREDGameResult) GetTableID() int32 {
	if x != nil {
		return x.TableID
	}
	return 0
}

func (x *ProtoREDGameResult) GetRoundResult() string {
	if x != nil {
		return x.RoundResult
	}
	return ""
}

func (x *ProtoREDGameResult) GetBombNum() int32 {
	if x != nil {
		return x.BombNum
	}
	return 0
}

func (x *ProtoREDGameResult) GetBankerRedGold() int32 {
	if x != nil {
		return x.BankerRedGold
	}
	return 0
}

func (x *ProtoREDGameResult) GetRedCount() int32 {
	if x != nil {
		return x.RedCount
	}
	return 0
}

func (x *ProtoREDGameResult) GetBankerGold() int32 {
	if x != nil {
		return x.BankerGold
	}
	return 0
}

func (x *ProtoREDGameResult) GetReceiveCount() int32 {
	if x != nil {
		return x.ReceiveCount
	}
	return 0
}

func (x *ProtoREDGameResult) GetReceiveGold() int32 {
	if x != nil {
		return x.ReceiveGold
	}
	return 0
}

func (x *ProtoREDGameResult) GetBombCount() int32 {
	if x != nil {
		return x.BombCount
	}
	return 0
}

func (x *ProtoREDGameResult) GetBombGold() int32 {
	if x != nil {
		return x.BombGold
	}
	return 0
}

func (x *ProtoREDGameResult) GetStakeBanker() int32 {
	if x != nil {
		return x.StakeBanker
	}
	return 0
}

func (x *ProtoREDGameResult) GetWinBanker() int32 {
	if x != nil {
		return x.WinBanker
	}
	return 0
}

func (x *ProtoREDGameResult) GetReceiveCountPlayer() int32 {
	if x != nil {
		return x.ReceiveCountPlayer
	}
	return 0
}

func (x *ProtoREDGameResult) GetReceiveGoldPlayer() int32 {
	if x != nil {
		return x.ReceiveGoldPlayer
	}
	return 0
}

func (x *ProtoREDGameResult) GetBombCountPlayer() int32 {
	if x != nil {
		return x.BombCountPlayer
	}
	return 0
}

func (x *ProtoREDGameResult) GetBombGoldPlayer() int32 {
	if x != nil {
		return x.BombGoldPlayer
	}
	return 0
}

func (x *ProtoREDGameResult) GetStockGold() string {
	if x != nil {
		return x.StockGold
	}
	return ""
}

func (x *ProtoREDGameResult) GetWaterGold() string {
	if x != nil {
		return x.WaterGold
	}
	return ""
}

func (x *ProtoREDGameResult) GetBankerID() string {
	if x != nil {
		return x.BankerID
	}
	return ""
}

// 紀錄牌局結果
type ProtoWCRGameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundID      string `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	TableID      int32  `protobuf:"varint,2,opt,name=TableID,proto3" json:"TableID,omitempty"`
	RoundResult  string `protobuf:"bytes,3,opt,name=RoundResult,proto3" json:"RoundResult,omitempty"`
	StakeKing    int32  `protobuf:"varint,4,opt,name=StakeKing,proto3" json:"StakeKing,omitempty"`
	StakeQueen   int32  `protobuf:"varint,5,opt,name=StakeQueen,proto3" json:"StakeQueen,omitempty"`
	StakeCastle  int32  `protobuf:"varint,6,opt,name=StakeCastle,proto3" json:"StakeCastle,omitempty"`
	StakeBishop  int32  `protobuf:"varint,7,opt,name=StakeBishop,proto3" json:"StakeBishop,omitempty"`
	StakeKnight  int32  `protobuf:"varint,8,opt,name=StakeKnight,proto3" json:"StakeKnight,omitempty"`
	StakeSoldier int32  `protobuf:"varint,9,opt,name=StakeSoldier,proto3" json:"StakeSoldier,omitempty"`
	WinKing      int32  `protobuf:"varint,10,opt,name=WinKing,proto3" json:"WinKing,omitempty"`
	WinQueen     int32  `protobuf:"varint,11,opt,name=WinQueen,proto3" json:"WinQueen,omitempty"`
	WinCastle    int32  `protobuf:"varint,12,opt,name=WinCastle,proto3" json:"WinCastle,omitempty"`
	WinBishop    int32  `protobuf:"varint,13,opt,name=WinBishop,proto3" json:"WinBishop,omitempty"`
	WinKnight    int32  `protobuf:"varint,14,opt,name=WinKnight,proto3" json:"WinKnight,omitempty"`
	WinSoldier   int32  `protobuf:"varint,15,opt,name=WinSoldier,proto3" json:"WinSoldier,omitempty"`
	StockGold    string `protobuf:"bytes,16,opt,name=StockGold,proto3" json:"StockGold,omitempty"`
	WaterGold    string `protobuf:"bytes,17,opt,name=WaterGold,proto3" json:"WaterGold,omitempty"`
	BankerID     string `protobuf:"bytes,18,opt,name=BankerID,proto3" json:"BankerID,omitempty"`
}

func (x *ProtoWCRGameResult) Reset() {
	*x = ProtoWCRGameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoWCRGameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoWCRGameResult) ProtoMessage() {}

func (x *ProtoWCRGameResult) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoWCRGameResult.ProtoReflect.Descriptor instead.
func (*ProtoWCRGameResult) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{30}
}

func (x *ProtoWCRGameResult) GetRoundID() string {
	if x != nil {
		return x.RoundID
	}
	return ""
}

func (x *ProtoWCRGameResult) GetTableID() int32 {
	if x != nil {
		return x.TableID
	}
	return 0
}

func (x *ProtoWCRGameResult) GetRoundResult() string {
	if x != nil {
		return x.RoundResult
	}
	return ""
}

func (x *ProtoWCRGameResult) GetStakeKing() int32 {
	if x != nil {
		return x.StakeKing
	}
	return 0
}

func (x *ProtoWCRGameResult) GetStakeQueen() int32 {
	if x != nil {
		return x.StakeQueen
	}
	return 0
}

func (x *ProtoWCRGameResult) GetStakeCastle() int32 {
	if x != nil {
		return x.StakeCastle
	}
	return 0
}

func (x *ProtoWCRGameResult) GetStakeBishop() int32 {
	if x != nil {
		return x.StakeBishop
	}
	return 0
}

func (x *ProtoWCRGameResult) GetStakeKnight() int32 {
	if x != nil {
		return x.StakeKnight
	}
	return 0
}

func (x *ProtoWCRGameResult) GetStakeSoldier() int32 {
	if x != nil {
		return x.StakeSoldier
	}
	return 0
}

func (x *ProtoWCRGameResult) GetWinKing() int32 {
	if x != nil {
		return x.WinKing
	}
	return 0
}

func (x *ProtoWCRGameResult) GetWinQueen() int32 {
	if x != nil {
		return x.WinQueen
	}
	return 0
}

func (x *ProtoWCRGameResult) GetWinCastle() int32 {
	if x != nil {
		return x.WinCastle
	}
	return 0
}

func (x *ProtoWCRGameResult) GetWinBishop() int32 {
	if x != nil {
		return x.WinBishop
	}
	return 0
}

func (x *ProtoWCRGameResult) GetWinKnight() int32 {
	if x != nil {
		return x.WinKnight
	}
	return 0
}

func (x *ProtoWCRGameResult) GetWinSoldier() int32 {
	if x != nil {
		return x.WinSoldier
	}
	return 0
}

func (x *ProtoWCRGameResult) GetStockGold() string {
	if x != nil {
		return x.StockGold
	}
	return ""
}

func (x *ProtoWCRGameResult) GetWaterGold() string {
	if x != nil {
		return x.WaterGold
	}
	return ""
}

func (x *ProtoWCRGameResult) GetBankerID() string {
	if x != nil {
		return x.BankerID
	}
	return ""
}

// 紀錄牌局結果
type ProtoFTSGameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundID     string `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	TableID     int32  `protobuf:"varint,2,opt,name=TableID,proto3" json:"TableID,omitempty"`
	RoundResult string `protobuf:"bytes,3,opt,name=RoundResult,proto3" json:"RoundResult,omitempty"`
	StakeBig    int32  `protobuf:"varint,4,opt,name=StakeBig,proto3" json:"StakeBig,omitempty"`
	StakeSmall  int32  `protobuf:"varint,5,opt,name=StakeSmall,proto3" json:"StakeSmall,omitempty"`
	StakeTriple int32  `protobuf:"varint,6,opt,name=StakeTriple,proto3" json:"StakeTriple,omitempty"`
	StakePoint1 int32  `protobuf:"varint,7,opt,name=StakePoint1,proto3" json:"StakePoint1,omitempty"`
	StakePoint2 int32  `protobuf:"varint,8,opt,name=StakePoint2,proto3" json:"StakePoint2,omitempty"`
	StakePoint3 int32  `protobuf:"varint,9,opt,name=StakePoint3,proto3" json:"StakePoint3,omitempty"`
	StakePoint4 int32  `protobuf:"varint,10,opt,name=StakePoint4,proto3" json:"StakePoint4,omitempty"`
	StakePoint5 int32  `protobuf:"varint,11,opt,name=StakePoint5,proto3" json:"StakePoint5,omitempty"`
	StakePoint6 int32  `protobuf:"varint,12,opt,name=StakePoint6,proto3" json:"StakePoint6,omitempty"`
	WinBig      int32  `protobuf:"varint,13,opt,name=WinBig,proto3" json:"WinBig,omitempty"`
	WinSmall    int32  `protobuf:"varint,14,opt,name=WinSmall,proto3" json:"WinSmall,omitempty"`
	WinTriple   int32  `protobuf:"varint,15,opt,name=WinTriple,proto3" json:"WinTriple,omitempty"`
	WinPoint1   int32  `protobuf:"varint,16,opt,name=WinPoint1,proto3" json:"WinPoint1,omitempty"`
	WinPoint2   int32  `protobuf:"varint,17,opt,name=WinPoint2,proto3" json:"WinPoint2,omitempty"`
	WinPoint3   int32  `protobuf:"varint,18,opt,name=WinPoint3,proto3" json:"WinPoint3,omitempty"`
	WinPoint4   int32  `protobuf:"varint,19,opt,name=WinPoint4,proto3" json:"WinPoint4,omitempty"`
	WinPoint5   int32  `protobuf:"varint,20,opt,name=WinPoint5,proto3" json:"WinPoint5,omitempty"`
	WinPoint6   int32  `protobuf:"varint,21,opt,name=WinPoint6,proto3" json:"WinPoint6,omitempty"`
	StockGold   string `protobuf:"bytes,22,opt,name=StockGold,proto3" json:"StockGold,omitempty"`
	WaterGold   string `protobuf:"bytes,24,opt,name=WaterGold,proto3" json:"WaterGold,omitempty"`
	BankerID    string `protobuf:"bytes,25,opt,name=BankerID,proto3" json:"BankerID,omitempty"`
}

func (x *ProtoFTSGameResult) Reset() {
	*x = ProtoFTSGameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoFTSGameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoFTSGameResult) ProtoMessage() {}

func (x *ProtoFTSGameResult) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoFTSGameResult.ProtoReflect.Descriptor instead.
func (*ProtoFTSGameResult) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{31}
}

func (x *ProtoFTSGameResult) GetRoundID() string {
	if x != nil {
		return x.RoundID
	}
	return ""
}

func (x *ProtoFTSGameResult) GetTableID() int32 {
	if x != nil {
		return x.TableID
	}
	return 0
}

func (x *ProtoFTSGameResult) GetRoundResult() string {
	if x != nil {
		return x.RoundResult
	}
	return ""
}

func (x *ProtoFTSGameResult) GetStakeBig() int32 {
	if x != nil {
		return x.StakeBig
	}
	return 0
}

func (x *ProtoFTSGameResult) GetStakeSmall() int32 {
	if x != nil {
		return x.StakeSmall
	}
	return 0
}

func (x *ProtoFTSGameResult) GetStakeTriple() int32 {
	if x != nil {
		return x.StakeTriple
	}
	return 0
}

func (x *ProtoFTSGameResult) GetStakePoint1() int32 {
	if x != nil {
		return x.StakePoint1
	}
	return 0
}

func (x *ProtoFTSGameResult) GetStakePoint2() int32 {
	if x != nil {
		return x.StakePoint2
	}
	return 0
}

func (x *ProtoFTSGameResult) GetStakePoint3() int32 {
	if x != nil {
		return x.StakePoint3
	}
	return 0
}

func (x *ProtoFTSGameResult) GetStakePoint4() int32 {
	if x != nil {
		return x.StakePoint4
	}
	return 0
}

func (x *ProtoFTSGameResult) GetStakePoint5() int32 {
	if x != nil {
		return x.StakePoint5
	}
	return 0
}

func (x *ProtoFTSGameResult) GetStakePoint6() int32 {
	if x != nil {
		return x.StakePoint6
	}
	return 0
}

func (x *ProtoFTSGameResult) GetWinBig() int32 {
	if x != nil {
		return x.WinBig
	}
	return 0
}

func (x *ProtoFTSGameResult) GetWinSmall() int32 {
	if x != nil {
		return x.WinSmall
	}
	return 0
}

func (x *ProtoFTSGameResult) GetWinTriple() int32 {
	if x != nil {
		return x.WinTriple
	}
	return 0
}

func (x *ProtoFTSGameResult) GetWinPoint1() int32 {
	if x != nil {
		return x.WinPoint1
	}
	return 0
}

func (x *ProtoFTSGameResult) GetWinPoint2() int32 {
	if x != nil {
		return x.WinPoint2
	}
	return 0
}

func (x *ProtoFTSGameResult) GetWinPoint3() int32 {
	if x != nil {
		return x.WinPoint3
	}
	return 0
}

func (x *ProtoFTSGameResult) GetWinPoint4() int32 {
	if x != nil {
		return x.WinPoint4
	}
	return 0
}

func (x *ProtoFTSGameResult) GetWinPoint5() int32 {
	if x != nil {
		return x.WinPoint5
	}
	return 0
}

func (x *ProtoFTSGameResult) GetWinPoint6() int32 {
	if x != nil {
		return x.WinPoint6
	}
	return 0
}

func (x *ProtoFTSGameResult) GetStockGold() string {
	if x != nil {
		return x.StockGold
	}
	return ""
}

func (x *ProtoFTSGameResult) GetWaterGold() string {
	if x != nil {
		return x.WaterGold
	}
	return ""
}

func (x *ProtoFTSGameResult) GetBankerID() string {
	if x != nil {
		return x.BankerID
	}
	return ""
}

// 紀錄牌局結果
type ProtoDZPGameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gamelog *ProtoDZPGameLog         `protobuf:"bytes,1,opt,name=Gamelog,proto3" json:"Gamelog,omitempty"`
	List    []*ProtoDZPGameLogDetail `protobuf:"bytes,2,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *ProtoDZPGameResult) Reset() {
	*x = ProtoDZPGameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoDZPGameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDZPGameResult) ProtoMessage() {}

func (x *ProtoDZPGameResult) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDZPGameResult.ProtoReflect.Descriptor instead.
func (*ProtoDZPGameResult) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{32}
}

func (x *ProtoDZPGameResult) GetGamelog() *ProtoDZPGameLog {
	if x != nil {
		return x.Gamelog
	}
	return nil
}

func (x *ProtoDZPGameResult) GetList() []*ProtoDZPGameLogDetail {
	if x != nil {
		return x.List
	}
	return nil
}

type ProtoDZPGameLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundID      string `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"` //回合編號
	TableID      int32  `protobuf:"varint,2,opt,name=TableID,proto3" json:"TableID,omitempty"`
	PublicPoker  string `protobuf:"bytes,3,opt,name=PublicPoker,proto3" json:"PublicPoker,omitempty"`    // 公牌
	BigBlind     int32  `protobuf:"varint,4,opt,name=BigBlind,proto3" json:"BigBlind,omitempty"`         // 大盲錢
	SmallBlind   int32  `protobuf:"varint,5,opt,name=SmallBlind,proto3" json:"SmallBlind,omitempty"`     // 小盲錢
	DealerSeatID int32  `protobuf:"varint,6,opt,name=DealerSeatID,proto3" json:"DealerSeatID,omitempty"` // 莊家位
	StockGold    string `protobuf:"bytes,7,opt,name=StockGold,proto3" json:"StockGold,omitempty"`        // 庫存異動
	WaterGold    string `protobuf:"bytes,8,opt,name=WaterGold,proto3" json:"WaterGold,omitempty"`        // 水錢
}

func (x *ProtoDZPGameLog) Reset() {
	*x = ProtoDZPGameLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoDZPGameLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDZPGameLog) ProtoMessage() {}

func (x *ProtoDZPGameLog) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDZPGameLog.ProtoReflect.Descriptor instead.
func (*ProtoDZPGameLog) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{33}
}

func (x *ProtoDZPGameLog) GetRoundID() string {
	if x != nil {
		return x.RoundID
	}
	return ""
}

func (x *ProtoDZPGameLog) GetTableID() int32 {
	if x != nil {
		return x.TableID
	}
	return 0
}

func (x *ProtoDZPGameLog) GetPublicPoker() string {
	if x != nil {
		return x.PublicPoker
	}
	return ""
}

func (x *ProtoDZPGameLog) GetBigBlind() int32 {
	if x != nil {
		return x.BigBlind
	}
	return 0
}

func (x *ProtoDZPGameLog) GetSmallBlind() int32 {
	if x != nil {
		return x.SmallBlind
	}
	return 0
}

func (x *ProtoDZPGameLog) GetDealerSeatID() int32 {
	if x != nil {
		return x.DealerSeatID
	}
	return 0
}

func (x *ProtoDZPGameLog) GetStockGold() string {
	if x != nil {
		return x.StockGold
	}
	return ""
}

func (x *ProtoDZPGameLog) GetWaterGold() string {
	if x != nil {
		return x.WaterGold
	}
	return ""
}

type ProtoDZPGameLogDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundID     string `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"` // 回合編號
	ID          string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	SeatID      int32  `protobuf:"varint,4,opt,name=SeatID,proto3" json:"SeatID,omitempty"`
	Poket       string `protobuf:"bytes,5,opt,name=Poket,proto3" json:"Poket,omitempty"`             // 玩家手牌
	PublicPoker string `protobuf:"bytes,6,opt,name=PublicPoker,proto3" json:"PublicPoker,omitempty"` // 公牌
	Combine     string `protobuf:"bytes,7,opt,name=Combine,proto3" json:"Combine,omitempty"`
	Rank        int32  `protobuf:"varint,8,opt,name=Rank,proto3" json:"Rank,omitempty"`           // 名次
	AddGold     string `protobuf:"bytes,9,opt,name=AddGold,proto3" json:"AddGold,omitempty"`      // 金幣異動
	WaterGold   string `protobuf:"bytes,10,opt,name=WaterGold,proto3" json:"WaterGold,omitempty"` // 水錢
}

func (x *ProtoDZPGameLogDetail) Reset() {
	*x = ProtoDZPGameLogDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoDZPGameLogDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDZPGameLogDetail) ProtoMessage() {}

func (x *ProtoDZPGameLogDetail) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDZPGameLogDetail.ProtoReflect.Descriptor instead.
func (*ProtoDZPGameLogDetail) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{34}
}

func (x *ProtoDZPGameLogDetail) GetRoundID() string {
	if x != nil {
		return x.RoundID
	}
	return ""
}

func (x *ProtoDZPGameLogDetail) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ProtoDZPGameLogDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProtoDZPGameLogDetail) GetSeatID() int32 {
	if x != nil {
		return x.SeatID
	}
	return 0
}

func (x *ProtoDZPGameLogDetail) GetPoket() string {
	if x != nil {
		return x.Poket
	}
	return ""
}

func (x *ProtoDZPGameLogDetail) GetPublicPoker() string {
	if x != nil {
		return x.PublicPoker
	}
	return ""
}

func (x *ProtoDZPGameLogDetail) GetCombine() string {
	if x != nil {
		return x.Combine
	}
	return ""
}

func (x *ProtoDZPGameLogDetail) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ProtoDZPGameLogDetail) GetAddGold() string {
	if x != nil {
		return x.AddGold
	}
	return ""
}

func (x *ProtoDZPGameLogDetail) GetWaterGold() string {
	if x != nil {
		return x.WaterGold
	}
	return ""
}

// 紀錄牌局結果
type ProtoBGFGameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gamelog *ProtoBGFGameLog         `protobuf:"bytes,1,opt,name=Gamelog,proto3" json:"Gamelog,omitempty"`
	List    []*ProtoBGFGameLogDetail `protobuf:"bytes,2,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *ProtoBGFGameResult) Reset() {
	*x = ProtoBGFGameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBGFGameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBGFGameResult) ProtoMessage() {}

func (x *ProtoBGFGameResult) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBGFGameResult.ProtoReflect.Descriptor instead.
func (*ProtoBGFGameResult) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{35}
}

func (x *ProtoBGFGameResult) GetGamelog() *ProtoBGFGameLog {
	if x != nil {
		return x.Gamelog
	}
	return nil
}

func (x *ProtoBGFGameResult) GetList() []*ProtoBGFGameLogDetail {
	if x != nil {
		return x.List
	}
	return nil
}

type ProtoBGFGameLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundID      string `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`            // 回合編號
	TableID      int32  `protobuf:"varint,2,opt,name=TableID,proto3" json:"TableID,omitempty"`           // 桌號
	BaseStake    int32  `protobuf:"varint,3,opt,name=BaseStake,proto3" json:"BaseStake,omitempty"`       // 底注
	TopStake     int32  `protobuf:"varint,4,opt,name=TopStake,proto3" json:"TopStake,omitempty"`         // 頂注
	TopRound     int32  `protobuf:"varint,5,opt,name=TopRound,proto3" json:"TopRound,omitempty"`         // 頂局
	DealerSeatID int32  `protobuf:"varint,6,opt,name=DealerSeatID,proto3" json:"DealerSeatID,omitempty"` // 莊家位
	StockGold    string `protobuf:"bytes,7,opt,name=StockGold,proto3" json:"StockGold,omitempty"`        // 庫存異動
	WaterGold    string `protobuf:"bytes,8,opt,name=WaterGold,proto3" json:"WaterGold,omitempty"`        // 水錢
}

func (x *ProtoBGFGameLog) Reset() {
	*x = ProtoBGFGameLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBGFGameLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBGFGameLog) ProtoMessage() {}

func (x *ProtoBGFGameLog) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBGFGameLog.ProtoReflect.Descriptor instead.
func (*ProtoBGFGameLog) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{36}
}

func (x *ProtoBGFGameLog) GetRoundID() string {
	if x != nil {
		return x.RoundID
	}
	return ""
}

func (x *ProtoBGFGameLog) GetTableID() int32 {
	if x != nil {
		return x.TableID
	}
	return 0
}

func (x *ProtoBGFGameLog) GetBaseStake() int32 {
	if x != nil {
		return x.BaseStake
	}
	return 0
}

func (x *ProtoBGFGameLog) GetTopStake() int32 {
	if x != nil {
		return x.TopStake
	}
	return 0
}

func (x *ProtoBGFGameLog) GetTopRound() int32 {
	if x != nil {
		return x.TopRound
	}
	return 0
}

func (x *ProtoBGFGameLog) GetDealerSeatID() int32 {
	if x != nil {
		return x.DealerSeatID
	}
	return 0
}

func (x *ProtoBGFGameLog) GetStockGold() string {
	if x != nil {
		return x.StockGold
	}
	return ""
}

func (x *ProtoBGFGameLog) GetWaterGold() string {
	if x != nil {
		return x.WaterGold
	}
	return ""
}

type ProtoBGFGameLogDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundID   string `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"` // 回合編號
	ID        string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	SeatID    int32  `protobuf:"varint,4,opt,name=SeatID,proto3" json:"SeatID,omitempty"`
	Poket     string `protobuf:"bytes,5,opt,name=Poket,proto3" json:"Poket,omitempty"`         // 玩家手牌
	Combine   string `protobuf:"bytes,6,opt,name=Combine,proto3" json:"Combine,omitempty"`     // 牌型
	Rank      int32  `protobuf:"varint,7,opt,name=Rank,proto3" json:"Rank,omitempty"`          // 名次
	AddGold   string `protobuf:"bytes,8,opt,name=AddGold,proto3" json:"AddGold,omitempty"`     // 金幣異動
	WaterGold string `protobuf:"bytes,9,opt,name=WaterGold,proto3" json:"WaterGold,omitempty"` // 水錢
}

func (x *ProtoBGFGameLogDetail) Reset() {
	*x = ProtoBGFGameLogDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBGFGameLogDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBGFGameLogDetail) ProtoMessage() {}

func (x *ProtoBGFGameLogDetail) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBGFGameLogDetail.ProtoReflect.Descriptor instead.
func (*ProtoBGFGameLogDetail) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{37}
}

func (x *ProtoBGFGameLogDetail) GetRoundID() string {
	if x != nil {
		return x.RoundID
	}
	return ""
}

func (x *ProtoBGFGameLogDetail) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ProtoBGFGameLogDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProtoBGFGameLogDetail) GetSeatID() int32 {
	if x != nil {
		return x.SeatID
	}
	return 0
}

func (x *ProtoBGFGameLogDetail) GetPoket() string {
	if x != nil {
		return x.Poket
	}
	return ""
}

func (x *ProtoBGFGameLogDetail) GetCombine() string {
	if x != nil {
		return x.Combine
	}
	return ""
}

func (x *ProtoBGFGameLogDetail) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ProtoBGFGameLogDetail) GetAddGold() string {
	if x != nil {
		return x.AddGold
	}
	return ""
}

func (x *ProtoBGFGameLogDetail) GetWaterGold() string {
	if x != nil {
		return x.WaterGold
	}
	return ""
}

// 紀錄牌局結果
type ProtoKMJGameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gamelog *ProtoKMJGameLog         `protobuf:"bytes,1,opt,name=Gamelog,proto3" json:"Gamelog,omitempty"` // 總表
	List    []*ProtoKMJGameLogDetail `protobuf:"bytes,2,rep,name=List,proto3" json:"List,omitempty"`       // 個人名細
}

func (x *ProtoKMJGameResult) Reset() {
	*x = ProtoKMJGameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoKMJGameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoKMJGameResult) ProtoMessage() {}

func (x *ProtoKMJGameResult) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoKMJGameResult.ProtoReflect.Descriptor instead.
func (*ProtoKMJGameResult) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{38}
}

func (x *ProtoKMJGameResult) GetGamelog() *ProtoKMJGameLog {
	if x != nil {
		return x.Gamelog
	}
	return nil
}

func (x *ProtoKMJGameResult) GetList() []*ProtoKMJGameLogDetail {
	if x != nil {
		return x.List
	}
	return nil
}

type ProtoKMJGameLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundID       string `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`              // 回合編號
	TableID       int32  `protobuf:"varint,2,opt,name=TableID,proto3" json:"TableID,omitempty"`             // 房間號碼
	DealerSeatID  int32  `protobuf:"varint,3,opt,name=DealerSeatID,proto3" json:"DealerSeatID,omitempty"`   // 莊家位
	StockGold     string `protobuf:"bytes,4,opt,name=StockGold,proto3" json:"StockGold,omitempty"`          // 庫存異動
	WaterGold     string `protobuf:"bytes,5,opt,name=WaterGold,proto3" json:"WaterGold,omitempty"`          // 水錢
	BasePoint     int32  `protobuf:"varint,6,opt,name=BasePoint,proto3" json:"BasePoint,omitempty"`         // 底分
	TopPointCount int32  `protobuf:"varint,7,opt,name=TopPointCount,proto3" json:"TopPointCount,omitempty"` // 頂番
	RoomSetting   string `protobuf:"bytes,8,opt,name=RoomSetting,proto3" json:"RoomSetting,omitempty"`      // 房間設定
}

func (x *ProtoKMJGameLog) Reset() {
	*x = ProtoKMJGameLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoKMJGameLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoKMJGameLog) ProtoMessage() {}

func (x *ProtoKMJGameLog) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoKMJGameLog.ProtoReflect.Descriptor instead.
func (*ProtoKMJGameLog) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{39}
}

func (x *ProtoKMJGameLog) GetRoundID() string {
	if x != nil {
		return x.RoundID
	}
	return ""
}

func (x *ProtoKMJGameLog) GetTableID() int32 {
	if x != nil {
		return x.TableID
	}
	return 0
}

func (x *ProtoKMJGameLog) GetDealerSeatID() int32 {
	if x != nil {
		return x.DealerSeatID
	}
	return 0
}

func (x *ProtoKMJGameLog) GetStockGold() string {
	if x != nil {
		return x.StockGold
	}
	return ""
}

func (x *ProtoKMJGameLog) GetWaterGold() string {
	if x != nil {
		return x.WaterGold
	}
	return ""
}

func (x *ProtoKMJGameLog) GetBasePoint() int32 {
	if x != nil {
		return x.BasePoint
	}
	return 0
}

func (x *ProtoKMJGameLog) GetTopPointCount() int32 {
	if x != nil {
		return x.TopPointCount
	}
	return 0
}

func (x *ProtoKMJGameLog) GetRoomSetting() string {
	if x != nil {
		return x.RoomSetting
	}
	return ""
}

type ProtoKMJGameLogDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundID         string `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`                  // 回合編號
	ID              string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`                            // 玩家ID
	Name            string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`                        // 玩家名子
	SeatID          int32  `protobuf:"varint,4,opt,name=SeatID,proto3" json:"SeatID,omitempty"`                   // 座位編號
	AddGold         string `protobuf:"bytes,5,opt,name=AddGold,proto3" json:"AddGold,omitempty"`                  // 金幣異動
	WaterGold       string `protobuf:"bytes,6,opt,name=WaterGold,proto3" json:"WaterGold,omitempty"`              // 水錢
	Rank            int32  `protobuf:"varint,7,opt,name=Rank,proto3" json:"Rank,omitempty"`                       // 名次
	IsWin           bool   `protobuf:"varint,8,opt,name=IsWin,proto3" json:"IsWin,omitempty"`                     // 是否獲勝
	IsReady         bool   `protobuf:"varint,9,opt,name=IsReady,proto3" json:"IsReady,omitempty"`                 // 是否聽牌
	PlayerWinGold   string `protobuf:"bytes,10,opt,name=PlayerWinGold,proto3" json:"PlayerWinGold,omitempty"`     // 贏錢
	PlayerWaterGold string `protobuf:"bytes,11,opt,name=PlayerWaterGold,proto3" json:"PlayerWaterGold,omitempty"` // 抽水
	PlayerLoseGold  string `protobuf:"bytes,12,opt,name=PlayerLoseGold,proto3" json:"PlayerLoseGold,omitempty"`   // 輸錢
	WinTypes        string `protobuf:"bytes,13,opt,name=WinTypes,proto3" json:"WinTypes,omitempty"`               // 牌型
	Hand            string `protobuf:"bytes,14,opt,name=Hand,proto3" json:"Hand,omitempty"`                       // 手上的牌
	Exposed         string `protobuf:"bytes,15,opt,name=Exposed,proto3" json:"Exposed,omitempty"`                 // 碰在外面的牌
}

func (x *ProtoKMJGameLogDetail) Reset() {
	*x = ProtoKMJGameLogDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoKMJGameLogDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoKMJGameLogDetail) ProtoMessage() {}

func (x *ProtoKMJGameLogDetail) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoKMJGameLogDetail.ProtoReflect.Descriptor instead.
func (*ProtoKMJGameLogDetail) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{40}
}

func (x *ProtoKMJGameLogDetail) GetRoundID() string {
	if x != nil {
		return x.RoundID
	}
	return ""
}

func (x *ProtoKMJGameLogDetail) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ProtoKMJGameLogDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProtoKMJGameLogDetail) GetSeatID() int32 {
	if x != nil {
		return x.SeatID
	}
	return 0
}

func (x *ProtoKMJGameLogDetail) GetAddGold() string {
	if x != nil {
		return x.AddGold
	}
	return ""
}

func (x *ProtoKMJGameLogDetail) GetWaterGold() string {
	if x != nil {
		return x.WaterGold
	}
	return ""
}

func (x *ProtoKMJGameLogDetail) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ProtoKMJGameLogDetail) GetIsWin() bool {
	if x != nil {
		return x.IsWin
	}
	return false
}

func (x *ProtoKMJGameLogDetail) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

func (x *ProtoKMJGameLogDetail) GetPlayerWinGold() string {
	if x != nil {
		return x.PlayerWinGold
	}
	return ""
}

func (x *ProtoKMJGameLogDetail) GetPlayerWaterGold() string {
	if x != nil {
		return x.PlayerWaterGold
	}
	return ""
}

func (x *ProtoKMJGameLogDetail) GetPlayerLoseGold() string {
	if x != nil {
		return x.PlayerLoseGold
	}
	return ""
}

func (x *ProtoKMJGameLogDetail) GetWinTypes() string {
	if x != nil {
		return x.WinTypes
	}
	return ""
}

func (x *ProtoKMJGameLogDetail) GetHand() string {
	if x != nil {
		return x.Hand
	}
	return ""
}

func (x *ProtoKMJGameLogDetail) GetExposed() string {
	if x != nil {
		return x.Exposed
	}
	return ""
}

// 紀錄牌局結果 - 搶莊牛牛
type ProtoRNNGameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gamelog *ProtoRNNGameLog         `protobuf:"bytes,1,opt,name=Gamelog,proto3" json:"Gamelog,omitempty"` // 總表
	List    []*ProtoRNNGameLogDetail `protobuf:"bytes,2,rep,name=List,proto3" json:"List,omitempty"`       // 個人名細
}

func (x *ProtoRNNGameResult) Reset() {
	*x = ProtoRNNGameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoRNNGameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoRNNGameResult) ProtoMessage() {}

func (x *ProtoRNNGameResult) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoRNNGameResult.ProtoReflect.Descriptor instead.
func (*ProtoRNNGameResult) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{41}
}

func (x *ProtoRNNGameResult) GetGamelog() *ProtoRNNGameLog {
	if x != nil {
		return x.Gamelog
	}
	return nil
}

func (x *ProtoRNNGameResult) GetList() []*ProtoRNNGameLogDetail {
	if x != nil {
		return x.List
	}
	return nil
}

type ProtoRNNGameLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundID      string `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`            // 回合編號
	TableID      int32  `protobuf:"varint,2,opt,name=TableID,proto3" json:"TableID,omitempty"`           // 房間號碼
	DealerSeatID int32  `protobuf:"varint,3,opt,name=DealerSeatID,proto3" json:"DealerSeatID,omitempty"` // 莊家位
	StockGold    string `protobuf:"bytes,4,opt,name=StockGold,proto3" json:"StockGold,omitempty"`        // 庫存異動
	WaterGold    string `protobuf:"bytes,5,opt,name=WaterGold,proto3" json:"WaterGold,omitempty"`        // 水錢
	BasePoint    int32  `protobuf:"varint,6,opt,name=BasePoint,proto3" json:"BasePoint,omitempty"`       // 底分
	RoomSetting  string `protobuf:"bytes,7,opt,name=RoomSetting,proto3" json:"RoomSetting,omitempty"`    // 房間設定
}

func (x *ProtoRNNGameLog) Reset() {
	*x = ProtoRNNGameLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoRNNGameLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoRNNGameLog) ProtoMessage() {}

func (x *ProtoRNNGameLog) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoRNNGameLog.ProtoReflect.Descriptor instead.
func (*ProtoRNNGameLog) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{42}
}

func (x *ProtoRNNGameLog) GetRoundID() string {
	if x != nil {
		return x.RoundID
	}
	return ""
}

func (x *ProtoRNNGameLog) GetTableID() int32 {
	if x != nil {
		return x.TableID
	}
	return 0
}

func (x *ProtoRNNGameLog) GetDealerSeatID() int32 {
	if x != nil {
		return x.DealerSeatID
	}
	return 0
}

func (x *ProtoRNNGameLog) GetStockGold() string {
	if x != nil {
		return x.StockGold
	}
	return ""
}

func (x *ProtoRNNGameLog) GetWaterGold() string {
	if x != nil {
		return x.WaterGold
	}
	return ""
}

func (x *ProtoRNNGameLog) GetBasePoint() int32 {
	if x != nil {
		return x.BasePoint
	}
	return 0
}

func (x *ProtoRNNGameLog) GetRoomSetting() string {
	if x != nil {
		return x.RoomSetting
	}
	return ""
}

type ProtoRNNGameLogDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundID   string `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`      // 回合編號
	ID        string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`                // 玩家ID
	Name      string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`            // 玩家名子
	SeatID    int32  `protobuf:"varint,4,opt,name=SeatID,proto3" json:"SeatID,omitempty"`       // 座位編號
	AddGold   string `protobuf:"bytes,5,opt,name=AddGold,proto3" json:"AddGold,omitempty"`      // 金幣異動
	WaterGold string `protobuf:"bytes,6,opt,name=WaterGold,proto3" json:"WaterGold,omitempty"`  // 水錢
	Rank      int32  `protobuf:"varint,7,opt,name=Rank,proto3" json:"Rank,omitempty"`           // 名次
	IsWin     bool   `protobuf:"varint,8,opt,name=IsWin,proto3" json:"IsWin,omitempty"`         // 是否獲勝
	TwoCard   string `protobuf:"bytes,9,opt,name=TwoCard,proto3" json:"TwoCard,omitempty"`      // 牌型
	ThreeCard string `protobuf:"bytes,10,opt,name=ThreeCard,proto3" json:"ThreeCard,omitempty"` // 牌型
	Hand      string `protobuf:"bytes,11,opt,name=Hand,proto3" json:"Hand,omitempty"`           // 牌型
	Combine   int32  `protobuf:"varint,12,opt,name=Combine,proto3" json:"Combine,omitempty"`    // 牌型
	RobMulti  int32  `protobuf:"varint,13,opt,name=RobMulti,proto3" json:"RobMulti,omitempty"`  // 搶莊倍率
	BetMulti  int32  `protobuf:"varint,14,opt,name=BetMulti,proto3" json:"BetMulti,omitempty"`  // 下注倍率
}

func (x *ProtoRNNGameLogDetail) Reset() {
	*x = ProtoRNNGameLogDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoRNNGameLogDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoRNNGameLogDetail) ProtoMessage() {}

func (x *ProtoRNNGameLogDetail) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoRNNGameLogDetail.ProtoReflect.Descriptor instead.
func (*ProtoRNNGameLogDetail) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{43}
}

func (x *ProtoRNNGameLogDetail) GetRoundID() string {
	if x != nil {
		return x.RoundID
	}
	return ""
}

func (x *ProtoRNNGameLogDetail) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ProtoRNNGameLogDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProtoRNNGameLogDetail) GetSeatID() int32 {
	if x != nil {
		return x.SeatID
	}
	return 0
}

func (x *ProtoRNNGameLogDetail) GetAddGold() string {
	if x != nil {
		return x.AddGold
	}
	return ""
}

func (x *ProtoRNNGameLogDetail) GetWaterGold() string {
	if x != nil {
		return x.WaterGold
	}
	return ""
}

func (x *ProtoRNNGameLogDetail) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ProtoRNNGameLogDetail) GetIsWin() bool {
	if x != nil {
		return x.IsWin
	}
	return false
}

func (x *ProtoRNNGameLogDetail) GetTwoCard() string {
	if x != nil {
		return x.TwoCard
	}
	return ""
}

func (x *ProtoRNNGameLogDetail) GetThreeCard() string {
	if x != nil {
		return x.ThreeCard
	}
	return ""
}

func (x *ProtoRNNGameLogDetail) GetHand() string {
	if x != nil {
		return x.Hand
	}
	return ""
}

func (x *ProtoRNNGameLogDetail) GetCombine() int32 {
	if x != nil {
		return x.Combine
	}
	return 0
}

func (x *ProtoRNNGameLogDetail) GetRobMulti() int32 {
	if x != nil {
		return x.RobMulti
	}
	return 0
}

func (x *ProtoRNNGameLogDetail) GetBetMulti() int32 {
	if x != nil {
		return x.BetMulti
	}
	return 0
}

// 鬥地主 紀錄牌局結果
type ProtoDDZGameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gamelog *ProtoDDZGameLog         `protobuf:"bytes,1,opt,name=Gamelog,proto3" json:"Gamelog,omitempty"` // 總表
	List    []*ProtoDDZGameLogDetail `protobuf:"bytes,2,rep,name=List,proto3" json:"List,omitempty"`       // 個人名細
}

func (x *ProtoDDZGameResult) Reset() {
	*x = ProtoDDZGameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoDDZGameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDDZGameResult) ProtoMessage() {}

func (x *ProtoDDZGameResult) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDDZGameResult.ProtoReflect.Descriptor instead.
func (*ProtoDDZGameResult) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{44}
}

func (x *ProtoDDZGameResult) GetGamelog() *ProtoDDZGameLog {
	if x != nil {
		return x.Gamelog
	}
	return nil
}

func (x *ProtoDDZGameResult) GetList() []*ProtoDDZGameLogDetail {
	if x != nil {
		return x.List
	}
	return nil
}

type ProtoDDZGameLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundID        string `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`            // 回合編號
	TableID        int32  `protobuf:"varint,2,opt,name=TableID,proto3" json:"TableID,omitempty"`           // 房間號碼
	DealerSeatID   int32  `protobuf:"varint,3,opt,name=DealerSeatID,proto3" json:"DealerSeatID,omitempty"` // 莊家位
	WinnerID       int32  `protobuf:"varint,4,opt,name=WinnerID,proto3" json:"WinnerID,omitempty"`         // 贏家座位編號
	SpecialWinType string `protobuf:"bytes,5,opt,name=SpecialWinType,proto3" json:"SpecialWinType,omitempty"`
	StockGold      string `protobuf:"bytes,6,opt,name=StockGold,proto3" json:"StockGold,omitempty"`  // 庫存異動
	WaterGold      string `protobuf:"bytes,7,opt,name=WaterGold,proto3" json:"WaterGold,omitempty"`  // 水錢
	BasePoint      int32  `protobuf:"varint,8,opt,name=BasePoint,proto3" json:"BasePoint,omitempty"` // 底分
	TopMultiple    int32  `protobuf:"varint,9,opt,name=TopMultiple,proto3" json:"TopMultiple,omitempty"`
	SettleMultiple int32  `protobuf:"varint,10,opt,name=SettleMultiple,proto3" json:"SettleMultiple,omitempty"`
	RoomSetting    string `protobuf:"bytes,11,opt,name=RoomSetting,proto3" json:"RoomSetting,omitempty"` // 房間設定
}

func (x *ProtoDDZGameLog) Reset() {
	*x = ProtoDDZGameLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoDDZGameLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDDZGameLog) ProtoMessage() {}

func (x *ProtoDDZGameLog) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDDZGameLog.ProtoReflect.Descriptor instead.
func (*ProtoDDZGameLog) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{45}
}

func (x *ProtoDDZGameLog) GetRoundID() string {
	if x != nil {
		return x.RoundID
	}
	return ""
}

func (x *ProtoDDZGameLog) GetTableID() int32 {
	if x != nil {
		return x.TableID
	}
	return 0
}

func (x *ProtoDDZGameLog) GetDealerSeatID() int32 {
	if x != nil {
		return x.DealerSeatID
	}
	return 0
}

func (x *ProtoDDZGameLog) GetWinnerID() int32 {
	if x != nil {
		return x.WinnerID
	}
	return 0
}

func (x *ProtoDDZGameLog) GetSpecialWinType() string {
	if x != nil {
		return x.SpecialWinType
	}
	return ""
}

func (x *ProtoDDZGameLog) GetStockGold() string {
	if x != nil {
		return x.StockGold
	}
	return ""
}

func (x *ProtoDDZGameLog) GetWaterGold() string {
	if x != nil {
		return x.WaterGold
	}
	return ""
}

func (x *ProtoDDZGameLog) GetBasePoint() int32 {
	if x != nil {
		return x.BasePoint
	}
	return 0
}

func (x *ProtoDDZGameLog) GetTopMultiple() int32 {
	if x != nil {
		return x.TopMultiple
	}
	return 0
}

func (x *ProtoDDZGameLog) GetSettleMultiple() int32 {
	if x != nil {
		return x.SettleMultiple
	}
	return 0
}

func (x *ProtoDDZGameLog) GetRoomSetting() string {
	if x != nil {
		return x.RoomSetting
	}
	return ""
}

type ProtoDDZGameLogDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundID   string `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`     // 回合編號
	ID        string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`               // 玩家ID
	Name      string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`           // 玩家名子
	SeatID    int32  `protobuf:"varint,4,opt,name=SeatID,proto3" json:"SeatID,omitempty"`      // 座位編號
	AddGold   string `protobuf:"bytes,5,opt,name=AddGold,proto3" json:"AddGold,omitempty"`     // 金幣異動
	WaterGold string `protobuf:"bytes,6,opt,name=WaterGold,proto3" json:"WaterGold,omitempty"` // 水錢
	Hand      string `protobuf:"bytes,7,opt,name=Hand,proto3" json:"Hand,omitempty"`           // 手上的牌
	HandOri   string `protobuf:"bytes,8,opt,name=HandOri,proto3" json:"HandOri,omitempty"`     // 原始手牌
}

func (x *ProtoDDZGameLogDetail) Reset() {
	*x = ProtoDDZGameLogDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoDDZGameLogDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDDZGameLogDetail) ProtoMessage() {}

func (x *ProtoDDZGameLogDetail) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDDZGameLogDetail.ProtoReflect.Descriptor instead.
func (*ProtoDDZGameLogDetail) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{46}
}

func (x *ProtoDDZGameLogDetail) GetRoundID() string {
	if x != nil {
		return x.RoundID
	}
	return ""
}

func (x *ProtoDDZGameLogDetail) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ProtoDDZGameLogDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProtoDDZGameLogDetail) GetSeatID() int32 {
	if x != nil {
		return x.SeatID
	}
	return 0
}

func (x *ProtoDDZGameLogDetail) GetAddGold() string {
	if x != nil {
		return x.AddGold
	}
	return ""
}

func (x *ProtoDDZGameLogDetail) GetWaterGold() string {
	if x != nil {
		return x.WaterGold
	}
	return ""
}

func (x *ProtoDDZGameLogDetail) GetHand() string {
	if x != nil {
		return x.Hand
	}
	return ""
}

func (x *ProtoDDZGameLogDetail) GetHandOri() string {
	if x != nil {
		return x.HandOri
	}
	return ""
}

type ProtoAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	DeviceID          string `protobuf:"bytes,2,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	Avatar            int32  `protobuf:"varint,3,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	Name              string `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	Gold              string `protobuf:"bytes,5,opt,name=Gold,proto3" json:"Gold,omitempty"`       // 錢包金幣
	BoxGold           string `protobuf:"bytes,6,opt,name=BoxGold,proto3" json:"BoxGold,omitempty"` // 保險箱金幣
	IsAI              bool   `protobuf:"varint,7,opt,name=IsAI,proto3" json:"IsAI,omitempty"`
	PhoneID           string `protobuf:"bytes,8,opt,name=PhoneID,proto3" json:"PhoneID,omitempty"`
	IsBan             bool   `protobuf:"varint,9,opt,name=IsBan,proto3" json:"IsBan,omitempty"`
	UpID              string `protobuf:"bytes,10,opt,name=UpID,proto3" json:"UpID,omitempty"`
	BankCard          string `protobuf:"bytes,11,opt,name=BankCard,proto3" json:"BankCard,omitempty"`
	CreateDate        string `protobuf:"bytes,12,opt,name=CreateDate,proto3" json:"CreateDate,omitempty"`
	FirstPurchaseDate string `protobuf:"bytes,13,opt,name=FirstPurchaseDate,proto3" json:"FirstPurchaseDate,omitempty"`
	LastLoginTime     string `protobuf:"bytes,14,opt,name=LastLoginTime,proto3" json:"LastLoginTime,omitempty"`
	LastLogoutTime    string `protobuf:"bytes,15,opt,name=LastLogoutTime,proto3" json:"LastLogoutTime,omitempty"`
}

func (x *ProtoAccount) Reset() {
	*x = ProtoAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoAccount) ProtoMessage() {}

func (x *ProtoAccount) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoAccount.ProtoReflect.Descriptor instead.
func (*ProtoAccount) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{47}
}

func (x *ProtoAccount) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ProtoAccount) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *ProtoAccount) GetAvatar() int32 {
	if x != nil {
		return x.Avatar
	}
	return 0
}

func (x *ProtoAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProtoAccount) GetGold() string {
	if x != nil {
		return x.Gold
	}
	return ""
}

func (x *ProtoAccount) GetBoxGold() string {
	if x != nil {
		return x.BoxGold
	}
	return ""
}

func (x *ProtoAccount) GetIsAI() bool {
	if x != nil {
		return x.IsAI
	}
	return false
}

func (x *ProtoAccount) GetPhoneID() string {
	if x != nil {
		return x.PhoneID
	}
	return ""
}

func (x *ProtoAccount) GetIsBan() bool {
	if x != nil {
		return x.IsBan
	}
	return false
}

func (x *ProtoAccount) GetUpID() string {
	if x != nil {
		return x.UpID
	}
	return ""
}

func (x *ProtoAccount) GetBankCard() string {
	if x != nil {
		return x.BankCard
	}
	return ""
}

func (x *ProtoAccount) GetCreateDate() string {
	if x != nil {
		return x.CreateDate
	}
	return ""
}

func (x *ProtoAccount) GetFirstPurchaseDate() string {
	if x != nil {
		return x.FirstPurchaseDate
	}
	return ""
}

func (x *ProtoAccount) GetLastLoginTime() string {
	if x != nil {
		return x.LastLoginTime
	}
	return ""
}

func (x *ProtoAccount) GetLastLogoutTime() string {
	if x != nil {
		return x.LastLogoutTime
	}
	return ""
}

// The response message containing the greetings.
type LoginReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool          `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Account *ProtoAccount `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *LoginReply) Reset() {
	*x = LoginReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReply) ProtoMessage() {}

func (x *LoginReply) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReply.ProtoReflect.Descriptor instead.
func (*LoginReply) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{48}
}

func (x *LoginReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *LoginReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LoginReply) GetAccount() *ProtoAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

type AccountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool          `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Account *ProtoAccount `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *AccountReply) Reset() {
	*x = AccountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountReply) ProtoMessage() {}

func (x *AccountReply) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountReply.ProtoReflect.Descriptor instead.
func (*AccountReply) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{49}
}

func (x *AccountReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AccountReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AccountReply) GetAccount() *ProtoAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

// The response message containing the greetings.
type IncreaseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool          `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Account *ProtoAccount `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *IncreaseReply) Reset() {
	*x = IncreaseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncreaseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreaseReply) ProtoMessage() {}

func (x *IncreaseReply) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreaseReply.ProtoReflect.Descriptor instead.
func (*IncreaseReply) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{50}
}

func (x *IncreaseReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *IncreaseReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *IncreaseReply) GetAccount() *ProtoAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

// The response message containing the greetings.
type ChangeAvatarReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool          `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Account *ProtoAccount `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *ChangeAvatarReply) Reset() {
	*x = ChangeAvatarReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeAvatarReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAvatarReply) ProtoMessage() {}

func (x *ChangeAvatarReply) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAvatarReply.ProtoReflect.Descriptor instead.
func (*ChangeAvatarReply) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{51}
}

func (x *ChangeAvatarReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ChangeAvatarReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ChangeAvatarReply) GetAccount() *ProtoAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

// The response message containing the greetings.
type ChangeNameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool          `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Account *ProtoAccount `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *ChangeNameReply) Reset() {
	*x = ChangeNameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeNameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeNameReply) ProtoMessage() {}

func (x *ChangeNameReply) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeNameReply.ProtoReflect.Descriptor instead.
func (*ChangeNameReply) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{52}
}

func (x *ChangeNameReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ChangeNameReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ChangeNameReply) GetAccount() *ProtoAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

type MembersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool            `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message  string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Accounts []*ProtoAccount `protobuf:"bytes,3,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *MembersReply) Reset() {
	*x = MembersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MembersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembersReply) ProtoMessage() {}

func (x *MembersReply) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembersReply.ProtoReflect.Descriptor instead.
func (*MembersReply) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{53}
}

func (x *MembersReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MembersReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MembersReply) GetAccounts() []*ProtoAccount {
	if x != nil {
		return x.Accounts
	}
	return nil
}

/// 回傳 - 寫入牌局結果
type GameLogReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	StockGold string `protobuf:"bytes,3,opt,name=StockGold,proto3" json:"StockGold,omitempty"` // 當前遊戲庫存
}

func (x *GameLogReply) Reset() {
	*x = GameLogReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameLogReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameLogReply) ProtoMessage() {}

func (x *GameLogReply) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameLogReply.ProtoReflect.Descriptor instead.
func (*GameLogReply) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{54}
}

func (x *GameLogReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GameLogReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GameLogReply) GetStockGold() string {
	if x != nil {
		return x.StockGold
	}
	return ""
}

// 回傳
type LogReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LogReply) Reset() {
	*x = LogReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogReply) ProtoMessage() {}

func (x *LogReply) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogReply.ProtoReflect.Descriptor instead.
func (*LogReply) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{55}
}

func (x *LogReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *LogReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 通用回傳 字串格式
type StringReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Value   string `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *StringReply) Reset() {
	*x = StringReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringReply) ProtoMessage() {}

func (x *StringReply) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringReply.ProtoReflect.Descriptor instead.
func (*StringReply) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{56}
}

func (x *StringReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StringReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StringReply) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// 通用回傳 INT格式
type DbIntReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Value   int32  `protobuf:"varint,3,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *DbIntReply) Reset() {
	*x = DbIntReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbIntReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbIntReply) ProtoMessage() {}

func (x *DbIntReply) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbIntReply.ProtoReflect.Descriptor instead.
func (*DbIntReply) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{57}
}

func (x *DbIntReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DbIntReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DbIntReply) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// 請款 資料表
type DbTakeMoneyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateDate   string `protobuf:"bytes,1,opt,name=CreateDate,proto3" json:"CreateDate,omitempty"`
	OrderID      string `protobuf:"bytes,2,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	PlayerID     string `protobuf:"bytes,3,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	PlayerName   string `protobuf:"bytes,4,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`
	Cash         int32  `protobuf:"varint,5,opt,name=Cash,proto3" json:"Cash,omitempty"`                // 提現金額
	Status       int32  `protobuf:"varint,6,opt,name=Status,proto3" json:"Status,omitempty"`            // Status = 0 unknown,1 審核中,2 審核通過,3 付款完成,4 拒絕,5 取消
	CompleteDate string `protobuf:"bytes,7,opt,name=CompleteDate,proto3" json:"CompleteDate,omitempty"` // 付款完成日期
	Memo         string `protobuf:"bytes,8,opt,name=Memo,proto3" json:"Memo,omitempty"`                 // 備忘錄
	Fee          int32  `protobuf:"varint,9,opt,name=Fee,proto3" json:"Fee,omitempty"`                  // 手續費
	Pay          int32  `protobuf:"varint,10,opt,name=Pay,proto3" json:"Pay,omitempty"`                 // 撥款金額
	Bank         string `protobuf:"bytes,11,opt,name=Bank,proto3" json:"Bank,omitempty"`                // 銀行名稱，或支付系統名稱
	CardNo       string `protobuf:"bytes,12,opt,name=CardNo,proto3" json:"CardNo,omitempty"`            // 卡號，或帳號
}

func (x *DbTakeMoneyData) Reset() {
	*x = DbTakeMoneyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbTakeMoneyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbTakeMoneyData) ProtoMessage() {}

func (x *DbTakeMoneyData) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbTakeMoneyData.ProtoReflect.Descriptor instead.
func (*DbTakeMoneyData) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{58}
}

func (x *DbTakeMoneyData) GetCreateDate() string {
	if x != nil {
		return x.CreateDate
	}
	return ""
}

func (x *DbTakeMoneyData) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *DbTakeMoneyData) GetPlayerID() string {
	if x != nil {
		return x.PlayerID
	}
	return ""
}

func (x *DbTakeMoneyData) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *DbTakeMoneyData) GetCash() int32 {
	if x != nil {
		return x.Cash
	}
	return 0
}

func (x *DbTakeMoneyData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DbTakeMoneyData) GetCompleteDate() string {
	if x != nil {
		return x.CompleteDate
	}
	return ""
}

func (x *DbTakeMoneyData) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *DbTakeMoneyData) GetFee() int32 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *DbTakeMoneyData) GetPay() int32 {
	if x != nil {
		return x.Pay
	}
	return 0
}

func (x *DbTakeMoneyData) GetBank() string {
	if x != nil {
		return x.Bank
	}
	return ""
}

func (x *DbTakeMoneyData) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

type DbTakeMoneyListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*DbTakeMoneyData `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *DbTakeMoneyListReply) Reset() {
	*x = DbTakeMoneyListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbTakeMoneyListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbTakeMoneyListReply) ProtoMessage() {}

func (x *DbTakeMoneyListReply) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbTakeMoneyListReply.ProtoReflect.Descriptor instead.
func (*DbTakeMoneyListReply) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{59}
}

func (x *DbTakeMoneyListReply) GetList() []*DbTakeMoneyData {
	if x != nil {
		return x.List
	}
	return nil
}

type DbTopUpData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId  string  `protobuf:"bytes,1,opt,name=OrderId,proto3" json:"OrderId,omitempty"`
	BuyerId  string  `protobuf:"bytes,2,opt,name=BuyerId,proto3" json:"BuyerId,omitempty"`
	DateTime string  `protobuf:"bytes,3,opt,name=DateTime,proto3" json:"DateTime,omitempty"`
	Money    float64 `protobuf:"fixed64,4,opt,name=Money,proto3" json:"Money,omitempty"`
}

func (x *DbTopUpData) Reset() {
	*x = DbTopUpData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbTopUpData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbTopUpData) ProtoMessage() {}

func (x *DbTopUpData) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbTopUpData.ProtoReflect.Descriptor instead.
func (*DbTopUpData) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{60}
}

func (x *DbTopUpData) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *DbTopUpData) GetBuyerId() string {
	if x != nil {
		return x.BuyerId
	}
	return ""
}

func (x *DbTopUpData) GetDateTime() string {
	if x != nil {
		return x.DateTime
	}
	return ""
}

func (x *DbTopUpData) GetMoney() float64 {
	if x != nil {
		return x.Money
	}
	return 0
}

type DbTopUpListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool           `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	List    []*DbTopUpData `protobuf:"bytes,3,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *DbTopUpListReply) Reset() {
	*x = DbTopUpListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbTopUpListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbTopUpListReply) ProtoMessage() {}

func (x *DbTopUpListReply) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbTopUpListReply.ProtoReflect.Descriptor instead.
func (*DbTopUpListReply) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{61}
}

func (x *DbTopUpListReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DbTopUpListReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DbTopUpListReply) GetList() []*DbTopUpData {
	if x != nil {
		return x.List
	}
	return nil
}

type DbMailBoxReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool             `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	List    []*DbMailBoxData `protobuf:"bytes,3,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *DbMailBoxReply) Reset() {
	*x = DbMailBoxReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbMailBoxReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbMailBoxReply) ProtoMessage() {}

func (x *DbMailBoxReply) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbMailBoxReply.ProtoReflect.Descriptor instead.
func (*DbMailBoxReply) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{62}
}

func (x *DbMailBoxReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DbMailBoxReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DbMailBoxReply) GetList() []*DbMailBoxData {
	if x != nil {
		return x.List
	}
	return nil
}

type DbMailBoxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailID      int32  `protobuf:"varint,1,opt,name=MailID,proto3" json:"MailID,omitempty"`
	ToWhoID     string `protobuf:"bytes,2,opt,name=ToWhoID,proto3" json:"ToWhoID,omitempty"`
	FromWhoID   string `protobuf:"bytes,3,opt,name=FromWhoID,proto3" json:"FromWhoID,omitempty"`
	Avatar      int32  `protobuf:"varint,4,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	FromWhoName string `protobuf:"bytes,5,opt,name=FromWhoName,proto3" json:"FromWhoName,omitempty"`
	ItemID      int32  `protobuf:"varint,6,opt,name=ItemID,proto3" json:"ItemID,omitempty"`
	ItemNumber  string `protobuf:"bytes,7,opt,name=ItemNumber,proto3" json:"ItemNumber,omitempty"` // 數量(金額)
	Information string `protobuf:"bytes,8,opt,name=Information,proto3" json:"Information,omitempty"`
	MailTime    string `protobuf:"bytes,9,opt,name=MailTime,proto3" json:"MailTime,omitempty"`
	Deadline    string `protobuf:"bytes,10,opt,name=Deadline,proto3" json:"Deadline,omitempty"`
	ReceiveTime string `protobuf:"bytes,11,opt,name=ReceiveTime,proto3" json:"ReceiveTime,omitempty"` // 領取時間 (之後如果需要做領取紀錄會需要)
	MailType    int32  `protobuf:"varint,12,opt,name=MailType,proto3" json:"MailType,omitempty"`      // 郵件類型
}

func (x *DbMailBoxData) Reset() {
	*x = DbMailBoxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbMailBoxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbMailBoxData) ProtoMessage() {}

func (x *DbMailBoxData) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbMailBoxData.ProtoReflect.Descriptor instead.
func (*DbMailBoxData) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{63}
}

func (x *DbMailBoxData) GetMailID() int32 {
	if x != nil {
		return x.MailID
	}
	return 0
}

func (x *DbMailBoxData) GetToWhoID() string {
	if x != nil {
		return x.ToWhoID
	}
	return ""
}

func (x *DbMailBoxData) GetFromWhoID() string {
	if x != nil {
		return x.FromWhoID
	}
	return ""
}

func (x *DbMailBoxData) GetAvatar() int32 {
	if x != nil {
		return x.Avatar
	}
	return 0
}

func (x *DbMailBoxData) GetFromWhoName() string {
	if x != nil {
		return x.FromWhoName
	}
	return ""
}

func (x *DbMailBoxData) GetItemID() int32 {
	if x != nil {
		return x.ItemID
	}
	return 0
}

func (x *DbMailBoxData) GetItemNumber() string {
	if x != nil {
		return x.ItemNumber
	}
	return ""
}

func (x *DbMailBoxData) GetInformation() string {
	if x != nil {
		return x.Information
	}
	return ""
}

func (x *DbMailBoxData) GetMailTime() string {
	if x != nil {
		return x.MailTime
	}
	return ""
}

func (x *DbMailBoxData) GetDeadline() string {
	if x != nil {
		return x.Deadline
	}
	return ""
}

func (x *DbMailBoxData) GetReceiveTime() string {
	if x != nil {
		return x.ReceiveTime
	}
	return ""
}

func (x *DbMailBoxData) GetMailType() int32 {
	if x != nil {
		return x.MailType
	}
	return 0
}

type DbSystemMailInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          int32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	FromWhoID   string `protobuf:"bytes,2,opt,name=FromWhoID,proto3" json:"FromWhoID,omitempty"`     // 信件發信人 例如
	Avatar      int32  `protobuf:"varint,3,opt,name=Avatar,proto3" json:"Avatar,omitempty"`          // 信件頭像 預設 0
	FromWhoName string `protobuf:"bytes,4,opt,name=FromWhoName,proto3" json:"FromWhoName,omitempty"` // 信件的標題欄位
	ItemID      int32  `protobuf:"varint,5,opt,name=ItemID,proto3" json:"ItemID,omitempty"`          // 金幣 1
	ItemNumber  string `protobuf:"bytes,6,opt,name=ItemNumber,proto3" json:"ItemNumber,omitempty"`   // 數量
	Information string `protobuf:"bytes,7,opt,name=Information,proto3" json:"Information,omitempty"` // 內文
	CreateDate  string `protobuf:"bytes,8,opt,name=CreateDate,proto3" json:"CreateDate,omitempty"`   // 設定時間(DB 生成)
	LimitDays   int32  `protobuf:"varint,9,opt,name=LimitDays,proto3" json:"LimitDays,omitempty"`    // 領取期限
	StartDate   string `protobuf:"bytes,10,opt,name=StartDate,proto3" json:"StartDate,omitempty"`    // 生效時間 - 開始
	EndDate     string `protobuf:"bytes,11,opt,name=EndDate,proto3" json:"EndDate,omitempty"`        // 生效時間 - 結束
}

func (x *DbSystemMailInput) Reset() {
	*x = DbSystemMailInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbSystemMailInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbSystemMailInput) ProtoMessage() {}

func (x *DbSystemMailInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbSystemMailInput.ProtoReflect.Descriptor instead.
func (*DbSystemMailInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{64}
}

func (x *DbSystemMailInput) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *DbSystemMailInput) GetFromWhoID() string {
	if x != nil {
		return x.FromWhoID
	}
	return ""
}

func (x *DbSystemMailInput) GetAvatar() int32 {
	if x != nil {
		return x.Avatar
	}
	return 0
}

func (x *DbSystemMailInput) GetFromWhoName() string {
	if x != nil {
		return x.FromWhoName
	}
	return ""
}

func (x *DbSystemMailInput) GetItemID() int32 {
	if x != nil {
		return x.ItemID
	}
	return 0
}

func (x *DbSystemMailInput) GetItemNumber() string {
	if x != nil {
		return x.ItemNumber
	}
	return ""
}

func (x *DbSystemMailInput) GetInformation() string {
	if x != nil {
		return x.Information
	}
	return ""
}

func (x *DbSystemMailInput) GetCreateDate() string {
	if x != nil {
		return x.CreateDate
	}
	return ""
}

func (x *DbSystemMailInput) GetLimitDays() int32 {
	if x != nil {
		return x.LimitDays
	}
	return 0
}

func (x *DbSystemMailInput) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *DbSystemMailInput) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type DbCheaterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	WinCount   int32  `protobuf:"varint,3,opt,name=WinCount,proto3" json:"WinCount,omitempty"`
	WinLv      int32  `protobuf:"varint,4,opt,name=WinLv,proto3" json:"WinLv,omitempty"`         // 權重 0~999
	LimitGain  int32  `protobuf:"varint,5,opt,name=LimitGain,proto3" json:"LimitGain,omitempty"` // 贏錢上限(如果超過這上限 則不會發動)
	EOpCode    int32  `protobuf:"varint,6,opt,name=EOpCode,proto3" json:"EOpCode,omitempty"`
	RoundID    string `protobuf:"bytes,7,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	ActiveDate string `protobuf:"bytes,8,opt,name=ActiveDate,proto3" json:"ActiveDate,omitempty"`
	Gain       int32  `protobuf:"varint,9,opt,name=Gain,proto3" json:"Gain,omitempty"` // 因為這個作牌放了多少金幣給玩家
}

func (x *DbCheaterInfo) Reset() {
	*x = DbCheaterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbCheaterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbCheaterInfo) ProtoMessage() {}

func (x *DbCheaterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbCheaterInfo.ProtoReflect.Descriptor instead.
func (*DbCheaterInfo) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{65}
}

func (x *DbCheaterInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DbCheaterInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DbCheaterInfo) GetWinCount() int32 {
	if x != nil {
		return x.WinCount
	}
	return 0
}

func (x *DbCheaterInfo) GetWinLv() int32 {
	if x != nil {
		return x.WinLv
	}
	return 0
}

func (x *DbCheaterInfo) GetLimitGain() int32 {
	if x != nil {
		return x.LimitGain
	}
	return 0
}

func (x *DbCheaterInfo) GetEOpCode() int32 {
	if x != nil {
		return x.EOpCode
	}
	return 0
}

func (x *DbCheaterInfo) GetRoundID() string {
	if x != nil {
		return x.RoundID
	}
	return ""
}

func (x *DbCheaterInfo) GetActiveDate() string {
	if x != nil {
		return x.ActiveDate
	}
	return ""
}

func (x *DbCheaterInfo) GetGain() int32 {
	if x != nil {
		return x.Gain
	}
	return 0
}

type DbCheaterInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool           `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Cheat   *DbCheaterInfo `protobuf:"bytes,3,opt,name=Cheat,proto3" json:"Cheat,omitempty"`
}

func (x *DbCheaterInfoReply) Reset() {
	*x = DbCheaterInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbCheaterInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbCheaterInfoReply) ProtoMessage() {}

func (x *DbCheaterInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbCheaterInfoReply.ProtoReflect.Descriptor instead.
func (*DbCheaterInfoReply) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{66}
}

func (x *DbCheaterInfoReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DbCheaterInfoReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DbCheaterInfoReply) GetCheat() *DbCheaterInfo {
	if x != nil {
		return x.Cheat
	}
	return nil
}

type DbSystemCheatInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundID        string `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`               // 遊戲局號
	Type           int32  `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`                    // 作弊類型 1=玩家必勝， 2 =系統必勝
	EOpCode        int32  `protobuf:"varint,3,opt,name=EOpCode,proto3" json:"EOpCode,omitempty"`              // 遊戲編號
	StockGroupID   int32  `protobuf:"varint,4,opt,name=StockGroupID,proto3" json:"StockGroupID,omitempty"`    // 庫存群組編號
	AddStockBefore string `protobuf:"bytes,5,opt,name=AddStockBefore,proto3" json:"AddStockBefore,omitempty"` // 調整前庫存異動(沒有作弊時的輸贏)
	AddStockAfter  string `protobuf:"bytes,6,opt,name=AddStockAfter,proto3" json:"AddStockAfter,omitempty"`   // 調整後庫存異動(作弊後的輸贏)
	Stock          string `protobuf:"bytes,7,opt,name=Stock,proto3" json:"Stock,omitempty"`                   // 異動後當前庫存
	StockGroup     string `protobuf:"bytes,8,opt,name=StockGroup,proto3" json:"StockGroup,omitempty"`         // 異動後當前群組合計庫存
	CheatRate      int32  `protobuf:"varint,9,opt,name=CheatRate,proto3" json:"CheatRate,omitempty"`          // 當前觸發作弊的機率
	RoundResult    string `protobuf:"bytes,10,opt,name=RoundResult,proto3" json:"RoundResult,omitempty"`      // 描述作弊內容
}

func (x *DbSystemCheatInput) Reset() {
	*x = DbSystemCheatInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbSystemCheatInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbSystemCheatInput) ProtoMessage() {}

func (x *DbSystemCheatInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbSystemCheatInput.ProtoReflect.Descriptor instead.
func (*DbSystemCheatInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{67}
}

func (x *DbSystemCheatInput) GetRoundID() string {
	if x != nil {
		return x.RoundID
	}
	return ""
}

func (x *DbSystemCheatInput) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DbSystemCheatInput) GetEOpCode() int32 {
	if x != nil {
		return x.EOpCode
	}
	return 0
}

func (x *DbSystemCheatInput) GetStockGroupID() int32 {
	if x != nil {
		return x.StockGroupID
	}
	return 0
}

func (x *DbSystemCheatInput) GetAddStockBefore() string {
	if x != nil {
		return x.AddStockBefore
	}
	return ""
}

func (x *DbSystemCheatInput) GetAddStockAfter() string {
	if x != nil {
		return x.AddStockAfter
	}
	return ""
}

func (x *DbSystemCheatInput) GetStock() string {
	if x != nil {
		return x.Stock
	}
	return ""
}

func (x *DbSystemCheatInput) GetStockGroup() string {
	if x != nil {
		return x.StockGroup
	}
	return ""
}

func (x *DbSystemCheatInput) GetCheatRate() int32 {
	if x != nil {
		return x.CheatRate
	}
	return 0
}

func (x *DbSystemCheatInput) GetRoundResult() string {
	if x != nil {
		return x.RoundResult
	}
	return ""
}

// 每周排行榜
type DbLeaderboardReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                 `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	List    []*DbLeaderboardData `protobuf:"bytes,3,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *DbLeaderboardReply) Reset() {
	*x = DbLeaderboardReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbLeaderboardReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbLeaderboardReply) ProtoMessage() {}

func (x *DbLeaderboardReply) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbLeaderboardReply.ProtoReflect.Descriptor instead.
func (*DbLeaderboardReply) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{68}
}

func (x *DbLeaderboardReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DbLeaderboardReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DbLeaderboardReply) GetList() []*DbLeaderboardData {
	if x != nil {
		return x.List
	}
	return nil
}

type DbLeaderboardData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Avatar int32  `protobuf:"varint,2,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	WinSum string `protobuf:"bytes,4,opt,name=WinSum,proto3" json:"WinSum,omitempty"` // 總計贏錢
}

func (x *DbLeaderboardData) Reset() {
	*x = DbLeaderboardData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbLeaderboardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbLeaderboardData) ProtoMessage() {}

func (x *DbLeaderboardData) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbLeaderboardData.ProtoReflect.Descriptor instead.
func (*DbLeaderboardData) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{69}
}

func (x *DbLeaderboardData) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DbLeaderboardData) GetAvatar() int32 {
	if x != nil {
		return x.Avatar
	}
	return 0
}

func (x *DbLeaderboardData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DbLeaderboardData) GetWinSum() string {
	if x != nil {
		return x.WinSum
	}
	return ""
}

type DbBankCardInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	CardNo     string `protobuf:"bytes,3,opt,name=CardNo,proto3" json:"CardNo,omitempty"`
	Bank       string `protobuf:"bytes,4,opt,name=Bank,proto3" json:"Bank,omitempty"`
	BankBranch string `protobuf:"bytes,5,opt,name=BankBranch,proto3" json:"BankBranch,omitempty"`
	Province   string `protobuf:"bytes,6,opt,name=Province,proto3" json:"Province,omitempty"`
	City       string `protobuf:"bytes,7,opt,name=City,proto3" json:"City,omitempty"`
}

func (x *DbBankCardInput) Reset() {
	*x = DbBankCardInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbBankCardInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbBankCardInput) ProtoMessage() {}

func (x *DbBankCardInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbBankCardInput.ProtoReflect.Descriptor instead.
func (*DbBankCardInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{70}
}

func (x *DbBankCardInput) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DbBankCardInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DbBankCardInput) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *DbBankCardInput) GetBank() string {
	if x != nil {
		return x.Bank
	}
	return ""
}

func (x *DbBankCardInput) GetBankBranch() string {
	if x != nil {
		return x.BankBranch
	}
	return ""
}

func (x *DbBankCardInput) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *DbBankCardInput) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

type PromoteData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId string `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	Ip       string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *PromoteData) Reset() {
	*x = PromoteData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoteData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteData) ProtoMessage() {}

func (x *PromoteData) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteData.ProtoReflect.Descriptor instead.
func (*PromoteData) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{71}
}

func (x *PromoteData) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *PromoteData) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

// 推廣返回資料
type PromoteInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success       bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Commission    string `protobuf:"bytes,3,opt,name=Commission,proto3" json:"Commission,omitempty"` // 回饋獎金
	SuperiorID    string `protobuf:"bytes,4,opt,name=SuperiorID,proto3" json:"SuperiorID,omitempty"`
	MyID          string `protobuf:"bytes,5,opt,name=MyID,proto3" json:"MyID,omitempty"`
	TeamSize      int32  `protobuf:"varint,6,opt,name=TeamSize,proto3" json:"TeamSize,omitempty"`
	DirectPlayers int32  `protobuf:"varint,7,opt,name=DirectPlayers,proto3" json:"DirectPlayers,omitempty"`
	TodayAdded    int32  `protobuf:"varint,8,opt,name=TodayAdded,proto3" json:"TodayAdded,omitempty"`
	TodayLive     int32  `protobuf:"varint,9,opt,name=TodayLive,proto3" json:"TodayLive,omitempty"`
	QRCodeURL     string `protobuf:"bytes,10,opt,name=QRCodeURL,proto3" json:"QRCodeURL,omitempty"`
	PromoteUrl    string `protobuf:"bytes,11,opt,name=PromoteUrl,proto3" json:"PromoteUrl,omitempty"`
}

func (x *PromoteInfoReply) Reset() {
	*x = PromoteInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoteInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteInfoReply) ProtoMessage() {}

func (x *PromoteInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteInfoReply.ProtoReflect.Descriptor instead.
func (*PromoteInfoReply) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{72}
}

func (x *PromoteInfoReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PromoteInfoReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PromoteInfoReply) GetCommission() string {
	if x != nil {
		return x.Commission
	}
	return ""
}

func (x *PromoteInfoReply) GetSuperiorID() string {
	if x != nil {
		return x.SuperiorID
	}
	return ""
}

func (x *PromoteInfoReply) GetMyID() string {
	if x != nil {
		return x.MyID
	}
	return ""
}

func (x *PromoteInfoReply) GetTeamSize() int32 {
	if x != nil {
		return x.TeamSize
	}
	return 0
}

func (x *PromoteInfoReply) GetDirectPlayers() int32 {
	if x != nil {
		return x.DirectPlayers
	}
	return 0
}

func (x *PromoteInfoReply) GetTodayAdded() int32 {
	if x != nil {
		return x.TodayAdded
	}
	return 0
}

func (x *PromoteInfoReply) GetTodayLive() int32 {
	if x != nil {
		return x.TodayLive
	}
	return 0
}

func (x *PromoteInfoReply) GetQRCodeURL() string {
	if x != nil {
		return x.QRCodeURL
	}
	return ""
}

func (x *PromoteInfoReply) GetPromoteUrl() string {
	if x != nil {
		return x.PromoteUrl
	}
	return ""
}

// 我的下線 資料
type PromoteMyPlayerInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                       `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string                     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	List    []*PromoteMyPlayerInfoData `protobuf:"bytes,3,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *PromoteMyPlayerInfoReply) Reset() {
	*x = PromoteMyPlayerInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoteMyPlayerInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteMyPlayerInfoReply) ProtoMessage() {}

func (x *PromoteMyPlayerInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteMyPlayerInfoReply.ProtoReflect.Descriptor instead.
func (*PromoteMyPlayerInfoReply) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{73}
}

func (x *PromoteMyPlayerInfoReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PromoteMyPlayerInfoReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PromoteMyPlayerInfoReply) GetList() []*PromoteMyPlayerInfoData {
	if x != nil {
		return x.List
	}
	return nil
}

// 我的下線 資料
type PromoteMyPlayerInfoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`                              // 玩家ID
	Name             string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`                          // 玩家名稱
	TeamGoldWeek     int32  `protobuf:"varint,3,opt,name=TeamGoldWeek,proto3" json:"TeamGoldWeek,omitempty"`         // 本周團隊貢獻
	PersonalGoldWeek int32  `protobuf:"varint,4,opt,name=PersonalGoldWeek,proto3" json:"PersonalGoldWeek,omitempty"` // 本周玩家貢獻
	TeamSize         int32  `protobuf:"varint,5,opt,name=TeamSize,proto3" json:"TeamSize,omitempty"`                 // 團隊人數
	UpID             string `protobuf:"bytes,6,opt,name=UpID,proto3" json:"UpID,omitempty"`                          // 直屬玩家
	Operate          string `protobuf:"bytes,7,opt,name=Operate,proto3" json:"Operate,omitempty"`                    // 操作
}

func (x *PromoteMyPlayerInfoData) Reset() {
	*x = PromoteMyPlayerInfoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoteMyPlayerInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteMyPlayerInfoData) ProtoMessage() {}

func (x *PromoteMyPlayerInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteMyPlayerInfoData.ProtoReflect.Descriptor instead.
func (*PromoteMyPlayerInfoData) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{74}
}

func (x *PromoteMyPlayerInfoData) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PromoteMyPlayerInfoData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PromoteMyPlayerInfoData) GetTeamGoldWeek() int32 {
	if x != nil {
		return x.TeamGoldWeek
	}
	return 0
}

func (x *PromoteMyPlayerInfoData) GetPersonalGoldWeek() int32 {
	if x != nil {
		return x.PersonalGoldWeek
	}
	return 0
}

func (x *PromoteMyPlayerInfoData) GetTeamSize() int32 {
	if x != nil {
		return x.TeamSize
	}
	return 0
}

func (x *PromoteMyPlayerInfoData) GetUpID() string {
	if x != nil {
		return x.UpID
	}
	return ""
}

func (x *PromoteMyPlayerInfoData) GetOperate() string {
	if x != nil {
		return x.Operate
	}
	return ""
}

// 我的業績
type PromoteMyPerformanceInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                            `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string                          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	List    []*PromoteMyPerformanceInfoData `protobuf:"bytes,3,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *PromoteMyPerformanceInfoReply) Reset() {
	*x = PromoteMyPerformanceInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoteMyPerformanceInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteMyPerformanceInfoReply) ProtoMessage() {}

func (x *PromoteMyPerformanceInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteMyPerformanceInfoReply.ProtoReflect.Descriptor instead.
func (*PromoteMyPerformanceInfoReply) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{75}
}

func (x *PromoteMyPerformanceInfoReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PromoteMyPerformanceInfoReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PromoteMyPerformanceInfoReply) GetList() []*PromoteMyPerformanceInfoData {
	if x != nil {
		return x.List
	}
	return nil
}

// 我的業績 資料
type PromoteMyPerformanceInfoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                 string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"` // 玩家ID
	SettleDate         string `protobuf:"bytes,2,opt,name=SettleDate,proto3" json:"SettleDate,omitempty"`
	TeamGold           int32  `protobuf:"varint,3,opt,name=TeamGold,proto3" json:"TeamGold,omitempty"`                    // 團隊業績
	MyGold             int32  `protobuf:"varint,4,opt,name=MyGold,proto3" json:"MyGold,omitempty"`                        // 個人業績
	TotalCommission    string `protobuf:"bytes,5,opt,name=TotalCommission,proto3" json:"TotalCommission,omitempty"`       // 總回饋
	TeamCommission     string `protobuf:"bytes,6,opt,name=TeamCommission,proto3" json:"TeamCommission,omitempty"`         // 團隊回饋
	MyCommission       string `protobuf:"bytes,7,opt,name=MyCommission,proto3" json:"MyCommission,omitempty"`             // 總回饋
	ReceiveDate        string `protobuf:"bytes,8,opt,name=ReceiveDate,proto3" json:"ReceiveDate,omitempty"`               // 領取日期
	PersonalCommission string `protobuf:"bytes,9,opt,name=PersonalCommission,proto3" json:"PersonalCommission,omitempty"` // 個人回饋
}

func (x *PromoteMyPerformanceInfoData) Reset() {
	*x = PromoteMyPerformanceInfoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoteMyPerformanceInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteMyPerformanceInfoData) ProtoMessage() {}

func (x *PromoteMyPerformanceInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteMyPerformanceInfoData.ProtoReflect.Descriptor instead.
func (*PromoteMyPerformanceInfoData) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{76}
}

func (x *PromoteMyPerformanceInfoData) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PromoteMyPerformanceInfoData) GetSettleDate() string {
	if x != nil {
		return x.SettleDate
	}
	return ""
}

func (x *PromoteMyPerformanceInfoData) GetTeamGold() int32 {
	if x != nil {
		return x.TeamGold
	}
	return 0
}

func (x *PromoteMyPerformanceInfoData) GetMyGold() int32 {
	if x != nil {
		return x.MyGold
	}
	return 0
}

func (x *PromoteMyPerformanceInfoData) GetTotalCommission() string {
	if x != nil {
		return x.TotalCommission
	}
	return ""
}

func (x *PromoteMyPerformanceInfoData) GetTeamCommission() string {
	if x != nil {
		return x.TeamCommission
	}
	return ""
}

func (x *PromoteMyPerformanceInfoData) GetMyCommission() string {
	if x != nil {
		return x.MyCommission
	}
	return ""
}

func (x *PromoteMyPerformanceInfoData) GetReceiveDate() string {
	if x != nil {
		return x.ReceiveDate
	}
	return ""
}

func (x *PromoteMyPerformanceInfoData) GetPersonalCommission() string {
	if x != nil {
		return x.PersonalCommission
	}
	return ""
}

// 傭金領取 資料
type DbTakeCommissionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"` // 玩家ID
	SettleDate string `protobuf:"bytes,2,opt,name=SettleDate,proto3" json:"SettleDate,omitempty"`
}

func (x *DbTakeCommissionInput) Reset() {
	*x = DbTakeCommissionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbTakeCommissionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbTakeCommissionInput) ProtoMessage() {}

func (x *DbTakeCommissionInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbTakeCommissionInput.ProtoReflect.Descriptor instead.
func (*DbTakeCommissionInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{77}
}

func (x *DbTakeCommissionInput) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DbTakeCommissionInput) GetSettleDate() string {
	if x != nil {
		return x.SettleDate
	}
	return ""
}

// 每日簽到 資料
type DbSignInInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"` // 玩家ID
	DoSignIn bool   `protobuf:"varint,2,opt,name=DoSignIn,proto3" json:"DoSignIn,omitempty"`
}

func (x *DbSignInInput) Reset() {
	*x = DbSignInInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbSignInInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbSignInInput) ProtoMessage() {}

func (x *DbSignInInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbSignInInput.ProtoReflect.Descriptor instead.
func (*DbSignInInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{78}
}

func (x *DbSignInInput) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DbSignInInput) GetDoSignIn() bool {
	if x != nil {
		return x.DoSignIn
	}
	return false
}

// 每日簽到 資料
type DbSignInReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success       bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	AlreadySignIn bool   `protobuf:"varint,3,opt,name=AlreadySignIn,proto3" json:"AlreadySignIn,omitempty"`
	SignInReward  string `protobuf:"bytes,4,opt,name=SignInReward,proto3" json:"SignInReward,omitempty"` // 簽到獎勵金
	DoSignIn      bool   `protobuf:"varint,5,opt,name=DoSignIn,proto3" json:"DoSignIn,omitempty"`
}

func (x *DbSignInReply) Reset() {
	*x = DbSignInReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbSignInReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbSignInReply) ProtoMessage() {}

func (x *DbSignInReply) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbSignInReply.ProtoReflect.Descriptor instead.
func (*DbSignInReply) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{79}
}

func (x *DbSignInReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DbSignInReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DbSignInReply) GetAlreadySignIn() bool {
	if x != nil {
		return x.AlreadySignIn
	}
	return false
}

func (x *DbSignInReply) GetSignInReward() string {
	if x != nil {
		return x.SignInReward
	}
	return ""
}

func (x *DbSignInReply) GetDoSignIn() bool {
	if x != nil {
		return x.DoSignIn
	}
	return false
}

/// 手機帳號註冊
type CreateAccountByPhoneInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpID         string `protobuf:"bytes,1,opt,name=UpID,proto3" json:"UpID,omitempty"`
	PhoneID      string `protobuf:"bytes,2,opt,name=PhoneID,proto3" json:"PhoneID,omitempty"`
	PW           string `protobuf:"bytes,3,opt,name=PW,proto3" json:"PW,omitempty"`
	IP           string `protobuf:"bytes,4,opt,name=IP,proto3" json:"IP,omitempty"`
	UserDeviceID string `protobuf:"bytes,5,opt,name=UserDeviceID,proto3" json:"UserDeviceID,omitempty"`
}

func (x *CreateAccountByPhoneInput) Reset() {
	*x = CreateAccountByPhoneInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountByPhoneInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountByPhoneInput) ProtoMessage() {}

func (x *CreateAccountByPhoneInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountByPhoneInput.ProtoReflect.Descriptor instead.
func (*CreateAccountByPhoneInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{80}
}

func (x *CreateAccountByPhoneInput) GetUpID() string {
	if x != nil {
		return x.UpID
	}
	return ""
}

func (x *CreateAccountByPhoneInput) GetPhoneID() string {
	if x != nil {
		return x.PhoneID
	}
	return ""
}

func (x *CreateAccountByPhoneInput) GetPW() string {
	if x != nil {
		return x.PW
	}
	return ""
}

func (x *CreateAccountByPhoneInput) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *CreateAccountByPhoneInput) GetUserDeviceID() string {
	if x != nil {
		return x.UserDeviceID
	}
	return ""
}

/// 手機登入
type LoginbyPhoneIDPWInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneID      string `protobuf:"bytes,1,opt,name=PhoneID,proto3" json:"PhoneID,omitempty"`
	PW           string `protobuf:"bytes,2,opt,name=PW,proto3" json:"PW,omitempty"`
	IP           string `protobuf:"bytes,3,opt,name=IP,proto3" json:"IP,omitempty"`
	UserDeviceID string `protobuf:"bytes,4,opt,name=UserDeviceID,proto3" json:"UserDeviceID,omitempty"`
}

func (x *LoginbyPhoneIDPWInput) Reset() {
	*x = LoginbyPhoneIDPWInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginbyPhoneIDPWInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginbyPhoneIDPWInput) ProtoMessage() {}

func (x *LoginbyPhoneIDPWInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginbyPhoneIDPWInput.ProtoReflect.Descriptor instead.
func (*LoginbyPhoneIDPWInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{81}
}

func (x *LoginbyPhoneIDPWInput) GetPhoneID() string {
	if x != nil {
		return x.PhoneID
	}
	return ""
}

func (x *LoginbyPhoneIDPWInput) GetPW() string {
	if x != nil {
		return x.PW
	}
	return ""
}

func (x *LoginbyPhoneIDPWInput) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *LoginbyPhoneIDPWInput) GetUserDeviceID() string {
	if x != nil {
		return x.UserDeviceID
	}
	return ""
}

/// 手機帳號的密碼重置
type DBPhoneChangePasswordInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneID string `protobuf:"bytes,1,opt,name=PhoneID,proto3" json:"PhoneID,omitempty"`
	PW      string `protobuf:"bytes,2,opt,name=PW,proto3" json:"PW,omitempty"`
	IP      string `protobuf:"bytes,3,opt,name=IP,proto3" json:"IP,omitempty"`
}

func (x *DBPhoneChangePasswordInput) Reset() {
	*x = DBPhoneChangePasswordInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBPhoneChangePasswordInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBPhoneChangePasswordInput) ProtoMessage() {}

func (x *DBPhoneChangePasswordInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBPhoneChangePasswordInput.ProtoReflect.Descriptor instead.
func (*DBPhoneChangePasswordInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{82}
}

func (x *DBPhoneChangePasswordInput) GetPhoneID() string {
	if x != nil {
		return x.PhoneID
	}
	return ""
}

func (x *DBPhoneChangePasswordInput) GetPW() string {
	if x != nil {
		return x.PW
	}
	return ""
}

func (x *DBPhoneChangePasswordInput) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

/// 贈送 - 金幣
type DbSendGiftInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromID string `protobuf:"bytes,1,opt,name=FromID,proto3" json:"FromID,omitempty"`
	ToID   string `protobuf:"bytes,2,opt,name=ToID,proto3" json:"ToID,omitempty"`
	Gold   int32  `protobuf:"varint,3,opt,name=Gold,proto3" json:"Gold,omitempty"`
}

func (x *DbSendGiftInput) Reset() {
	*x = DbSendGiftInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbSendGiftInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbSendGiftInput) ProtoMessage() {}

func (x *DbSendGiftInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbSendGiftInput.ProtoReflect.Descriptor instead.
func (*DbSendGiftInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{83}
}

func (x *DbSendGiftInput) GetFromID() string {
	if x != nil {
		return x.FromID
	}
	return ""
}

func (x *DbSendGiftInput) GetToID() string {
	if x != nil {
		return x.ToID
	}
	return ""
}

func (x *DbSendGiftInput) GetGold() int32 {
	if x != nil {
		return x.Gold
	}
	return 0
}

// 贈送紀錄
type DBSendGiftRecordReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	List    []*DBSendGiftRecord `protobuf:"bytes,3,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *DBSendGiftRecordReply) Reset() {
	*x = DBSendGiftRecordReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBSendGiftRecordReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBSendGiftRecordReply) ProtoMessage() {}

func (x *DBSendGiftRecordReply) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBSendGiftRecordReply.ProtoReflect.Descriptor instead.
func (*DBSendGiftRecordReply) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{84}
}

func (x *DBSendGiftRecordReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DBSendGiftRecordReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DBSendGiftRecordReply) GetList() []*DBSendGiftRecord {
	if x != nil {
		return x.List
	}
	return nil
}

// 贈送紀錄 結構
type DBSendGiftRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AvatarIndex int32  `protobuf:"varint,2,opt,name=AvatarIndex,proto3" json:"AvatarIndex,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Date        string `protobuf:"bytes,4,opt,name=Date,proto3" json:"Date,omitempty"`
	Income      int32  `protobuf:"varint,5,opt,name=Income,proto3" json:"Income,omitempty"`
	Expenditure int32  `protobuf:"varint,6,opt,name=Expenditure,proto3" json:"Expenditure,omitempty"`
}

func (x *DBSendGiftRecord) Reset() {
	*x = DBSendGiftRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBSendGiftRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBSendGiftRecord) ProtoMessage() {}

func (x *DBSendGiftRecord) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBSendGiftRecord.ProtoReflect.Descriptor instead.
func (*DBSendGiftRecord) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{85}
}

func (x *DBSendGiftRecord) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DBSendGiftRecord) GetAvatarIndex() int32 {
	if x != nil {
		return x.AvatarIndex
	}
	return 0
}

func (x *DBSendGiftRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DBSendGiftRecord) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *DBSendGiftRecord) GetIncome() int32 {
	if x != nil {
		return x.Income
	}
	return 0
}

func (x *DBSendGiftRecord) GetExpenditure() int32 {
	if x != nil {
		return x.Expenditure
	}
	return 0
}

/// IAP 商品資料
type DbIAPItemReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool         `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	List    []*DbIAPItem `protobuf:"bytes,3,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *DbIAPItemReply) Reset() {
	*x = DbIAPItemReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbIAPItemReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbIAPItemReply) ProtoMessage() {}

func (x *DbIAPItemReply) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbIAPItemReply.ProtoReflect.Descriptor instead.
func (*DbIAPItemReply) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{86}
}

func (x *DbIAPItemReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DbIAPItemReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DbIAPItemReply) GetList() []*DbIAPItem {
	if x != nil {
		return x.List
	}
	return nil
}

/// IAP 商品資料
type DbIAPItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform  string `protobuf:"bytes,1,opt,name=Platform,proto3" json:"Platform,omitempty"`
	ProductID string `protobuf:"bytes,2,opt,name=ProductID,proto3" json:"ProductID,omitempty"`
	ItemTag   int32  `protobuf:"varint,3,opt,name=ItemTag,proto3" json:"ItemTag,omitempty"`   // 商品標籤 0=none,1=熱門
	ItemType  int32  `protobuf:"varint,4,opt,name=ItemType,proto3" json:"ItemType,omitempty"` // 道具類型 1=金幣
	ItemName  string `protobuf:"bytes,5,opt,name=ItemName,proto3" json:"ItemName,omitempty"`
	Price     int32  `protobuf:"varint,6,opt,name=Price,proto3" json:"Price,omitempty"`      // 消費金額(台幣)
	AddValue  string `protobuf:"bytes,7,opt,name=AddValue,proto3" json:"AddValue,omitempty"` // 獲得資源數
	AddPlus   string `protobuf:"bytes,8,opt,name=AddPlus,proto3" json:"AddPlus,omitempty"`   // 獲得額外資源數
	Status    int32  `protobuf:"varint,9,opt,name=Status,proto3" json:"Status,omitempty"`
	Desc      string `protobuf:"bytes,10,opt,name=Desc,proto3" json:"Desc,omitempty"`
	Icon      string `protobuf:"bytes,11,opt,name=Icon,proto3" json:"Icon,omitempty"`
}

func (x *DbIAPItem) Reset() {
	*x = DbIAPItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbIAPItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbIAPItem) ProtoMessage() {}

func (x *DbIAPItem) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbIAPItem.ProtoReflect.Descriptor instead.
func (*DbIAPItem) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{87}
}

func (x *DbIAPItem) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *DbIAPItem) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DbIAPItem) GetItemTag() int32 {
	if x != nil {
		return x.ItemTag
	}
	return 0
}

func (x *DbIAPItem) GetItemType() int32 {
	if x != nil {
		return x.ItemType
	}
	return 0
}

func (x *DbIAPItem) GetItemName() string {
	if x != nil {
		return x.ItemName
	}
	return ""
}

func (x *DbIAPItem) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *DbIAPItem) GetAddValue() string {
	if x != nil {
		return x.AddValue
	}
	return ""
}

func (x *DbIAPItem) GetAddPlus() string {
	if x != nil {
		return x.AddPlus
	}
	return ""
}

func (x *DbIAPItem) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DbIAPItem) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *DbIAPItem) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

/// 商城購買  Platform=apple,goole
type DbIAPBuyInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Platform  string `protobuf:"bytes,2,opt,name=Platform,proto3" json:"Platform,omitempty"`
	ProductID string `protobuf:"bytes,3,opt,name=ProductID,proto3" json:"ProductID,omitempty"`
	Quantity  int32  `protobuf:"varint,4,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
}

func (x *DbIAPBuyInput) Reset() {
	*x = DbIAPBuyInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbIAPBuyInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbIAPBuyInput) ProtoMessage() {}

func (x *DbIAPBuyInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbIAPBuyInput.ProtoReflect.Descriptor instead.
func (*DbIAPBuyInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{88}
}

func (x *DbIAPBuyInput) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DbIAPBuyInput) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *DbIAPBuyInput) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DbIAPBuyInput) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

/// 商城購買結果  No => DbIAPBuy回傳的編號
type DbIAPBuyResultInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	No        int32  `protobuf:"varint,1,opt,name=No,proto3" json:"No,omitempty"`              // 我們自己的訂單編號
	ID        string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`               // 玩家身分證
	Platform  string `protobuf:"bytes,3,opt,name=Platform,proto3" json:"Platform,omitempty"`   // 平台
	ProductID string `protobuf:"bytes,4,opt,name=ProductID,proto3" json:"ProductID,omitempty"` // 產品編號
	Quantity  int32  `protobuf:"varint,5,opt,name=Quantity,proto3" json:"Quantity,omitempty"`  // 數量
	OrderID   string `protobuf:"bytes,6,opt,name=OrderID,proto3" json:"OrderID,omitempty"`     // 廠商訂單編號
	Status    int32  `protobuf:"varint,7,opt,name=Status,proto3" json:"Status,omitempty"`      // 狀態 (0尚未回報 1成功 2失敗)
	Content   string `protobuf:"bytes,8,opt,name=Content,proto3" json:"Content,omitempty"`     // 原生資料
	Receipt   string `protobuf:"bytes,9,opt,name=Receipt,proto3" json:"Receipt,omitempty"`     // 發票
}

func (x *DbIAPBuyResultInput) Reset() {
	*x = DbIAPBuyResultInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbIAPBuyResultInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbIAPBuyResultInput) ProtoMessage() {}

func (x *DbIAPBuyResultInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbIAPBuyResultInput.ProtoReflect.Descriptor instead.
func (*DbIAPBuyResultInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{89}
}

func (x *DbIAPBuyResultInput) GetNo() int32 {
	if x != nil {
		return x.No
	}
	return 0
}

func (x *DbIAPBuyResultInput) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DbIAPBuyResultInput) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *DbIAPBuyResultInput) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DbIAPBuyResultInput) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *DbIAPBuyResultInput) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *DbIAPBuyResultInput) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DbIAPBuyResultInput) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *DbIAPBuyResultInput) GetReceipt() string {
	if x != nil {
		return x.Receipt
	}
	return ""
}

/// 商城購買大陸金流  Platform=apple,goole
type DbIAPBuyCNInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	No         string `protobuf:"bytes,1,opt,name=No,proto3" json:"No,omitempty"`
	ID         string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Platform   string `protobuf:"bytes,3,opt,name=Platform,proto3" json:"Platform,omitempty"`
	MemberID   string `protobuf:"bytes,4,opt,name=MemberID,proto3" json:"MemberID,omitempty"`
	Class      int32  `protobuf:"varint,5,opt,name=Class,proto3" json:"Class,omitempty"`
	Price      string `protobuf:"bytes,6,opt,name=Price,proto3" json:"Price,omitempty"`
	Gold       string `protobuf:"bytes,7,opt,name=Gold,proto3" json:"Gold,omitempty"`
	SendString string `protobuf:"bytes,8,opt,name=SendString,proto3" json:"SendString,omitempty"`
}

func (x *DbIAPBuyCNInput) Reset() {
	*x = DbIAPBuyCNInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbIAPBuyCNInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbIAPBuyCNInput) ProtoMessage() {}

func (x *DbIAPBuyCNInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbIAPBuyCNInput.ProtoReflect.Descriptor instead.
func (*DbIAPBuyCNInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{90}
}

func (x *DbIAPBuyCNInput) GetNo() string {
	if x != nil {
		return x.No
	}
	return ""
}

func (x *DbIAPBuyCNInput) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DbIAPBuyCNInput) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *DbIAPBuyCNInput) GetMemberID() string {
	if x != nil {
		return x.MemberID
	}
	return ""
}

func (x *DbIAPBuyCNInput) GetClass() int32 {
	if x != nil {
		return x.Class
	}
	return 0
}

func (x *DbIAPBuyCNInput) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *DbIAPBuyCNInput) GetGold() string {
	if x != nil {
		return x.Gold
	}
	return ""
}

func (x *DbIAPBuyCNInput) GetSendString() string {
	if x != nil {
		return x.SendString
	}
	return ""
}

/// 商城購買結果  No => DbIAPBuy回傳的編號
type DbIAPBuyResultCNInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	No         string `protobuf:"bytes,1,opt,name=No,proto3" json:"No,omitempty"`           // 我們自己的訂單編號
	OrderID    string `protobuf:"bytes,2,opt,name=OrderID,proto3" json:"OrderID,omitempty"` // 廠商訂單編號
	Amount     string `protobuf:"bytes,3,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Returncode string `protobuf:"bytes,4,opt,name=Returncode,proto3" json:"Returncode,omitempty"` // 00 success
}

func (x *DbIAPBuyResultCNInput) Reset() {
	*x = DbIAPBuyResultCNInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbIAPBuyResultCNInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbIAPBuyResultCNInput) ProtoMessage() {}

func (x *DbIAPBuyResultCNInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbIAPBuyResultCNInput.ProtoReflect.Descriptor instead.
func (*DbIAPBuyResultCNInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{91}
}

func (x *DbIAPBuyResultCNInput) GetNo() string {
	if x != nil {
		return x.No
	}
	return ""
}

func (x *DbIAPBuyResultCNInput) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *DbIAPBuyResultCNInput) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *DbIAPBuyResultCNInput) GetReturncode() string {
	if x != nil {
		return x.Returncode
	}
	return ""
}

/// 查詢 提現紀錄
type DbTakeMoneyRecordReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool               `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	List    []*DbTakeMoneyData `protobuf:"bytes,3,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *DbTakeMoneyRecordReply) Reset() {
	*x = DbTakeMoneyRecordReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbTakeMoneyRecordReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbTakeMoneyRecordReply) ProtoMessage() {}

func (x *DbTakeMoneyRecordReply) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbTakeMoneyRecordReply.ProtoReflect.Descriptor instead.
func (*DbTakeMoneyRecordReply) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{92}
}

func (x *DbTakeMoneyRecordReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DbTakeMoneyRecordReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DbTakeMoneyRecordReply) GetList() []*DbTakeMoneyData {
	if x != nil {
		return x.List
	}
	return nil
}

/// 查詢 遊戲 及 庫存  相關資訊
type DbGameStockReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool               `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	List    []*DbGameStockData `protobuf:"bytes,3,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *DbGameStockReply) Reset() {
	*x = DbGameStockReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbGameStockReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbGameStockReply) ProtoMessage() {}

func (x *DbGameStockReply) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbGameStockReply.ProtoReflect.Descriptor instead.
func (*DbGameStockReply) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{93}
}

func (x *DbGameStockReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DbGameStockReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DbGameStockReply) GetList() []*DbGameStockData {
	if x != nil {
		return x.List
	}
	return nil
}

/// 遊戲 及 庫存 相關資料
type DbGameStockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EOpCode      int32  `protobuf:"varint,1,opt,name=EOpCode,proto3" json:"EOpCode,omitempty"`            // 遊戲編號
	StockGold    string `protobuf:"bytes,2,opt,name=StockGold,proto3" json:"StockGold,omitempty"`         // 庫存水庫
	ProfitGold   string `protobuf:"bytes,3,opt,name=ProfitGold,proto3" json:"ProfitGold,omitempty"`       // 利潤水庫
	WaterGold    string `protobuf:"bytes,4,opt,name=WaterGold,proto3" json:"WaterGold,omitempty"`         // 水錢水庫
	GroupID      int32  `protobuf:"varint,5,opt,name=GroupID,proto3" json:"GroupID,omitempty"`            // 遊戲群組
	ProfitRate   string `protobuf:"bytes,6,opt,name=ProfitRate,proto3" json:"ProfitRate,omitempty"`       // 利潤率(殺率)
	WaterRate    string `protobuf:"bytes,7,opt,name=WaterRate,proto3" json:"WaterRate,omitempty"`         // 抽水率
	EOpName      string `protobuf:"bytes,8,opt,name=EOpName,proto3" json:"EOpName,omitempty"`             // 遊戲代碼
	AIAmount     int32  `protobuf:"varint,9,opt,name=AIAmount,proto3" json:"AIAmount,omitempty"`          // 每一桌的AI人數上限
	AIPlay       bool   `protobuf:"varint,10,opt,name=AIPlay,proto3" json:"AIPlay,omitempty"`             // 是否啟動AI
	CheatRate    int32  `protobuf:"varint,11,opt,name=CheatRate,proto3" json:"CheatRate,omitempty"`       // 低於水庫危險值後開始會作弊，作弊的啟動機率
	RecordAmount int32  `protobuf:"varint,12,opt,name=RecordAmount,proto3" json:"RecordAmount,omitempty"` // 遊戲紀錄保存上限
}

func (x *DbGameStockData) Reset() {
	*x = DbGameStockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbGameStockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbGameStockData) ProtoMessage() {}

func (x *DbGameStockData) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbGameStockData.ProtoReflect.Descriptor instead.
func (*DbGameStockData) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{94}
}

func (x *DbGameStockData) GetEOpCode() int32 {
	if x != nil {
		return x.EOpCode
	}
	return 0
}

func (x *DbGameStockData) GetStockGold() string {
	if x != nil {
		return x.StockGold
	}
	return ""
}

func (x *DbGameStockData) GetProfitGold() string {
	if x != nil {
		return x.ProfitGold
	}
	return ""
}

func (x *DbGameStockData) GetWaterGold() string {
	if x != nil {
		return x.WaterGold
	}
	return ""
}

func (x *DbGameStockData) GetGroupID() int32 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *DbGameStockData) GetProfitRate() string {
	if x != nil {
		return x.ProfitRate
	}
	return ""
}

func (x *DbGameStockData) GetWaterRate() string {
	if x != nil {
		return x.WaterRate
	}
	return ""
}

func (x *DbGameStockData) GetEOpName() string {
	if x != nil {
		return x.EOpName
	}
	return ""
}

func (x *DbGameStockData) GetAIAmount() int32 {
	if x != nil {
		return x.AIAmount
	}
	return 0
}

func (x *DbGameStockData) GetAIPlay() bool {
	if x != nil {
		return x.AIPlay
	}
	return false
}

func (x *DbGameStockData) GetCheatRate() int32 {
	if x != nil {
		return x.CheatRate
	}
	return 0
}

func (x *DbGameStockData) GetRecordAmount() int32 {
	if x != nil {
		return x.RecordAmount
	}
	return 0
}

type DbAIPlayInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EOpCode  int32 `protobuf:"varint,1,opt,name=EOpCode,proto3" json:"EOpCode,omitempty"`   // 遊戲編號
	AIAmount int32 `protobuf:"varint,9,opt,name=AIAmount,proto3" json:"AIAmount,omitempty"` // 每一桌的AI人數上限
	AIPlay   bool  `protobuf:"varint,10,opt,name=AIPlay,proto3" json:"AIPlay,omitempty"`    // 是否啟動AI
}

func (x *DbAIPlayInput) Reset() {
	*x = DbAIPlayInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbAIPlayInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbAIPlayInput) ProtoMessage() {}

func (x *DbAIPlayInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbAIPlayInput.ProtoReflect.Descriptor instead.
func (*DbAIPlayInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{95}
}

func (x *DbAIPlayInput) GetEOpCode() int32 {
	if x != nil {
		return x.EOpCode
	}
	return 0
}

func (x *DbAIPlayInput) GetAIAmount() int32 {
	if x != nil {
		return x.AIAmount
	}
	return 0
}

func (x *DbAIPlayInput) GetAIPlay() bool {
	if x != nil {
		return x.AIPlay
	}
	return false
}

/// 給玩家看的儲值紀錄(CN)
type DbOrderRecordCNReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	List    []*DbOrderRecordCNData `protobuf:"bytes,3,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *DbOrderRecordCNReply) Reset() {
	*x = DbOrderRecordCNReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbOrderRecordCNReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbOrderRecordCNReply) ProtoMessage() {}

func (x *DbOrderRecordCNReply) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbOrderRecordCNReply.ProtoReflect.Descriptor instead.
func (*DbOrderRecordCNReply) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{96}
}

func (x *DbOrderRecordCNReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DbOrderRecordCNReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DbOrderRecordCNReply) GetList() []*DbOrderRecordCNData {
	if x != nil {
		return x.List
	}
	return nil
}

type DbOrderRecordCNData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompleteDate string `protobuf:"bytes,1,opt,name=CompleteDate,proto3" json:"CompleteDate,omitempty"`
	OrderID      string `protobuf:"bytes,2,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	TypeName     string `protobuf:"bytes,3,opt,name=TypeName,proto3" json:"TypeName,omitempty"`
	Price        string `protobuf:"bytes,4,opt,name=Price,proto3" json:"Price,omitempty"`
}

func (x *DbOrderRecordCNData) Reset() {
	*x = DbOrderRecordCNData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbOrderRecordCNData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbOrderRecordCNData) ProtoMessage() {}

func (x *DbOrderRecordCNData) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbOrderRecordCNData.ProtoReflect.Descriptor instead.
func (*DbOrderRecordCNData) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{97}
}

func (x *DbOrderRecordCNData) GetCompleteDate() string {
	if x != nil {
		return x.CompleteDate
	}
	return ""
}

func (x *DbOrderRecordCNData) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *DbOrderRecordCNData) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *DbOrderRecordCNData) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

/// 給玩家看的儲值紀錄(TW)
type DbOrderRecordReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                 `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	List    []*DbOrderRecordData `protobuf:"bytes,3,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *DbOrderRecordReply) Reset() {
	*x = DbOrderRecordReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbOrderRecordReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbOrderRecordReply) ProtoMessage() {}

func (x *DbOrderRecordReply) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbOrderRecordReply.ProtoReflect.Descriptor instead.
func (*DbOrderRecordReply) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{98}
}

func (x *DbOrderRecordReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DbOrderRecordReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DbOrderRecordReply) GetList() []*DbOrderRecordData {
	if x != nil {
		return x.List
	}
	return nil
}

type DbOrderRecordData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompleteDate string `protobuf:"bytes,1,opt,name=CompleteDate,proto3" json:"CompleteDate,omitempty"`
	OrderID      string `protobuf:"bytes,2,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	TypeName     string `protobuf:"bytes,3,opt,name=TypeName,proto3" json:"TypeName,omitempty"`
	Price        string `protobuf:"bytes,4,opt,name=Price,proto3" json:"Price,omitempty"`
	Gold         string `protobuf:"bytes,5,opt,name=Gold,proto3" json:"Gold,omitempty"`
}

func (x *DbOrderRecordData) Reset() {
	*x = DbOrderRecordData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbOrderRecordData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbOrderRecordData) ProtoMessage() {}

func (x *DbOrderRecordData) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbOrderRecordData.ProtoReflect.Descriptor instead.
func (*DbOrderRecordData) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{99}
}

func (x *DbOrderRecordData) GetCompleteDate() string {
	if x != nil {
		return x.CompleteDate
	}
	return ""
}

func (x *DbOrderRecordData) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *DbOrderRecordData) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *DbOrderRecordData) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *DbOrderRecordData) GetGold() string {
	if x != nil {
		return x.Gold
	}
	return ""
}

type SMSLogInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneID string `protobuf:"bytes,1,opt,name=PhoneID,proto3" json:"PhoneID,omitempty"`
	Code    string `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Type    string `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Status  int32  `protobuf:"varint,4,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *SMSLogInput) Reset() {
	*x = SMSLogInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMSLogInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMSLogInput) ProtoMessage() {}

func (x *SMSLogInput) ProtoReflect() protoreflect.Message {
	mi := &file_member_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMSLogInput.ProtoReflect.Descriptor instead.
func (*SMSLogInput) Descriptor() ([]byte, []int) {
	return file_member_proto_rawDescGZIP(), []int{100}
}

func (x *SMSLogInput) GetPhoneID() string {
	if x != nil {
		return x.PhoneID
	}
	return ""
}

func (x *SMSLogInput) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SMSLogInput) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SMSLogInput) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

var File_member_proto protoreflect.FileDescriptor

var file_member_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x3d, 0x0a, 0x0d, 0x44, 0x62, 0x47, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44,
	0x62, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xf8, 0x01, 0x0a, 0x10, 0x44, 0x62, 0x47, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x4f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x4f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x49, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x47, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x73, 0x47, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x48, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x49, 0x73, 0x48, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x22, 0x0a, 0x0c,
	0x49, 0x73, 0x43, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x0c, 0x0a, 0x0a, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x22,
	0x0a, 0x0a, 0x44, 0x62, 0x53, 0x74, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x1f, 0x0a, 0x0b, 0x44, 0x62, 0x4d, 0x79, 0x49, 0x44, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x4b, 0x65, 0x79, 0x22, 0x1f, 0x0a, 0x0b, 0x44, 0x62, 0x47, 0x55, 0x49, 0x44, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x4b, 0x65, 0x79, 0x22, 0x1e, 0x0a, 0x0a, 0x44, 0x62, 0x49, 0x6e, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x4b, 0x65, 0x79, 0x22, 0x35, 0x0a, 0x0d, 0x44, 0x62, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x38, 0x0a, 0x0e, 0x44,
	0x62, 0x45, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3d, 0x0a, 0x13, 0x44, 0x62, 0x49, 0x6e, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x3e, 0x0a, 0x14, 0x44, 0x62, 0x49, 0x6e, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x5f, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x22, 0x3b, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x50, 0x22, 0x4f, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x4d, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d,
	0x79, 0x49, 0x44, 0x22, 0x75, 0x0a, 0x0d, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x42, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4e,
	0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x42, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x6f, 0x77, 0x22, 0x45, 0x0a, 0x11, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x35, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x0e, 0x42, 0x69, 0x6e, 0x64,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x50, 0x57, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x50, 0x57, 0x22, 0x50, 0x0a, 0x10, 0x44, 0x62, 0x54, 0x61, 0x6b, 0x65, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x43, 0x61, 0x73, 0x68, 0x22, 0x38, 0x0a, 0x10, 0x44, 0x62, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x42, 0x61, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73,
	0x42, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x42, 0x61, 0x6e,
	0x22, 0x72, 0x0a, 0x12, 0x44, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x42, 0x75, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x42, 0x75, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x22, 0xd3, 0x01, 0x0a, 0x0f, 0x44, 0x62, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x49, 0x73, 0x41, 0x49, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x73, 0x41, 0x49,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50,
	0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x22, 0x73, 0x0a, 0x0f, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22,
	0xf6, 0x01, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x41, 0x64, 0x64, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x6f, 0x6c, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x49, 0x73, 0x41, 0x49, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x73, 0x41, 0x49,
	0x12, 0x18, 0x0a, 0x07, 0x45, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x45, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x61,
	0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x57,
	0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x22, 0xf6, 0x02, 0x0a, 0x12, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x44, 0x54, 0x46, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x44, 0x72,
	0x61, 0x67, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x54, 0x69, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x54, 0x69, 0x67, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x44, 0x72, 0x61, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x44, 0x72, 0x61, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x67,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x57, 0x69, 0x6e, 0x44, 0x72, 0x61,
	0x67, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x54, 0x69, 0x67, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x54, 0x69, 0x67, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x57, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72,
	0x47, 0x6f, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x57, 0x61, 0x74, 0x65,
	0x72, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x22, 0x9a, 0x04, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x4d, 0x57, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x65, 0x72, 0x72, 0x61, 0x72, 0x69, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x65, 0x72, 0x72, 0x61,
	0x72, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x42, 0x65, 0x6e, 0x7a, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x42, 0x65, 0x6e, 0x7a,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x42, 0x4d, 0x57, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x42, 0x4d, 0x57, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x75, 0x64, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x75, 0x64, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x56, 0x57, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x56, 0x57, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x6f, 0x79,
	0x6f, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x54, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x6e, 0x46, 0x65, 0x72,
	0x72, 0x61, 0x72, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x69, 0x6e, 0x46,
	0x65, 0x72, 0x72, 0x61, 0x72, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x42, 0x65, 0x6e,
	0x7a, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x57, 0x69, 0x6e, 0x42, 0x65, 0x6e, 0x7a,
	0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x6e, 0x42, 0x4d, 0x57, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x57, 0x69, 0x6e, 0x42, 0x4d, 0x57, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x41,
	0x75, 0x64, 0x69, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x57, 0x69, 0x6e, 0x41, 0x75,
	0x64, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x6e, 0x56, 0x57, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x57, 0x69, 0x6e, 0x56, 0x57, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x69, 0x6e, 0x54,
	0x6f, 0x79, 0x6f, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x57, 0x69, 0x6e,
	0x54, 0x6f, 0x79, 0x6f, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47,
	0x6f, 0x6c, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f,
	0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x22, 0xde,
	0x04, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x44, 0x57, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12,
	0x2a, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x46, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x46, 0x72, 0x6f, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x46, 0x72, 0x6f, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x69, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x57, 0x69, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x57, 0x69, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x57,
	0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x57, 0x69, 0x6e,
	0x46, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x57, 0x69, 0x6e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x0d, 0x57, 0x69, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61,
	0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x57, 0x69, 0x6e, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x47, 0x6f, 0x6c, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f,
	0x6c, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47,
	0x6f, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x22,
	0xf6, 0x02, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x42, 0x46, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x57, 0x69, 0x6e, 0x52, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69,
	0x6e, 0x52, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x22, 0x9a, 0x04, 0x0a, 0x12, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x43, 0x52, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x42, 0x61,
	0x6e, 0x6b, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x44, 0x72, 0x61, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x44, 0x72, 0x61, 0x77, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x69,
	0x72, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x50, 0x61, 0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x57,
	0x69, 0x6e, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x57, 0x69, 0x6e, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x69, 0x6e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x57, 0x69,
	0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x44, 0x72,
	0x61, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x57, 0x69, 0x6e, 0x44, 0x72, 0x61,
	0x77, 0x12, 0x24, 0x0a, 0x0d, 0x57, 0x69, 0x6e, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x50, 0x61,
	0x69, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x57, 0x69, 0x6e, 0x42, 0x61, 0x6e,
	0x6b, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x57, 0x69, 0x6e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x57, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x57,
	0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x6e,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x61, 0x6e,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x22, 0xae, 0x05, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x45, 0x44, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6f, 0x6d, 0x62, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x6f, 0x6d, 0x62, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d,
	0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x64, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x64, 0x47, 0x6f,
	0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x47, 0x6f, 0x6c,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6f, 0x6d, 0x62, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x42, 0x6f, 0x6d, 0x62, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x6f, 0x6d, 0x62, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x42, 0x6f, 0x6d, 0x62, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x57, 0x69, 0x6e, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x57, 0x69, 0x6e, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x12, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x11, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f,
	0x42, 0x6f, 0x6d, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x42, 0x6f, 0x6d, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x6f, 0x6d, 0x62, 0x47, 0x6f,
	0x6c, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x42, 0x6f, 0x6d, 0x62, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61,
	0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x61,
	0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x22, 0xba, 0x04, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x57, 0x43, 0x52, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x4b, 0x69, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x4b, 0x69, 0x6e,
	0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x51, 0x75, 0x65, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x51, 0x75, 0x65, 0x65,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x61, 0x73, 0x74, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x61, 0x73,
	0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x42, 0x69, 0x73, 0x68,
	0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x42,
	0x69, 0x73, 0x68, 0x6f, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x4b, 0x6e,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x4b, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x57,
	0x69, 0x6e, 0x4b, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x57, 0x69,
	0x6e, 0x4b, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x51, 0x75, 0x65, 0x65,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x51, 0x75, 0x65, 0x65,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x69, 0x6e, 0x43, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x57, 0x69, 0x6e, 0x43, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x57, 0x69, 0x6e, 0x42, 0x69, 0x73, 0x68, 0x6f, 0x70, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x57, 0x69, 0x6e, 0x42, 0x69, 0x73, 0x68, 0x6f, 0x70, 0x12, 0x1c, 0x0a,
	0x09, 0x57, 0x69, 0x6e, 0x4b, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x57, 0x69, 0x6e, 0x4b, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x57,
	0x69, 0x6e, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x57, 0x69, 0x6e, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x61, 0x74,
	0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x57, 0x61,
	0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x22, 0xf2, 0x05, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x54, 0x53,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x42, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x42, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0b,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x31, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x31,
	0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x33, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x33, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x34, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x35, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x35, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x36, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x36, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69,
	0x6e, 0x42, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x6e, 0x42,
	0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x57, 0x69, 0x6e, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x57, 0x69, 0x6e, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x57, 0x69, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x31, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x57, 0x69, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x69,
	0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x57,
	0x69, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x69, 0x6e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x33, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x57, 0x69, 0x6e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x33, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x69, 0x6e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x34, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x57, 0x69, 0x6e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x34, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x69, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x35, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x57, 0x69, 0x6e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x35, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x69, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x36, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x57, 0x69, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x36,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x22, 0x7a, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x44, 0x5a, 0x50, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x31,
	0x0a, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x5a,
	0x50, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x6c, 0x6f,
	0x67, 0x12, 0x31, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x5a,
	0x50, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x83, 0x02, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x5a,
	0x50, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x69, 0x67, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x42, 0x69, 0x67, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6d,
	0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65,
	0x61, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x22, 0x8b, 0x02, 0x0a, 0x15, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x44, 0x5a, 0x50, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f,
	0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x6f, 0x6b, 0x65, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x52, 0x61, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x61,
	0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x57,
	0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x22, 0x7a, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x47, 0x46, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x31,
	0x0a, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x47,
	0x46, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x6c, 0x6f,
	0x67, 0x12, 0x31, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x47,
	0x46, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xfb, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x47,
	0x46, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x42, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x42, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f,
	0x70, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x54, 0x6f,
	0x70, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x70, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x54, 0x6f, 0x70, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x53, 0x65, 0x61, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47,
	0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f,
	0x6c, 0x64, 0x22, 0xe9, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x47, 0x46, 0x47,
	0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65,
	0x61, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x50, 0x6f, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x47, 0x6f, 0x6c,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x47, 0x6f, 0x6c, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x22, 0x7a,
	0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4b, 0x4d, 0x4a, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x6c, 0x6f, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x4b, 0x4d, 0x4a, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x07,
	0x47, 0x61, 0x6d, 0x65, 0x6c, 0x6f, 0x67, 0x12, 0x31, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x4b, 0x4d, 0x4a, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8b, 0x02, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x4b, 0x4d, 0x4a, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x53, 0x65, 0x61, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47,
	0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f,
	0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x42, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x54, 0x6f, 0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x6f, 0x70, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x6f, 0x6f,
	0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xab, 0x03, 0x0a, 0x15, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x4b, 0x4d, 0x4a, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x47,
	0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x47, 0x6f,
	0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x52, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x57, 0x69, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x57, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x69,
	0x6e, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x61, 0x74, 0x65, 0x72,
	0x47, 0x6f, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x6f,
	0x73, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4c, 0x6f, 0x73, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x57, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x57, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x6e, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x22, 0x7a, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x4e, 0x4e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x07,
	0x47, 0x61, 0x6d, 0x65, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x4e, 0x4e, 0x47,
	0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x6c, 0x6f, 0x67, 0x12,
	0x31, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x4e, 0x4e, 0x47,
	0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xe5, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x4e, 0x4e, 0x47,
	0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65,
	0x61, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61,
	0x73, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x42,
	0x61, 0x73, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x6f, 0x6f, 0x6d,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x52,
	0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xed, 0x02, 0x0a, 0x15, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x4e, 0x4e, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64,
	0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f,
	0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x57, 0x69, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x57, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x54, 0x77, 0x6f, 0x43, 0x61, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54,
	0x77, 0x6f, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x68, 0x72, 0x65, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x68, 0x72, 0x65, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x6f, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x42, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x22, 0x7a, 0x0a, 0x12, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x44, 0x44, 0x5a, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x31, 0x0a, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x44, 0x44, 0x5a, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x07, 0x47, 0x61, 0x6d, 0x65,
	0x6c, 0x6f, 0x67, 0x12, 0x31, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x44, 0x44, 0x5a, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xf3, 0x02, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x44, 0x44, 0x5a, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x0e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x57,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47,
	0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f,
	0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x42, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x54, 0x6f, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x6f,
	0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xd3, 0x01, 0x0a,
	0x15, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x44, 0x5a, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41,
	0x64, 0x64, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47,
	0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72,
	0x47, 0x6f, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x61, 0x6e, 0x64,
	0x4f, 0x72, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x48, 0x61, 0x6e, 0x64, 0x4f,
	0x72, 0x69, 0x22, 0xa4, 0x03, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x47,
	0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x42, 0x6f, 0x78, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x42, 0x6f, 0x78, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x73, 0x41,
	0x49, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x73, 0x41, 0x49, 0x12, 0x18, 0x0a,
	0x07, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x42, 0x61, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x42, 0x61, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x70, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4c,
	0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x70, 0x0a, 0x0a, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x72, 0x0a, 0x0c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2e, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x73, 0x0a, 0x0d, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x77, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x75, 0x0a,
	0x0f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x74, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x60, 0x0a, 0x0c, 0x47, 0x61,
	0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x22, 0x3e, 0x0a, 0x08,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x57, 0x0a, 0x0b,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x56, 0x0a, 0x0a, 0x44, 0x62, 0x49, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbb, 0x02,
	0x0a, 0x0f, 0x44, 0x62, 0x54, 0x61, 0x6b, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x61, 0x73, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x46,
	0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x46, 0x65, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x50, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x61, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x42,
	0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x22, 0x43, 0x0a, 0x14, 0x44,
	0x62, 0x54, 0x61, 0x6b, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x54, 0x61, 0x6b,
	0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x73, 0x0a, 0x0b, 0x44, 0x62, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x75, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x75, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0x6f, 0x0a, 0x10, 0x44, 0x62, 0x54, 0x6f, 0x70, 0x55, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a,
	0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6f, 0x0a, 0x0e, 0x44, 0x62, 0x4d, 0x61, 0x69, 0x6c,
	0x42, 0x6f, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x4d, 0x61, 0x69, 0x6c, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe9, 0x02, 0x0a, 0x0d, 0x44, 0x62, 0x4d, 0x61,
	0x69, 0x6c, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x69,
	0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x61, 0x69, 0x6c, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x6f, 0x57, 0x68, 0x6f, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x54, 0x6f, 0x57, 0x68, 0x6f, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x46,
	0x72, 0x6f, 0x6d, 0x57, 0x68, 0x6f, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x46, 0x72, 0x6f, 0x6d, 0x57, 0x68, 0x6f, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x68, 0x6f, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x68, 0x6f, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4d, 0x61, 0x69, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xcb, 0x02, 0x0a, 0x11, 0x44, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f,
	0x6d, 0x57, 0x68, 0x6f, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x72,
	0x6f, 0x6d, 0x57, 0x68, 0x6f, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x68, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x68, 0x6f, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x74, 0x65,
	0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49,
	0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x44, 0x61, 0x79, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x22, 0xeb, 0x01, 0x0a, 0x0d, 0x44, 0x62, 0x43, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x6e, 0x4c, 0x76, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x6e, 0x4c, 0x76, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x47, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x47, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x4f, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x4f, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x47,
	0x61, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x47, 0x61, 0x69, 0x6e, 0x22,
	0x75, 0x0a, 0x12, 0x44, 0x62, 0x43, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x43, 0x68, 0x65,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2e, 0x44, 0x62, 0x43, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x43, 0x68, 0x65, 0x61, 0x74, 0x22, 0xc4, 0x02, 0x0a, 0x12, 0x44, 0x62, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x4f,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x64, 0x64,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x41, 0x64, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x64, 0x64, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1e, 0x0a,
	0x0a, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x68, 0x65, 0x61, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x43, 0x68, 0x65, 0x61, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x77, 0x0a,
	0x12, 0x44, 0x62, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44,
	0x62, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x67, 0x0a, 0x11, 0x44, 0x62, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x6e, 0x53, 0x75,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x57, 0x69, 0x6e, 0x53, 0x75, 0x6d, 0x22,
	0xb1, 0x01, 0x0a, 0x0f, 0x44, 0x62, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x61, 0x72, 0x64, 0x4e,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x42,
	0x61, 0x6e, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43,
	0x69, 0x74, 0x79, 0x22, 0x39, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0xd8,
	0x02, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x79, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54,
	0x65, 0x61, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x54,
	0x65, 0x61, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x41, 0x64, 0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x51,
	0x52, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x83, 0x01, 0x0a, 0x18, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xd7, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x79, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x6f, 0x6c, 0x64, 0x57, 0x65, 0x65, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x6f, 0x6c, 0x64, 0x57,
	0x65, 0x65, 0x6b, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x47,
	0x6f, 0x6c, 0x64, 0x57, 0x65, 0x65, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x47, 0x6f, 0x6c, 0x64, 0x57, 0x65, 0x65, 0x6b, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55,
	0x70, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x70, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x1d, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x79, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x38, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x79,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xca, 0x02, 0x0a, 0x1c, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x79, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65,
	0x61, 0x6d, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x54, 0x65,
	0x61, 0x6d, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x79, 0x47, 0x6f, 0x6c, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x79, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x65, 0x61, 0x6d,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x15, 0x44, 0x62, 0x54, 0x61, 0x6b, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22,
	0x3b, 0x0a, 0x0d, 0x44, 0x62, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x44, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x44, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x22, 0xa9, 0x01, 0x0a,
	0x0d, 0x44, 0x62, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x69, 0x67,
	0x6e, 0x49, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x41, 0x6c, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e,
	0x49, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x44, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x44, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x70, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x50, 0x57, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x50, 0x57, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x50, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x22, 0x75, 0x0a, 0x15, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x62, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x50, 0x57, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x50,
	0x57, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x50, 0x57, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x22, 0x0a, 0x0c, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x22,
	0x56, 0x0a, 0x1a, 0x44, 0x42, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x50, 0x57, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x50, 0x57, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x22, 0x51, 0x0a, 0x0f, 0x44, 0x62, 0x53, 0x65, 0x6e,
	0x64, 0x47, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72,
	0x6f, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x6f, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x6f, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x22, 0x79, 0x0a, 0x15, 0x44, 0x42,
	0x53, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44,
	0x42, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x10, 0x44, 0x42, 0x53, 0x65, 0x6e, 0x64,
	0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x22, 0x6b,
	0x0a, 0x0e, 0x44, 0x62, 0x49, 0x41, 0x50, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x49, 0x41,
	0x50, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa3, 0x02, 0x0a, 0x09,
	0x44, 0x62, 0x49, 0x41, 0x50, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x74, 0x65,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x74, 0x65,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x41,
	0x64, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41,
	0x64, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x50, 0x6c,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x50, 0x6c, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65, 0x73,
	0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x63, 0x6f,
	0x6e, 0x22, 0x75, 0x0a, 0x0d, 0x44, 0x62, 0x49, 0x41, 0x50, 0x42, 0x75, 0x79, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xf1, 0x01, 0x0a, 0x13, 0x44, 0x62, 0x49,
	0x41, 0x50, 0x42, 0x75, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x4e, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x22, 0xc9, 0x01, 0x0a,
	0x0f, 0x44, 0x62, 0x49, 0x41, 0x50, 0x42, 0x75, 0x79, 0x43, 0x4e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x4e, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65,
	0x6e, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x79, 0x0a, 0x15, 0x44, 0x62, 0x49, 0x41,
	0x50, 0x42, 0x75, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x4e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x4e,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x79, 0x0a, 0x16, 0x44, 0x62, 0x54, 0x61, 0x6b, 0x65, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2b, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x54, 0x61, 0x6b, 0x65, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x73,
	0x0a, 0x10, 0x44, 0x62, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xef, 0x02, 0x0a, 0x0f, 0x44, 0x62, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x4f, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x4f, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x57, 0x61, 0x74, 0x65,
	0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x4f, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x4f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x41, 0x49, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x41, 0x49, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x41,
	0x49, 0x50, 0x6c, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x41, 0x49, 0x50,
	0x6c, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x61, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x65, 0x61, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5d, 0x0a, 0x0d, 0x44, 0x62, 0x41, 0x49, 0x50, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x4f, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x41, 0x49, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x41, 0x49, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x41, 0x49, 0x50, 0x6c, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x41, 0x49,
	0x50, 0x6c, 0x61, 0x79, 0x22, 0x7b, 0x0a, 0x14, 0x44, 0x62, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x4e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2f, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x4e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x44, 0x62, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x43, 0x4e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x77, 0x0a, 0x12, 0x44, 0x62, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x11, 0x44, 0x62, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x6f, 0x6c, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x22, 0x67, 0x0a, 0x0b,
	0x53, 0x4d, 0x53, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x95, 0x29, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x4d, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x12, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x45, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x62, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49,
	0x44, 0x50, 0x57, 0x12, 0x1d, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x62, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x50, 0x57, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x1a, 0x12, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x62, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x50, 0x57, 0x12,
	0x1d, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x62, 0x79,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x50, 0x57, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x4b, 0x0a, 0x13, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x2e, 0x44, 0x42, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a,
	0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x12, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a,
	0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x49, 0x12, 0x0b, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x12, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x0b, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x14, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x3a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x12, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x15, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62,
	0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x12, 0x15, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x15,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x44, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x19, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x19, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x1a, 0x17, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x42,
	0x69, 0x6e, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x13, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x55, 0x70, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x15, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x13, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37,
	0x0a, 0x09, 0x42, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x6b, 0x65, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x12, 0x18, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62,
	0x54, 0x61, 0x6b, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x3b, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12,
	0x1a, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x64, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a,
	0x0a, 0x44, 0x62, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x17, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x44, 0x62, 0x4d, 0x61, 0x69, 0x6c,
	0x42, 0x6f, 0x78, 0x12, 0x13, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x4d,
	0x79, 0x49, 0x44, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x16, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2e, 0x44, 0x62, 0x4d, 0x61, 0x69, 0x6c, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x35, 0x0a, 0x0d, 0x44, 0x62, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x12, 0x12, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x49, 0x6e, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x0a, 0x44, 0x62, 0x4d, 0x61, 0x69,
	0x6c, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x15, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44,
	0x62, 0x4d, 0x61, 0x69, 0x6c, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x10, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e,
	0x0a, 0x0f, 0x44, 0x62, 0x53, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x69,
	0x6c, 0x12, 0x19, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37,
	0x0a, 0x0c, 0x44, 0x62, 0x53, 0x65, 0x74, 0x43, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x12, 0x15,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x43, 0x68, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x36, 0x0a, 0x0b, 0x44, 0x62, 0x44, 0x6f, 0x43,
	0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e,
	0x44, 0x62, 0x43, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x3f, 0x0a, 0x0c, 0x44, 0x62, 0x47, 0x65, 0x74, 0x43, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x12,
	0x13, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x4d, 0x79, 0x49, 0x44, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1a, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62,
	0x43, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x3d, 0x0a, 0x0d, 0x44, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x61,
	0x74, 0x12, 0x1a, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x4c, 0x0a, 0x10, 0x44, 0x62, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x49,
	0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x1a, 0x1a, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3d, 0x0a,
	0x0d, 0x44, 0x62, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x12, 0x13,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x4d, 0x79, 0x49, 0x44, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x17, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x42,
	0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x37, 0x0a, 0x0a,
	0x44, 0x62, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x12, 0x17, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x4f, 0x4b, 0x12, 0x13, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x10, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0b,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x18, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x47, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x4d, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x20, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x79, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x51,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x79, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0b, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x25, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x79, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x43, 0x0a, 0x10, 0x44, 0x62, 0x54, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44,
	0x62, 0x54, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3d, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x2e, 0x44, 0x62, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x15,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x49, 0x44, 0x62, 0x79, 0x49, 0x50, 0x12, 0x12, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2e, 0x44, 0x62, 0x53, 0x74, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x13, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x35, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x12, 0x17,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x69,
	0x66, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x47, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x13,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x4d, 0x79, 0x49, 0x44, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x1d, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x53,
	0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x3a, 0x0a, 0x0c, 0x44, 0x62, 0x47, 0x65, 0x74, 0x49, 0x41, 0x50, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x12, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x53, 0x74,
	0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x16, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e,
	0x44, 0x62, 0x49, 0x41, 0x50, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35,
	0x0a, 0x08, 0x44, 0x62, 0x49, 0x41, 0x50, 0x42, 0x75, 0x79, 0x12, 0x15, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x49, 0x41, 0x50, 0x42, 0x75, 0x79, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x1a, 0x12, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x49, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x0e, 0x44, 0x62, 0x49, 0x41, 0x50, 0x42, 0x75,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x2e, 0x44, 0x62, 0x49, 0x41, 0x50, 0x42, 0x75, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x44, 0x62, 0x49, 0x41, 0x50, 0x42,
	0x75, 0x79, 0x43, 0x4e, 0x12, 0x17, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62,
	0x49, 0x41, 0x50, 0x42, 0x75, 0x79, 0x43, 0x4e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x13, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x43, 0x0a, 0x10, 0x44, 0x62, 0x49, 0x41, 0x50, 0x42, 0x75, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x4e, 0x12, 0x1d, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e,
	0x44, 0x62, 0x49, 0x41, 0x50, 0x42, 0x75, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x4e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x44, 0x0a, 0x0f, 0x44, 0x62, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x4e, 0x12, 0x13, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x4d, 0x79, 0x49, 0x44, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a,
	0x1c, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x4e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a,
	0x0d, 0x44, 0x62, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x13,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x4d, 0x79, 0x49, 0x44, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x1a, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x39, 0x0a, 0x11, 0x44, 0x62, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x69, 0x6d, 0x62,
	0x75, 0x72, 0x73, 0x65, 0x12, 0x12, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x08, 0x44, 0x42,
	0x53, 0x4d, 0x53, 0x4c, 0x6f, 0x67, 0x12, 0x13, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e,
	0x53, 0x4d, 0x53, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a,
	0x11, 0x44, 0x62, 0x54, 0x61, 0x6b, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x13, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x4d, 0x79,
	0x49, 0x44, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1e, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x2e, 0x44, 0x62, 0x54, 0x61, 0x6b, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x0e, 0x44, 0x62, 0x47, 0x65, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x18, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x0c, 0x44, 0x62, 0x44, 0x65, 0x6c,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x2e, 0x49, 0x64, 0x73, 0x1a, 0x10, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x14, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4b, 0x0a, 0x12, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x61, 0x6b, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x17, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1c, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2e, 0x44, 0x62, 0x54, 0x61, 0x6b, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x47, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x54, 0x61,
	0x6b, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x43, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x17, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x18, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x0b, 0x53, 0x61, 0x76, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x10, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x05,
	0x53, 0x65, 0x74, 0x50, 0x57, 0x12, 0x15, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44,
	0x62, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30,
	0x0a, 0x07, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x57, 0x12, 0x13, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2e, 0x44, 0x62, 0x4d, 0x79, 0x49, 0x44, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x35, 0x0a, 0x0a, 0x44, 0x62, 0x4d, 0x61, 0x69, 0x6c, 0x45, 0x64, 0x69, 0x74, 0x12, 0x15,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x4d, 0x61, 0x69, 0x6c, 0x42, 0x6f,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x10, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x09, 0x44, 0x62, 0x4d, 0x61, 0x69,
	0x6c, 0x44, 0x65, 0x6c, 0x12, 0x12, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62,
	0x49, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x13, 0x44, 0x62,
	0x53, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x69, 0x6c, 0x45, 0x64, 0x69,
	0x74, 0x12, 0x19, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3a,
	0x0a, 0x12, 0x44, 0x62, 0x53, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x69,
	0x6c, 0x44, 0x65, 0x6c, 0x12, 0x12, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62,
	0x49, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3d, 0x0a, 0x0f, 0x44, 0x62,
	0x53, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x10, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x42, 0x65, 0x74,
	0x4c, 0x6f, 0x67, 0x12, 0x10, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x42, 0x65, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x44, 0x54, 0x46, 0x47, 0x61,
	0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x44, 0x54, 0x46, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x1a, 0x14, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x42, 0x4d, 0x57, 0x47, 0x61,
	0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x4d, 0x57, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x1a, 0x14, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x48, 0x44, 0x57, 0x47, 0x61,
	0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x44, 0x57, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x1a, 0x14, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x52, 0x42, 0x46, 0x47, 0x61,
	0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x42, 0x46, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x1a, 0x14, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x42, 0x43, 0x52, 0x47, 0x61,
	0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x43, 0x52, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x1a, 0x14, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x52, 0x45, 0x44, 0x47, 0x61,
	0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x45, 0x44, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x1a, 0x14, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x57, 0x43, 0x52, 0x47, 0x61,
	0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x57, 0x43, 0x52, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x1a, 0x14, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x46, 0x54, 0x53, 0x47, 0x61,
	0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x46, 0x54, 0x53, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x1a, 0x14, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x44, 0x5a, 0x50, 0x47, 0x61,
	0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x44, 0x5a, 0x50, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x1a, 0x14, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x42, 0x47, 0x46, 0x47, 0x61,
	0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x47, 0x46, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x1a, 0x14, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x4b, 0x4d, 0x4a, 0x47, 0x61,
	0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x4b, 0x4d, 0x4a, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x1a, 0x14, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x52, 0x4e, 0x4e, 0x47, 0x61,
	0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x4e, 0x4e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x1a, 0x14, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x44, 0x44, 0x5a, 0x47, 0x61,
	0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x44, 0x44, 0x5a, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x1a, 0x14, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x49, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x41, 0x0a, 0x0f, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1c,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x49, 0x6e, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x41,
	0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x57, 0x61, 0x74, 0x65,
	0x72, 0x12, 0x1c, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x49, 0x6e, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a,
	0x10, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x46, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2e, 0x44, 0x62, 0x49, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x45, 0x0a, 0x13, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x57, 0x61, 0x74, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x49, 0x6e, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x3d, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x16, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44,
	0x62, 0x45, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x37, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x49, 0x50, 0x6c, 0x61, 0x79, 0x12,
	0x15, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x41, 0x49, 0x50, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x65, 0x61, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x45, 0x4f, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x16, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x45,
	0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0x0a, 0x0a,
	0x08, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0xaa, 0x02, 0x09, 0x44, 0x42,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_member_proto_rawDescOnce sync.Once
	file_member_proto_rawDescData = file_member_proto_rawDesc
)

func file_member_proto_rawDescGZIP() []byte {
	file_member_proto_rawDescOnce.Do(func() {
		file_member_proto_rawDescData = protoimpl.X.CompressGZIP(file_member_proto_rawDescData)
	})
	return file_member_proto_rawDescData
}

var file_member_proto_msgTypes = make([]protoimpl.MessageInfo, 101)
var file_member_proto_goTypes = []interface{}{
	(*DbGameConfigs)(nil),                 // 0: Member.DbGameConfigs
	(*DbGameConfigData)(nil),              // 1: Member.DbGameConfigData
	(*EmptyInput)(nil),                    // 2: Member.EmptyInput
	(*DbStrInput)(nil),                    // 3: Member.DbStrInput
	(*DbMyIDInput)(nil),                   // 4: Member.DbMyIDInput
	(*DbGUIDInput)(nil),                   // 5: Member.DbGUIDInput
	(*DbIntInput)(nil),                    // 6: Member.DbIntInput
	(*DbStringInput)(nil),                 // 7: Member.DbStringInput
	(*DbEOpCodeInput)(nil),                // 8: Member.DbEOpCodeInput
	(*DbIntWithFloatInput)(nil),           // 9: Member.DbIntWithFloatInput
	(*DbIntWithStringInput)(nil),          // 10: Member.DbIntWithStringInput
	(*SetTakeMoneyStatusInput)(nil),       // 11: Member.SetTakeMoneyStatusInput
	(*LoginInput)(nil),                    // 12: Member.LoginInput
	(*Ids)(nil),                           // 13: Member.Ids
	(*IncreaseInput)(nil),                 // 14: Member.IncreaseInput
	(*ChangeAvatarInput)(nil),             // 15: Member.ChangeAvatarInput
	(*ChangeNameInput)(nil),               // 16: Member.ChangeNameInput
	(*BindPhoneInput)(nil),                // 17: Member.BindPhoneInput
	(*DbTakeMoneyInput)(nil),              // 18: Member.DbTakeMoneyInput
	(*DbPlayerBanInput)(nil),              // 19: Member.DbPlayerBanInput
	(*DbStoredMoneyInput)(nil),            // 20: Member.DbStoredMoneyInput
	(*DbLoginLogInput)(nil),               // 21: Member.DbLoginLogInput
	(*QueryConditions)(nil),               // 22: Member.QueryConditions
	(*BetInput)(nil),                      // 23: Member.BetInput
	(*ProtoDTFGameResult)(nil),            // 24: Member.ProtoDTFGameResult
	(*ProtoBMWGameResult)(nil),            // 25: Member.ProtoBMWGameResult
	(*ProtoHDWGameResult)(nil),            // 26: Member.ProtoHDWGameResult
	(*ProtoRBFGameResult)(nil),            // 27: Member.ProtoRBFGameResult
	(*ProtoBCRGameResult)(nil),            // 28: Member.ProtoBCRGameResult
	(*ProtoREDGameResult)(nil),            // 29: Member.ProtoREDGameResult
	(*ProtoWCRGameResult)(nil),            // 30: Member.ProtoWCRGameResult
	(*ProtoFTSGameResult)(nil),            // 31: Member.ProtoFTSGameResult
	(*ProtoDZPGameResult)(nil),            // 32: Member.ProtoDZPGameResult
	(*ProtoDZPGameLog)(nil),               // 33: Member.ProtoDZPGameLog
	(*ProtoDZPGameLogDetail)(nil),         // 34: Member.ProtoDZPGameLogDetail
	(*ProtoBGFGameResult)(nil),            // 35: Member.ProtoBGFGameResult
	(*ProtoBGFGameLog)(nil),               // 36: Member.ProtoBGFGameLog
	(*ProtoBGFGameLogDetail)(nil),         // 37: Member.ProtoBGFGameLogDetail
	(*ProtoKMJGameResult)(nil),            // 38: Member.ProtoKMJGameResult
	(*ProtoKMJGameLog)(nil),               // 39: Member.ProtoKMJGameLog
	(*ProtoKMJGameLogDetail)(nil),         // 40: Member.ProtoKMJGameLogDetail
	(*ProtoRNNGameResult)(nil),            // 41: Member.ProtoRNNGameResult
	(*ProtoRNNGameLog)(nil),               // 42: Member.ProtoRNNGameLog
	(*ProtoRNNGameLogDetail)(nil),         // 43: Member.ProtoRNNGameLogDetail
	(*ProtoDDZGameResult)(nil),            // 44: Member.ProtoDDZGameResult
	(*ProtoDDZGameLog)(nil),               // 45: Member.ProtoDDZGameLog
	(*ProtoDDZGameLogDetail)(nil),         // 46: Member.ProtoDDZGameLogDetail
	(*ProtoAccount)(nil),                  // 47: Member.ProtoAccount
	(*LoginReply)(nil),                    // 48: Member.LoginReply
	(*AccountReply)(nil),                  // 49: Member.AccountReply
	(*IncreaseReply)(nil),                 // 50: Member.IncreaseReply
	(*ChangeAvatarReply)(nil),             // 51: Member.ChangeAvatarReply
	(*ChangeNameReply)(nil),               // 52: Member.ChangeNameReply
	(*MembersReply)(nil),                  // 53: Member.MembersReply
	(*GameLogReply)(nil),                  // 54: Member.GameLogReply
	(*LogReply)(nil),                      // 55: Member.LogReply
	(*StringReply)(nil),                   // 56: Member.StringReply
	(*DbIntReply)(nil),                    // 57: Member.DbIntReply
	(*DbTakeMoneyData)(nil),               // 58: Member.DbTakeMoneyData
	(*DbTakeMoneyListReply)(nil),          // 59: Member.DbTakeMoneyListReply
	(*DbTopUpData)(nil),                   // 60: Member.DbTopUpData
	(*DbTopUpListReply)(nil),              // 61: Member.DbTopUpListReply
	(*DbMailBoxReply)(nil),                // 62: Member.DbMailBoxReply
	(*DbMailBoxData)(nil),                 // 63: Member.DbMailBoxData
	(*DbSystemMailInput)(nil),             // 64: Member.DbSystemMailInput
	(*DbCheaterInfo)(nil),                 // 65: Member.DbCheaterInfo
	(*DbCheaterInfoReply)(nil),            // 66: Member.DbCheaterInfoReply
	(*DbSystemCheatInput)(nil),            // 67: Member.DbSystemCheatInput
	(*DbLeaderboardReply)(nil),            // 68: Member.DbLeaderboardReply
	(*DbLeaderboardData)(nil),             // 69: Member.DbLeaderboardData
	(*DbBankCardInput)(nil),               // 70: Member.DbBankCardInput
	(*PromoteData)(nil),                   // 71: Member.PromoteData
	(*PromoteInfoReply)(nil),              // 72: Member.PromoteInfoReply
	(*PromoteMyPlayerInfoReply)(nil),      // 73: Member.PromoteMyPlayerInfoReply
	(*PromoteMyPlayerInfoData)(nil),       // 74: Member.PromoteMyPlayerInfoData
	(*PromoteMyPerformanceInfoReply)(nil), // 75: Member.PromoteMyPerformanceInfoReply
	(*PromoteMyPerformanceInfoData)(nil),  // 76: Member.PromoteMyPerformanceInfoData
	(*DbTakeCommissionInput)(nil),         // 77: Member.DbTakeCommissionInput
	(*DbSignInInput)(nil),                 // 78: Member.DbSignInInput
	(*DbSignInReply)(nil),                 // 79: Member.DbSignInReply
	(*CreateAccountByPhoneInput)(nil),     // 80: Member.CreateAccountByPhoneInput
	(*LoginbyPhoneIDPWInput)(nil),         // 81: Member.LoginbyPhoneIDPWInput
	(*DBPhoneChangePasswordInput)(nil),    // 82: Member.DBPhoneChangePasswordInput
	(*DbSendGiftInput)(nil),               // 83: Member.DbSendGiftInput
	(*DBSendGiftRecordReply)(nil),         // 84: Member.DBSendGiftRecordReply
	(*DBSendGiftRecord)(nil),              // 85: Member.DBSendGiftRecord
	(*DbIAPItemReply)(nil),                // 86: Member.DbIAPItemReply
	(*DbIAPItem)(nil),                     // 87: Member.DbIAPItem
	(*DbIAPBuyInput)(nil),                 // 88: Member.DbIAPBuyInput
	(*DbIAPBuyResultInput)(nil),           // 89: Member.DbIAPBuyResultInput
	(*DbIAPBuyCNInput)(nil),               // 90: Member.DbIAPBuyCNInput
	(*DbIAPBuyResultCNInput)(nil),         // 91: Member.DbIAPBuyResultCNInput
	(*DbTakeMoneyRecordReply)(nil),        // 92: Member.DbTakeMoneyRecordReply
	(*DbGameStockReply)(nil),              // 93: Member.DbGameStockReply
	(*DbGameStockData)(nil),               // 94: Member.DbGameStockData
	(*DbAIPlayInput)(nil),                 // 95: Member.DbAIPlayInput
	(*DbOrderRecordCNReply)(nil),          // 96: Member.DbOrderRecordCNReply
	(*DbOrderRecordCNData)(nil),           // 97: Member.DbOrderRecordCNData
	(*DbOrderRecordReply)(nil),            // 98: Member.DbOrderRecordReply
	(*DbOrderRecordData)(nil),             // 99: Member.DbOrderRecordData
	(*SMSLogInput)(nil),                   // 100: Member.SMSLogInput
}
var file_member_proto_depIdxs = []int32{
	1,   // 0: Member.DbGameConfigs.list:type_name -> Member.DbGameConfigData
	13,  // 1: Member.LoginInput.ids:type_name -> Member.Ids
	33,  // 2: Member.ProtoDZPGameResult.Gamelog:type_name -> Member.ProtoDZPGameLog
	34,  // 3: Member.ProtoDZPGameResult.List:type_name -> Member.ProtoDZPGameLogDetail
	36,  // 4: Member.ProtoBGFGameResult.Gamelog:type_name -> Member.ProtoBGFGameLog
	37,  // 5: Member.ProtoBGFGameResult.List:type_name -> Member.ProtoBGFGameLogDetail
	39,  // 6: Member.ProtoKMJGameResult.Gamelog:type_name -> Member.ProtoKMJGameLog
	40,  // 7: Member.ProtoKMJGameResult.List:type_name -> Member.ProtoKMJGameLogDetail
	42,  // 8: Member.ProtoRNNGameResult.Gamelog:type_name -> Member.ProtoRNNGameLog
	43,  // 9: Member.ProtoRNNGameResult.List:type_name -> Member.ProtoRNNGameLogDetail
	45,  // 10: Member.ProtoDDZGameResult.Gamelog:type_name -> Member.ProtoDDZGameLog
	46,  // 11: Member.ProtoDDZGameResult.List:type_name -> Member.ProtoDDZGameLogDetail
	47,  // 12: Member.LoginReply.account:type_name -> Member.ProtoAccount
	47,  // 13: Member.AccountReply.account:type_name -> Member.ProtoAccount
	47,  // 14: Member.IncreaseReply.account:type_name -> Member.ProtoAccount
	47,  // 15: Member.ChangeAvatarReply.account:type_name -> Member.ProtoAccount
	47,  // 16: Member.ChangeNameReply.account:type_name -> Member.ProtoAccount
	47,  // 17: Member.MembersReply.accounts:type_name -> Member.ProtoAccount
	58,  // 18: Member.DbTakeMoneyListReply.List:type_name -> Member.DbTakeMoneyData
	60,  // 19: Member.DbTopUpListReply.List:type_name -> Member.DbTopUpData
	63,  // 20: Member.DbMailBoxReply.List:type_name -> Member.DbMailBoxData
	65,  // 21: Member.DbCheaterInfoReply.Cheat:type_name -> Member.DbCheaterInfo
	69,  // 22: Member.DbLeaderboardReply.List:type_name -> Member.DbLeaderboardData
	74,  // 23: Member.PromoteMyPlayerInfoReply.List:type_name -> Member.PromoteMyPlayerInfoData
	76,  // 24: Member.PromoteMyPerformanceInfoReply.List:type_name -> Member.PromoteMyPerformanceInfoData
	85,  // 25: Member.DBSendGiftRecordReply.List:type_name -> Member.DBSendGiftRecord
	87,  // 26: Member.DbIAPItemReply.List:type_name -> Member.DbIAPItem
	58,  // 27: Member.DbTakeMoneyRecordReply.List:type_name -> Member.DbTakeMoneyData
	94,  // 28: Member.DbGameStockReply.List:type_name -> Member.DbGameStockData
	97,  // 29: Member.DbOrderRecordCNReply.List:type_name -> Member.DbOrderRecordCNData
	99,  // 30: Member.DbOrderRecordReply.List:type_name -> Member.DbOrderRecordData
	80,  // 31: Member.Member.CreateAccountByPhone:input_type -> Member.CreateAccountByPhoneInput
	81,  // 32: Member.Member.LoginbyPhoneIDPW:input_type -> Member.LoginbyPhoneIDPWInput
	81,  // 33: Member.Member.CheckLoginbyPhoneIDPW:input_type -> Member.LoginbyPhoneIDPWInput
	82,  // 34: Member.Member.PhoneChangePassword:input_type -> Member.DBPhoneChangePasswordInput
	12,  // 35: Member.Member.Login:input_type -> Member.LoginInput
	13,  // 36: Member.Member.LoginAI:input_type -> Member.Ids
	13,  // 37: Member.Member.GetAccountByID:input_type -> Member.Ids
	2,   // 38: Member.Member.GetGameConfig:input_type -> Member.EmptyInput
	14,  // 39: Member.Member.Increase:input_type -> Member.IncreaseInput
	15,  // 40: Member.Member.ChangeAvatar:input_type -> Member.ChangeAvatarInput
	16,  // 41: Member.Member.ChangeName:input_type -> Member.ChangeNameInput
	17,  // 42: Member.Member.BindPhone:input_type -> Member.BindPhoneInput
	7,   // 43: Member.Member.SetUpLine:input_type -> Member.DbStringInput
	19,  // 44: Member.Member.BanPlayer:input_type -> Member.DbPlayerBanInput
	18,  // 45: Member.Member.TakeMoney:input_type -> Member.DbTakeMoneyInput
	20,  // 46: Member.Member.StoredMoney:input_type -> Member.DbStoredMoneyInput
	21,  // 47: Member.Member.DbLoginLog:input_type -> Member.DbLoginLogInput
	4,   // 48: Member.Member.DbMailBox:input_type -> Member.DbMyIDInput
	6,   // 49: Member.Member.DbMailReceive:input_type -> Member.DbIntInput
	63,  // 50: Member.Member.DbMailSend:input_type -> Member.DbMailBoxData
	64,  // 51: Member.Member.DbSetSystemMail:input_type -> Member.DbSystemMailInput
	65,  // 52: Member.Member.DbSetCheater:input_type -> Member.DbCheaterInfo
	65,  // 53: Member.Member.DbDoCheater:input_type -> Member.DbCheaterInfo
	4,   // 54: Member.Member.DbGetCheater:input_type -> Member.DbMyIDInput
	67,  // 55: Member.Member.DbSystemCheat:input_type -> Member.DbSystemCheatInput
	10,  // 56: Member.Member.DbGetLeaderboard:input_type -> Member.DbIntWithStringInput
	4,   // 57: Member.Member.DbGetBankCard:input_type -> Member.DbMyIDInput
	70,  // 58: Member.Member.DbBankCard:input_type -> Member.DbBankCardInput
	71,  // 59: Member.Member.SetPromoteOK:input_type -> Member.PromoteData
	13,  // 60: Member.Member.GetPromoteInfo:input_type -> Member.Ids
	13,  // 61: Member.Member.GetPromoteMyPlayerInfo:input_type -> Member.Ids
	13,  // 62: Member.Member.GetPromoteMyPerformanceInfo:input_type -> Member.Ids
	77,  // 63: Member.Member.DbTakeCommission:input_type -> Member.DbTakeCommissionInput
	78,  // 64: Member.Member.GetSignInList:input_type -> Member.DbSignInInput
	3,   // 65: Member.Member.GetPromoteIDbyIP:input_type -> Member.DbStrInput
	83,  // 66: Member.Member.SendGift:input_type -> Member.DbSendGiftInput
	4,   // 67: Member.Member.GetSendGiftRecord:input_type -> Member.DbMyIDInput
	3,   // 68: Member.Member.DbGetIAPItem:input_type -> Member.DbStrInput
	88,  // 69: Member.Member.DbIAPBuy:input_type -> Member.DbIAPBuyInput
	89,  // 70: Member.Member.DbIAPBuyResult:input_type -> Member.DbIAPBuyResultInput
	90,  // 71: Member.Member.DbIAPBuyCN:input_type -> Member.DbIAPBuyCNInput
	91,  // 72: Member.Member.DbIAPBuyResultCN:input_type -> Member.DbIAPBuyResultCNInput
	4,   // 73: Member.Member.DbOrderRecordCN:input_type -> Member.DbMyIDInput
	4,   // 74: Member.Member.DbOrderRecord:input_type -> Member.DbMyIDInput
	2,   // 75: Member.Member.DbSignUpReimburse:input_type -> Member.EmptyInput
	100, // 76: Member.Member.DBSMSLog:input_type -> Member.SMSLogInput
	4,   // 77: Member.Member.DbTakeMoneyRecord:input_type -> Member.DbMyIDInput
	2,   // 78: Member.Member.DbGetGameStock:input_type -> Member.EmptyInput
	13,  // 79: Member.Member.DbDelAccount:input_type -> Member.Ids
	22,  // 80: Member.Member.listMemberByQuery:input_type -> Member.QueryConditions
	22,  // 81: Member.Member.QueryTakeMoneyList:input_type -> Member.QueryConditions
	11,  // 82: Member.Member.SetTakeMoneyStatus:input_type -> Member.SetTakeMoneyStatusInput
	22,  // 83: Member.Member.QueryTopUpList:input_type -> Member.QueryConditions
	47,  // 84: Member.Member.SaveAccount:input_type -> Member.ProtoAccount
	7,   // 85: Member.Member.SetPW:input_type -> Member.DbStringInput
	4,   // 86: Member.Member.ResetPW:input_type -> Member.DbMyIDInput
	63,  // 87: Member.Member.DbMailEdit:input_type -> Member.DbMailBoxData
	6,   // 88: Member.Member.DbMailDel:input_type -> Member.DbIntInput
	64,  // 89: Member.Member.DbSetSystemMailEdit:input_type -> Member.DbSystemMailInput
	6,   // 90: Member.Member.DbSetSystemMailDel:input_type -> Member.DbIntInput
	1,   // 91: Member.Member.DbSetGameConfig:input_type -> Member.DbGameConfigData
	23,  // 92: Member.Member.BetLog:input_type -> Member.BetInput
	24,  // 93: Member.Member.DTFGameLog:input_type -> Member.ProtoDTFGameResult
	25,  // 94: Member.Member.BMWGameLog:input_type -> Member.ProtoBMWGameResult
	26,  // 95: Member.Member.HDWGameLog:input_type -> Member.ProtoHDWGameResult
	27,  // 96: Member.Member.RBFGameLog:input_type -> Member.ProtoRBFGameResult
	28,  // 97: Member.Member.BCRGameLog:input_type -> Member.ProtoBCRGameResult
	29,  // 98: Member.Member.REDGameLog:input_type -> Member.ProtoREDGameResult
	30,  // 99: Member.Member.WCRGameLog:input_type -> Member.ProtoWCRGameResult
	31,  // 100: Member.Member.FTSGameLog:input_type -> Member.ProtoFTSGameResult
	32,  // 101: Member.Member.DZPGameLog:input_type -> Member.ProtoDZPGameResult
	35,  // 102: Member.Member.BGFGameLog:input_type -> Member.ProtoBGFGameResult
	38,  // 103: Member.Member.KMJGameLog:input_type -> Member.ProtoKMJGameResult
	41,  // 104: Member.Member.RNNGameLog:input_type -> Member.ProtoRNNGameResult
	44,  // 105: Member.Member.DDZGameLog:input_type -> Member.ProtoDDZGameResult
	10,  // 106: Member.Member.ModifyProfitGold:input_type -> Member.DbIntWithStringInput
	10,  // 107: Member.Member.ModifyGameStock:input_type -> Member.DbIntWithStringInput
	10,  // 108: Member.Member.ModifyGameWater:input_type -> Member.DbIntWithStringInput
	10,  // 109: Member.Member.ModifyGameProfitRate:input_type -> Member.DbIntWithStringInput
	10,  // 110: Member.Member.ModifyGameWaterRate:input_type -> Member.DbIntWithStringInput
	8,   // 111: Member.Member.ModifyGameGroupID:input_type -> Member.DbEOpCodeInput
	95,  // 112: Member.Member.ModifyAIPlay:input_type -> Member.DbAIPlayInput
	8,   // 113: Member.Member.ModifyGameCheatRate:input_type -> Member.DbEOpCodeInput
	8,   // 114: Member.Member.ModifyGameRecordAmount:input_type -> Member.DbEOpCodeInput
	48,  // 115: Member.Member.CreateAccountByPhone:output_type -> Member.LoginReply
	48,  // 116: Member.Member.LoginbyPhoneIDPW:output_type -> Member.LoginReply
	55,  // 117: Member.Member.CheckLoginbyPhoneIDPW:output_type -> Member.LogReply
	55,  // 118: Member.Member.PhoneChangePassword:output_type -> Member.LogReply
	48,  // 119: Member.Member.Login:output_type -> Member.LoginReply
	48,  // 120: Member.Member.LoginAI:output_type -> Member.LoginReply
	49,  // 121: Member.Member.GetAccountByID:output_type -> Member.AccountReply
	0,   // 122: Member.Member.GetGameConfig:output_type -> Member.DbGameConfigs
	50,  // 123: Member.Member.Increase:output_type -> Member.IncreaseReply
	51,  // 124: Member.Member.ChangeAvatar:output_type -> Member.ChangeAvatarReply
	52,  // 125: Member.Member.ChangeName:output_type -> Member.ChangeNameReply
	56,  // 126: Member.Member.BindPhone:output_type -> Member.StringReply
	56,  // 127: Member.Member.SetUpLine:output_type -> Member.StringReply
	55,  // 128: Member.Member.BanPlayer:output_type -> Member.LogReply
	55,  // 129: Member.Member.TakeMoney:output_type -> Member.LogReply
	55,  // 130: Member.Member.StoredMoney:output_type -> Member.LogReply
	55,  // 131: Member.Member.DbLoginLog:output_type -> Member.LogReply
	62,  // 132: Member.Member.DbMailBox:output_type -> Member.DbMailBoxReply
	55,  // 133: Member.Member.DbMailReceive:output_type -> Member.LogReply
	55,  // 134: Member.Member.DbMailSend:output_type -> Member.LogReply
	55,  // 135: Member.Member.DbSetSystemMail:output_type -> Member.LogReply
	55,  // 136: Member.Member.DbSetCheater:output_type -> Member.LogReply
	55,  // 137: Member.Member.DbDoCheater:output_type -> Member.LogReply
	66,  // 138: Member.Member.DbGetCheater:output_type -> Member.DbCheaterInfoReply
	55,  // 139: Member.Member.DbSystemCheat:output_type -> Member.LogReply
	68,  // 140: Member.Member.DbGetLeaderboard:output_type -> Member.DbLeaderboardReply
	70,  // 141: Member.Member.DbGetBankCard:output_type -> Member.DbBankCardInput
	55,  // 142: Member.Member.DbBankCard:output_type -> Member.LogReply
	55,  // 143: Member.Member.SetPromoteOK:output_type -> Member.LogReply
	72,  // 144: Member.Member.GetPromoteInfo:output_type -> Member.PromoteInfoReply
	73,  // 145: Member.Member.GetPromoteMyPlayerInfo:output_type -> Member.PromoteMyPlayerInfoReply
	75,  // 146: Member.Member.GetPromoteMyPerformanceInfo:output_type -> Member.PromoteMyPerformanceInfoReply
	55,  // 147: Member.Member.DbTakeCommission:output_type -> Member.LogReply
	79,  // 148: Member.Member.GetSignInList:output_type -> Member.DbSignInReply
	56,  // 149: Member.Member.GetPromoteIDbyIP:output_type -> Member.StringReply
	55,  // 150: Member.Member.SendGift:output_type -> Member.LogReply
	84,  // 151: Member.Member.GetSendGiftRecord:output_type -> Member.DBSendGiftRecordReply
	86,  // 152: Member.Member.DbGetIAPItem:output_type -> Member.DbIAPItemReply
	57,  // 153: Member.Member.DbIAPBuy:output_type -> Member.DbIntReply
	55,  // 154: Member.Member.DbIAPBuyResult:output_type -> Member.LogReply
	56,  // 155: Member.Member.DbIAPBuyCN:output_type -> Member.StringReply
	55,  // 156: Member.Member.DbIAPBuyResultCN:output_type -> Member.LogReply
	96,  // 157: Member.Member.DbOrderRecordCN:output_type -> Member.DbOrderRecordCNReply
	98,  // 158: Member.Member.DbOrderRecord:output_type -> Member.DbOrderRecordReply
	55,  // 159: Member.Member.DbSignUpReimburse:output_type -> Member.LogReply
	55,  // 160: Member.Member.DBSMSLog:output_type -> Member.LogReply
	92,  // 161: Member.Member.DbTakeMoneyRecord:output_type -> Member.DbTakeMoneyRecordReply
	93,  // 162: Member.Member.DbGetGameStock:output_type -> Member.DbGameStockReply
	55,  // 163: Member.Member.DbDelAccount:output_type -> Member.LogReply
	53,  // 164: Member.Member.listMemberByQuery:output_type -> Member.MembersReply
	59,  // 165: Member.Member.QueryTakeMoneyList:output_type -> Member.DbTakeMoneyListReply
	55,  // 166: Member.Member.SetTakeMoneyStatus:output_type -> Member.LogReply
	61,  // 167: Member.Member.QueryTopUpList:output_type -> Member.DbTopUpListReply
	55,  // 168: Member.Member.SaveAccount:output_type -> Member.LogReply
	55,  // 169: Member.Member.SetPW:output_type -> Member.LogReply
	55,  // 170: Member.Member.ResetPW:output_type -> Member.LogReply
	55,  // 171: Member.Member.DbMailEdit:output_type -> Member.LogReply
	55,  // 172: Member.Member.DbMailDel:output_type -> Member.LogReply
	55,  // 173: Member.Member.DbSetSystemMailEdit:output_type -> Member.LogReply
	55,  // 174: Member.Member.DbSetSystemMailDel:output_type -> Member.LogReply
	55,  // 175: Member.Member.DbSetGameConfig:output_type -> Member.LogReply
	55,  // 176: Member.Member.BetLog:output_type -> Member.LogReply
	54,  // 177: Member.Member.DTFGameLog:output_type -> Member.GameLogReply
	54,  // 178: Member.Member.BMWGameLog:output_type -> Member.GameLogReply
	54,  // 179: Member.Member.HDWGameLog:output_type -> Member.GameLogReply
	54,  // 180: Member.Member.RBFGameLog:output_type -> Member.GameLogReply
	54,  // 181: Member.Member.BCRGameLog:output_type -> Member.GameLogReply
	54,  // 182: Member.Member.REDGameLog:output_type -> Member.GameLogReply
	54,  // 183: Member.Member.WCRGameLog:output_type -> Member.GameLogReply
	54,  // 184: Member.Member.FTSGameLog:output_type -> Member.GameLogReply
	54,  // 185: Member.Member.DZPGameLog:output_type -> Member.GameLogReply
	54,  // 186: Member.Member.BGFGameLog:output_type -> Member.GameLogReply
	54,  // 187: Member.Member.KMJGameLog:output_type -> Member.GameLogReply
	54,  // 188: Member.Member.RNNGameLog:output_type -> Member.GameLogReply
	54,  // 189: Member.Member.DDZGameLog:output_type -> Member.GameLogReply
	55,  // 190: Member.Member.ModifyProfitGold:output_type -> Member.LogReply
	55,  // 191: Member.Member.ModifyGameStock:output_type -> Member.LogReply
	55,  // 192: Member.Member.ModifyGameWater:output_type -> Member.LogReply
	55,  // 193: Member.Member.ModifyGameProfitRate:output_type -> Member.LogReply
	55,  // 194: Member.Member.ModifyGameWaterRate:output_type -> Member.LogReply
	55,  // 195: Member.Member.ModifyGameGroupID:output_type -> Member.LogReply
	55,  // 196: Member.Member.ModifyAIPlay:output_type -> Member.LogReply
	55,  // 197: Member.Member.ModifyGameCheatRate:output_type -> Member.LogReply
	55,  // 198: Member.Member.ModifyGameRecordAmount:output_type -> Member.LogReply
	115, // [115:199] is the sub-list for method output_type
	31,  // [31:115] is the sub-list for method input_type
	31,  // [31:31] is the sub-list for extension type_name
	31,  // [31:31] is the sub-list for extension extendee
	0,   // [0:31] is the sub-list for field type_name
}

func init() { file_member_proto_init() }
func file_member_proto_init() {
	if File_member_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_member_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbGameConfigs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbGameConfigData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbStrInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbMyIDInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbGUIDInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbIntInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbStringInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbEOpCodeInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbIntWithFloatInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbIntWithStringInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTakeMoneyStatusInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ids); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncreaseInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeAvatarInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeNameInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindPhoneInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbTakeMoneyInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbPlayerBanInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbStoredMoneyInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbLoginLogInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryConditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoDTFGameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBMWGameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoHDWGameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoRBFGameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBCRGameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoREDGameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoWCRGameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoFTSGameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoDZPGameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoDZPGameLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoDZPGameLogDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBGFGameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBGFGameLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBGFGameLogDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoKMJGameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoKMJGameLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoKMJGameLogDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoRNNGameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoRNNGameLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoRNNGameLogDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoDDZGameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoDDZGameLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoDDZGameLogDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncreaseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeAvatarReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeNameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MembersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameLogReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbIntReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbTakeMoneyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbTakeMoneyListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbTopUpData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbTopUpListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbMailBoxReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbMailBoxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbSystemMailInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbCheaterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbCheaterInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbSystemCheatInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbLeaderboardReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbLeaderboardData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbBankCardInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoteData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoteInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoteMyPlayerInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoteMyPlayerInfoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoteMyPerformanceInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoteMyPerformanceInfoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbTakeCommissionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbSignInInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbSignInReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountByPhoneInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginbyPhoneIDPWInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBPhoneChangePasswordInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbSendGiftInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBSendGiftRecordReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBSendGiftRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbIAPItemReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbIAPItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbIAPBuyInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbIAPBuyResultInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbIAPBuyCNInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbIAPBuyResultCNInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbTakeMoneyRecordReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbGameStockReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbGameStockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbAIPlayInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbOrderRecordCNReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbOrderRecordCNData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbOrderRecordReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbOrderRecordData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMSLogInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_member_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   101,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_member_proto_goTypes,
		DependencyIndexes: file_member_proto_depIdxs,
		MessageInfos:      file_member_proto_msgTypes,
	}.Build()
	File_member_proto = out.File
	file_member_proto_rawDesc = nil
	file_member_proto_goTypes = nil
	file_member_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MemberClient is the client API for Member service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MemberClient interface {
	// Sends a greeting
	CreateAccountByPhone(ctx context.Context, in *CreateAccountByPhoneInput, opts ...grpc.CallOption) (*LoginReply, error)
	LoginbyPhoneIDPW(ctx context.Context, in *LoginbyPhoneIDPWInput, opts ...grpc.CallOption) (*LoginReply, error)
	CheckLoginbyPhoneIDPW(ctx context.Context, in *LoginbyPhoneIDPWInput, opts ...grpc.CallOption) (*LogReply, error)
	PhoneChangePassword(ctx context.Context, in *DBPhoneChangePasswordInput, opts ...grpc.CallOption) (*LogReply, error)
	Login(ctx context.Context, in *LoginInput, opts ...grpc.CallOption) (*LoginReply, error)
	LoginAI(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*LoginReply, error)
	GetAccountByID(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*AccountReply, error)
	GetGameConfig(ctx context.Context, in *EmptyInput, opts ...grpc.CallOption) (*DbGameConfigs, error)
	Increase(ctx context.Context, in *IncreaseInput, opts ...grpc.CallOption) (*IncreaseReply, error)
	ChangeAvatar(ctx context.Context, in *ChangeAvatarInput, opts ...grpc.CallOption) (*ChangeAvatarReply, error)
	ChangeName(ctx context.Context, in *ChangeNameInput, opts ...grpc.CallOption) (*ChangeNameReply, error)
	BindPhone(ctx context.Context, in *BindPhoneInput, opts ...grpc.CallOption) (*StringReply, error)
	SetUpLine(ctx context.Context, in *DbStringInput, opts ...grpc.CallOption) (*StringReply, error)
	BanPlayer(ctx context.Context, in *DbPlayerBanInput, opts ...grpc.CallOption) (*LogReply, error)
	TakeMoney(ctx context.Context, in *DbTakeMoneyInput, opts ...grpc.CallOption) (*LogReply, error)
	StoredMoney(ctx context.Context, in *DbStoredMoneyInput, opts ...grpc.CallOption) (*LogReply, error)
	DbLoginLog(ctx context.Context, in *DbLoginLogInput, opts ...grpc.CallOption) (*LogReply, error)
	DbMailBox(ctx context.Context, in *DbMyIDInput, opts ...grpc.CallOption) (*DbMailBoxReply, error)
	DbMailReceive(ctx context.Context, in *DbIntInput, opts ...grpc.CallOption) (*LogReply, error)
	DbMailSend(ctx context.Context, in *DbMailBoxData, opts ...grpc.CallOption) (*LogReply, error)
	DbSetSystemMail(ctx context.Context, in *DbSystemMailInput, opts ...grpc.CallOption) (*LogReply, error)
	DbSetCheater(ctx context.Context, in *DbCheaterInfo, opts ...grpc.CallOption) (*LogReply, error)
	DbDoCheater(ctx context.Context, in *DbCheaterInfo, opts ...grpc.CallOption) (*LogReply, error)
	DbGetCheater(ctx context.Context, in *DbMyIDInput, opts ...grpc.CallOption) (*DbCheaterInfoReply, error)
	DbSystemCheat(ctx context.Context, in *DbSystemCheatInput, opts ...grpc.CallOption) (*LogReply, error)
	DbGetLeaderboard(ctx context.Context, in *DbIntWithStringInput, opts ...grpc.CallOption) (*DbLeaderboardReply, error)
	DbGetBankCard(ctx context.Context, in *DbMyIDInput, opts ...grpc.CallOption) (*DbBankCardInput, error)
	DbBankCard(ctx context.Context, in *DbBankCardInput, opts ...grpc.CallOption) (*LogReply, error)
	SetPromoteOK(ctx context.Context, in *PromoteData, opts ...grpc.CallOption) (*LogReply, error)
	GetPromoteInfo(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*PromoteInfoReply, error)
	GetPromoteMyPlayerInfo(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*PromoteMyPlayerInfoReply, error)
	GetPromoteMyPerformanceInfo(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*PromoteMyPerformanceInfoReply, error)
	DbTakeCommission(ctx context.Context, in *DbTakeCommissionInput, opts ...grpc.CallOption) (*LogReply, error)
	GetSignInList(ctx context.Context, in *DbSignInInput, opts ...grpc.CallOption) (*DbSignInReply, error)
	GetPromoteIDbyIP(ctx context.Context, in *DbStrInput, opts ...grpc.CallOption) (*StringReply, error)
	SendGift(ctx context.Context, in *DbSendGiftInput, opts ...grpc.CallOption) (*LogReply, error)
	GetSendGiftRecord(ctx context.Context, in *DbMyIDInput, opts ...grpc.CallOption) (*DBSendGiftRecordReply, error)
	DbGetIAPItem(ctx context.Context, in *DbStrInput, opts ...grpc.CallOption) (*DbIAPItemReply, error)
	DbIAPBuy(ctx context.Context, in *DbIAPBuyInput, opts ...grpc.CallOption) (*DbIntReply, error)
	DbIAPBuyResult(ctx context.Context, in *DbIAPBuyResultInput, opts ...grpc.CallOption) (*LogReply, error)
	DbIAPBuyCN(ctx context.Context, in *DbIAPBuyCNInput, opts ...grpc.CallOption) (*StringReply, error)
	DbIAPBuyResultCN(ctx context.Context, in *DbIAPBuyResultCNInput, opts ...grpc.CallOption) (*LogReply, error)
	DbOrderRecordCN(ctx context.Context, in *DbMyIDInput, opts ...grpc.CallOption) (*DbOrderRecordCNReply, error)
	DbOrderRecord(ctx context.Context, in *DbMyIDInput, opts ...grpc.CallOption) (*DbOrderRecordReply, error)
	DbSignUpReimburse(ctx context.Context, in *EmptyInput, opts ...grpc.CallOption) (*LogReply, error)
	DBSMSLog(ctx context.Context, in *SMSLogInput, opts ...grpc.CallOption) (*LogReply, error)
	DbTakeMoneyRecord(ctx context.Context, in *DbMyIDInput, opts ...grpc.CallOption) (*DbTakeMoneyRecordReply, error)
	DbGetGameStock(ctx context.Context, in *EmptyInput, opts ...grpc.CallOption) (*DbGameStockReply, error)
	DbDelAccount(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*LogReply, error)
	// WebManager
	ListMemberByQuery(ctx context.Context, in *QueryConditions, opts ...grpc.CallOption) (*MembersReply, error)
	QueryTakeMoneyList(ctx context.Context, in *QueryConditions, opts ...grpc.CallOption) (*DbTakeMoneyListReply, error)
	SetTakeMoneyStatus(ctx context.Context, in *SetTakeMoneyStatusInput, opts ...grpc.CallOption) (*LogReply, error)
	QueryTopUpList(ctx context.Context, in *QueryConditions, opts ...grpc.CallOption) (*DbTopUpListReply, error)
	SaveAccount(ctx context.Context, in *ProtoAccount, opts ...grpc.CallOption) (*LogReply, error)
	SetPW(ctx context.Context, in *DbStringInput, opts ...grpc.CallOption) (*LogReply, error)
	ResetPW(ctx context.Context, in *DbMyIDInput, opts ...grpc.CallOption) (*LogReply, error)
	DbMailEdit(ctx context.Context, in *DbMailBoxData, opts ...grpc.CallOption) (*LogReply, error)
	DbMailDel(ctx context.Context, in *DbIntInput, opts ...grpc.CallOption) (*LogReply, error)
	DbSetSystemMailEdit(ctx context.Context, in *DbSystemMailInput, opts ...grpc.CallOption) (*LogReply, error)
	DbSetSystemMailDel(ctx context.Context, in *DbIntInput, opts ...grpc.CallOption) (*LogReply, error)
	DbSetGameConfig(ctx context.Context, in *DbGameConfigData, opts ...grpc.CallOption) (*LogReply, error)
	// GameLog
	BetLog(ctx context.Context, in *BetInput, opts ...grpc.CallOption) (*LogReply, error)
	DTFGameLog(ctx context.Context, in *ProtoDTFGameResult, opts ...grpc.CallOption) (*GameLogReply, error)
	BMWGameLog(ctx context.Context, in *ProtoBMWGameResult, opts ...grpc.CallOption) (*GameLogReply, error)
	HDWGameLog(ctx context.Context, in *ProtoHDWGameResult, opts ...grpc.CallOption) (*GameLogReply, error)
	RBFGameLog(ctx context.Context, in *ProtoRBFGameResult, opts ...grpc.CallOption) (*GameLogReply, error)
	BCRGameLog(ctx context.Context, in *ProtoBCRGameResult, opts ...grpc.CallOption) (*GameLogReply, error)
	REDGameLog(ctx context.Context, in *ProtoREDGameResult, opts ...grpc.CallOption) (*GameLogReply, error)
	WCRGameLog(ctx context.Context, in *ProtoWCRGameResult, opts ...grpc.CallOption) (*GameLogReply, error)
	FTSGameLog(ctx context.Context, in *ProtoFTSGameResult, opts ...grpc.CallOption) (*GameLogReply, error)
	DZPGameLog(ctx context.Context, in *ProtoDZPGameResult, opts ...grpc.CallOption) (*GameLogReply, error)
	BGFGameLog(ctx context.Context, in *ProtoBGFGameResult, opts ...grpc.CallOption) (*GameLogReply, error)
	KMJGameLog(ctx context.Context, in *ProtoKMJGameResult, opts ...grpc.CallOption) (*GameLogReply, error)
	RNNGameLog(ctx context.Context, in *ProtoRNNGameResult, opts ...grpc.CallOption) (*GameLogReply, error)
	DDZGameLog(ctx context.Context, in *ProtoDDZGameResult, opts ...grpc.CallOption) (*GameLogReply, error)
	ModifyProfitGold(ctx context.Context, in *DbIntWithStringInput, opts ...grpc.CallOption) (*LogReply, error)
	ModifyGameStock(ctx context.Context, in *DbIntWithStringInput, opts ...grpc.CallOption) (*LogReply, error)
	ModifyGameWater(ctx context.Context, in *DbIntWithStringInput, opts ...grpc.CallOption) (*LogReply, error)
	// rpc GetGameStock (DbIntInput) returns (DbIntReply);
	ModifyGameProfitRate(ctx context.Context, in *DbIntWithStringInput, opts ...grpc.CallOption) (*LogReply, error)
	ModifyGameWaterRate(ctx context.Context, in *DbIntWithStringInput, opts ...grpc.CallOption) (*LogReply, error)
	ModifyGameGroupID(ctx context.Context, in *DbEOpCodeInput, opts ...grpc.CallOption) (*LogReply, error)
	ModifyAIPlay(ctx context.Context, in *DbAIPlayInput, opts ...grpc.CallOption) (*LogReply, error)
	ModifyGameCheatRate(ctx context.Context, in *DbEOpCodeInput, opts ...grpc.CallOption) (*LogReply, error)
	ModifyGameRecordAmount(ctx context.Context, in *DbEOpCodeInput, opts ...grpc.CallOption) (*LogReply, error)
}

type memberClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberClient(cc grpc.ClientConnInterface) MemberClient {
	return &memberClient{cc}
}

func (c *memberClient) CreateAccountByPhone(ctx context.Context, in *CreateAccountByPhoneInput, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/Member.Member/CreateAccountByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) LoginbyPhoneIDPW(ctx context.Context, in *LoginbyPhoneIDPWInput, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/Member.Member/LoginbyPhoneIDPW", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) CheckLoginbyPhoneIDPW(ctx context.Context, in *LoginbyPhoneIDPWInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/CheckLoginbyPhoneIDPW", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) PhoneChangePassword(ctx context.Context, in *DBPhoneChangePasswordInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/PhoneChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) Login(ctx context.Context, in *LoginInput, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/Member.Member/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) LoginAI(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/Member.Member/LoginAI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) GetAccountByID(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*AccountReply, error) {
	out := new(AccountReply)
	err := c.cc.Invoke(ctx, "/Member.Member/GetAccountByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) GetGameConfig(ctx context.Context, in *EmptyInput, opts ...grpc.CallOption) (*DbGameConfigs, error) {
	out := new(DbGameConfigs)
	err := c.cc.Invoke(ctx, "/Member.Member/GetGameConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) Increase(ctx context.Context, in *IncreaseInput, opts ...grpc.CallOption) (*IncreaseReply, error) {
	out := new(IncreaseReply)
	err := c.cc.Invoke(ctx, "/Member.Member/Increase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) ChangeAvatar(ctx context.Context, in *ChangeAvatarInput, opts ...grpc.CallOption) (*ChangeAvatarReply, error) {
	out := new(ChangeAvatarReply)
	err := c.cc.Invoke(ctx, "/Member.Member/ChangeAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) ChangeName(ctx context.Context, in *ChangeNameInput, opts ...grpc.CallOption) (*ChangeNameReply, error) {
	out := new(ChangeNameReply)
	err := c.cc.Invoke(ctx, "/Member.Member/ChangeName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) BindPhone(ctx context.Context, in *BindPhoneInput, opts ...grpc.CallOption) (*StringReply, error) {
	out := new(StringReply)
	err := c.cc.Invoke(ctx, "/Member.Member/BindPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) SetUpLine(ctx context.Context, in *DbStringInput, opts ...grpc.CallOption) (*StringReply, error) {
	out := new(StringReply)
	err := c.cc.Invoke(ctx, "/Member.Member/SetUpLine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) BanPlayer(ctx context.Context, in *DbPlayerBanInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/BanPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) TakeMoney(ctx context.Context, in *DbTakeMoneyInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/TakeMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) StoredMoney(ctx context.Context, in *DbStoredMoneyInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/StoredMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbLoginLog(ctx context.Context, in *DbLoginLogInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbLoginLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbMailBox(ctx context.Context, in *DbMyIDInput, opts ...grpc.CallOption) (*DbMailBoxReply, error) {
	out := new(DbMailBoxReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbMailBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbMailReceive(ctx context.Context, in *DbIntInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbMailReceive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbMailSend(ctx context.Context, in *DbMailBoxData, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbMailSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbSetSystemMail(ctx context.Context, in *DbSystemMailInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbSetSystemMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbSetCheater(ctx context.Context, in *DbCheaterInfo, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbSetCheater", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbDoCheater(ctx context.Context, in *DbCheaterInfo, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbDoCheater", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbGetCheater(ctx context.Context, in *DbMyIDInput, opts ...grpc.CallOption) (*DbCheaterInfoReply, error) {
	out := new(DbCheaterInfoReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbGetCheater", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbSystemCheat(ctx context.Context, in *DbSystemCheatInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbSystemCheat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbGetLeaderboard(ctx context.Context, in *DbIntWithStringInput, opts ...grpc.CallOption) (*DbLeaderboardReply, error) {
	out := new(DbLeaderboardReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbGetLeaderboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbGetBankCard(ctx context.Context, in *DbMyIDInput, opts ...grpc.CallOption) (*DbBankCardInput, error) {
	out := new(DbBankCardInput)
	err := c.cc.Invoke(ctx, "/Member.Member/DbGetBankCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbBankCard(ctx context.Context, in *DbBankCardInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbBankCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) SetPromoteOK(ctx context.Context, in *PromoteData, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/SetPromoteOK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) GetPromoteInfo(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*PromoteInfoReply, error) {
	out := new(PromoteInfoReply)
	err := c.cc.Invoke(ctx, "/Member.Member/GetPromoteInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) GetPromoteMyPlayerInfo(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*PromoteMyPlayerInfoReply, error) {
	out := new(PromoteMyPlayerInfoReply)
	err := c.cc.Invoke(ctx, "/Member.Member/GetPromoteMyPlayerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) GetPromoteMyPerformanceInfo(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*PromoteMyPerformanceInfoReply, error) {
	out := new(PromoteMyPerformanceInfoReply)
	err := c.cc.Invoke(ctx, "/Member.Member/GetPromoteMyPerformanceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbTakeCommission(ctx context.Context, in *DbTakeCommissionInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbTakeCommission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) GetSignInList(ctx context.Context, in *DbSignInInput, opts ...grpc.CallOption) (*DbSignInReply, error) {
	out := new(DbSignInReply)
	err := c.cc.Invoke(ctx, "/Member.Member/GetSignInList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) GetPromoteIDbyIP(ctx context.Context, in *DbStrInput, opts ...grpc.CallOption) (*StringReply, error) {
	out := new(StringReply)
	err := c.cc.Invoke(ctx, "/Member.Member/GetPromoteIDbyIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) SendGift(ctx context.Context, in *DbSendGiftInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/SendGift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) GetSendGiftRecord(ctx context.Context, in *DbMyIDInput, opts ...grpc.CallOption) (*DBSendGiftRecordReply, error) {
	out := new(DBSendGiftRecordReply)
	err := c.cc.Invoke(ctx, "/Member.Member/GetSendGiftRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbGetIAPItem(ctx context.Context, in *DbStrInput, opts ...grpc.CallOption) (*DbIAPItemReply, error) {
	out := new(DbIAPItemReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbGetIAPItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbIAPBuy(ctx context.Context, in *DbIAPBuyInput, opts ...grpc.CallOption) (*DbIntReply, error) {
	out := new(DbIntReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbIAPBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbIAPBuyResult(ctx context.Context, in *DbIAPBuyResultInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbIAPBuyResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbIAPBuyCN(ctx context.Context, in *DbIAPBuyCNInput, opts ...grpc.CallOption) (*StringReply, error) {
	out := new(StringReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbIAPBuyCN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbIAPBuyResultCN(ctx context.Context, in *DbIAPBuyResultCNInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbIAPBuyResultCN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbOrderRecordCN(ctx context.Context, in *DbMyIDInput, opts ...grpc.CallOption) (*DbOrderRecordCNReply, error) {
	out := new(DbOrderRecordCNReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbOrderRecordCN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbOrderRecord(ctx context.Context, in *DbMyIDInput, opts ...grpc.CallOption) (*DbOrderRecordReply, error) {
	out := new(DbOrderRecordReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbOrderRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbSignUpReimburse(ctx context.Context, in *EmptyInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbSignUpReimburse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DBSMSLog(ctx context.Context, in *SMSLogInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DBSMSLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbTakeMoneyRecord(ctx context.Context, in *DbMyIDInput, opts ...grpc.CallOption) (*DbTakeMoneyRecordReply, error) {
	out := new(DbTakeMoneyRecordReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbTakeMoneyRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbGetGameStock(ctx context.Context, in *EmptyInput, opts ...grpc.CallOption) (*DbGameStockReply, error) {
	out := new(DbGameStockReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbGetGameStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbDelAccount(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbDelAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) ListMemberByQuery(ctx context.Context, in *QueryConditions, opts ...grpc.CallOption) (*MembersReply, error) {
	out := new(MembersReply)
	err := c.cc.Invoke(ctx, "/Member.Member/listMemberByQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) QueryTakeMoneyList(ctx context.Context, in *QueryConditions, opts ...grpc.CallOption) (*DbTakeMoneyListReply, error) {
	out := new(DbTakeMoneyListReply)
	err := c.cc.Invoke(ctx, "/Member.Member/QueryTakeMoneyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) SetTakeMoneyStatus(ctx context.Context, in *SetTakeMoneyStatusInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/SetTakeMoneyStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) QueryTopUpList(ctx context.Context, in *QueryConditions, opts ...grpc.CallOption) (*DbTopUpListReply, error) {
	out := new(DbTopUpListReply)
	err := c.cc.Invoke(ctx, "/Member.Member/QueryTopUpList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) SaveAccount(ctx context.Context, in *ProtoAccount, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/SaveAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) SetPW(ctx context.Context, in *DbStringInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/SetPW", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) ResetPW(ctx context.Context, in *DbMyIDInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/ResetPW", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbMailEdit(ctx context.Context, in *DbMailBoxData, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbMailEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbMailDel(ctx context.Context, in *DbIntInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbMailDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbSetSystemMailEdit(ctx context.Context, in *DbSystemMailInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbSetSystemMailEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbSetSystemMailDel(ctx context.Context, in *DbIntInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbSetSystemMailDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DbSetGameConfig(ctx context.Context, in *DbGameConfigData, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DbSetGameConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) BetLog(ctx context.Context, in *BetInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/BetLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DTFGameLog(ctx context.Context, in *ProtoDTFGameResult, opts ...grpc.CallOption) (*GameLogReply, error) {
	out := new(GameLogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DTFGameLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) BMWGameLog(ctx context.Context, in *ProtoBMWGameResult, opts ...grpc.CallOption) (*GameLogReply, error) {
	out := new(GameLogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/BMWGameLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) HDWGameLog(ctx context.Context, in *ProtoHDWGameResult, opts ...grpc.CallOption) (*GameLogReply, error) {
	out := new(GameLogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/HDWGameLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) RBFGameLog(ctx context.Context, in *ProtoRBFGameResult, opts ...grpc.CallOption) (*GameLogReply, error) {
	out := new(GameLogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/RBFGameLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) BCRGameLog(ctx context.Context, in *ProtoBCRGameResult, opts ...grpc.CallOption) (*GameLogReply, error) {
	out := new(GameLogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/BCRGameLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) REDGameLog(ctx context.Context, in *ProtoREDGameResult, opts ...grpc.CallOption) (*GameLogReply, error) {
	out := new(GameLogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/REDGameLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) WCRGameLog(ctx context.Context, in *ProtoWCRGameResult, opts ...grpc.CallOption) (*GameLogReply, error) {
	out := new(GameLogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/WCRGameLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) FTSGameLog(ctx context.Context, in *ProtoFTSGameResult, opts ...grpc.CallOption) (*GameLogReply, error) {
	out := new(GameLogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/FTSGameLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DZPGameLog(ctx context.Context, in *ProtoDZPGameResult, opts ...grpc.CallOption) (*GameLogReply, error) {
	out := new(GameLogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DZPGameLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) BGFGameLog(ctx context.Context, in *ProtoBGFGameResult, opts ...grpc.CallOption) (*GameLogReply, error) {
	out := new(GameLogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/BGFGameLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) KMJGameLog(ctx context.Context, in *ProtoKMJGameResult, opts ...grpc.CallOption) (*GameLogReply, error) {
	out := new(GameLogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/KMJGameLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) RNNGameLog(ctx context.Context, in *ProtoRNNGameResult, opts ...grpc.CallOption) (*GameLogReply, error) {
	out := new(GameLogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/RNNGameLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DDZGameLog(ctx context.Context, in *ProtoDDZGameResult, opts ...grpc.CallOption) (*GameLogReply, error) {
	out := new(GameLogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/DDZGameLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) ModifyProfitGold(ctx context.Context, in *DbIntWithStringInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/ModifyProfitGold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) ModifyGameStock(ctx context.Context, in *DbIntWithStringInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/ModifyGameStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) ModifyGameWater(ctx context.Context, in *DbIntWithStringInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/ModifyGameWater", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) ModifyGameProfitRate(ctx context.Context, in *DbIntWithStringInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/ModifyGameProfitRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) ModifyGameWaterRate(ctx context.Context, in *DbIntWithStringInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/ModifyGameWaterRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) ModifyGameGroupID(ctx context.Context, in *DbEOpCodeInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/ModifyGameGroupID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) ModifyAIPlay(ctx context.Context, in *DbAIPlayInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/ModifyAIPlay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) ModifyGameCheatRate(ctx context.Context, in *DbEOpCodeInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/ModifyGameCheatRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) ModifyGameRecordAmount(ctx context.Context, in *DbEOpCodeInput, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/Member.Member/ModifyGameRecordAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberServer is the server API for Member service.
type MemberServer interface {
	// Sends a greeting
	CreateAccountByPhone(context.Context, *CreateAccountByPhoneInput) (*LoginReply, error)
	LoginbyPhoneIDPW(context.Context, *LoginbyPhoneIDPWInput) (*LoginReply, error)
	CheckLoginbyPhoneIDPW(context.Context, *LoginbyPhoneIDPWInput) (*LogReply, error)
	PhoneChangePassword(context.Context, *DBPhoneChangePasswordInput) (*LogReply, error)
	Login(context.Context, *LoginInput) (*LoginReply, error)
	LoginAI(context.Context, *Ids) (*LoginReply, error)
	GetAccountByID(context.Context, *Ids) (*AccountReply, error)
	GetGameConfig(context.Context, *EmptyInput) (*DbGameConfigs, error)
	Increase(context.Context, *IncreaseInput) (*IncreaseReply, error)
	ChangeAvatar(context.Context, *ChangeAvatarInput) (*ChangeAvatarReply, error)
	ChangeName(context.Context, *ChangeNameInput) (*ChangeNameReply, error)
	BindPhone(context.Context, *BindPhoneInput) (*StringReply, error)
	SetUpLine(context.Context, *DbStringInput) (*StringReply, error)
	BanPlayer(context.Context, *DbPlayerBanInput) (*LogReply, error)
	TakeMoney(context.Context, *DbTakeMoneyInput) (*LogReply, error)
	StoredMoney(context.Context, *DbStoredMoneyInput) (*LogReply, error)
	DbLoginLog(context.Context, *DbLoginLogInput) (*LogReply, error)
	DbMailBox(context.Context, *DbMyIDInput) (*DbMailBoxReply, error)
	DbMailReceive(context.Context, *DbIntInput) (*LogReply, error)
	DbMailSend(context.Context, *DbMailBoxData) (*LogReply, error)
	DbSetSystemMail(context.Context, *DbSystemMailInput) (*LogReply, error)
	DbSetCheater(context.Context, *DbCheaterInfo) (*LogReply, error)
	DbDoCheater(context.Context, *DbCheaterInfo) (*LogReply, error)
	DbGetCheater(context.Context, *DbMyIDInput) (*DbCheaterInfoReply, error)
	DbSystemCheat(context.Context, *DbSystemCheatInput) (*LogReply, error)
	DbGetLeaderboard(context.Context, *DbIntWithStringInput) (*DbLeaderboardReply, error)
	DbGetBankCard(context.Context, *DbMyIDInput) (*DbBankCardInput, error)
	DbBankCard(context.Context, *DbBankCardInput) (*LogReply, error)
	SetPromoteOK(context.Context, *PromoteData) (*LogReply, error)
	GetPromoteInfo(context.Context, *Ids) (*PromoteInfoReply, error)
	GetPromoteMyPlayerInfo(context.Context, *Ids) (*PromoteMyPlayerInfoReply, error)
	GetPromoteMyPerformanceInfo(context.Context, *Ids) (*PromoteMyPerformanceInfoReply, error)
	DbTakeCommission(context.Context, *DbTakeCommissionInput) (*LogReply, error)
	GetSignInList(context.Context, *DbSignInInput) (*DbSignInReply, error)
	GetPromoteIDbyIP(context.Context, *DbStrInput) (*StringReply, error)
	SendGift(context.Context, *DbSendGiftInput) (*LogReply, error)
	GetSendGiftRecord(context.Context, *DbMyIDInput) (*DBSendGiftRecordReply, error)
	DbGetIAPItem(context.Context, *DbStrInput) (*DbIAPItemReply, error)
	DbIAPBuy(context.Context, *DbIAPBuyInput) (*DbIntReply, error)
	DbIAPBuyResult(context.Context, *DbIAPBuyResultInput) (*LogReply, error)
	DbIAPBuyCN(context.Context, *DbIAPBuyCNInput) (*StringReply, error)
	DbIAPBuyResultCN(context.Context, *DbIAPBuyResultCNInput) (*LogReply, error)
	DbOrderRecordCN(context.Context, *DbMyIDInput) (*DbOrderRecordCNReply, error)
	DbOrderRecord(context.Context, *DbMyIDInput) (*DbOrderRecordReply, error)
	DbSignUpReimburse(context.Context, *EmptyInput) (*LogReply, error)
	DBSMSLog(context.Context, *SMSLogInput) (*LogReply, error)
	DbTakeMoneyRecord(context.Context, *DbMyIDInput) (*DbTakeMoneyRecordReply, error)
	DbGetGameStock(context.Context, *EmptyInput) (*DbGameStockReply, error)
	DbDelAccount(context.Context, *Ids) (*LogReply, error)
	// WebManager
	ListMemberByQuery(context.Context, *QueryConditions) (*MembersReply, error)
	QueryTakeMoneyList(context.Context, *QueryConditions) (*DbTakeMoneyListReply, error)
	SetTakeMoneyStatus(context.Context, *SetTakeMoneyStatusInput) (*LogReply, error)
	QueryTopUpList(context.Context, *QueryConditions) (*DbTopUpListReply, error)
	SaveAccount(context.Context, *ProtoAccount) (*LogReply, error)
	SetPW(context.Context, *DbStringInput) (*LogReply, error)
	ResetPW(context.Context, *DbMyIDInput) (*LogReply, error)
	DbMailEdit(context.Context, *DbMailBoxData) (*LogReply, error)
	DbMailDel(context.Context, *DbIntInput) (*LogReply, error)
	DbSetSystemMailEdit(context.Context, *DbSystemMailInput) (*LogReply, error)
	DbSetSystemMailDel(context.Context, *DbIntInput) (*LogReply, error)
	DbSetGameConfig(context.Context, *DbGameConfigData) (*LogReply, error)
	// GameLog
	BetLog(context.Context, *BetInput) (*LogReply, error)
	DTFGameLog(context.Context, *ProtoDTFGameResult) (*GameLogReply, error)
	BMWGameLog(context.Context, *ProtoBMWGameResult) (*GameLogReply, error)
	HDWGameLog(context.Context, *ProtoHDWGameResult) (*GameLogReply, error)
	RBFGameLog(context.Context, *ProtoRBFGameResult) (*GameLogReply, error)
	BCRGameLog(context.Context, *ProtoBCRGameResult) (*GameLogReply, error)
	REDGameLog(context.Context, *ProtoREDGameResult) (*GameLogReply, error)
	WCRGameLog(context.Context, *ProtoWCRGameResult) (*GameLogReply, error)
	FTSGameLog(context.Context, *ProtoFTSGameResult) (*GameLogReply, error)
	DZPGameLog(context.Context, *ProtoDZPGameResult) (*GameLogReply, error)
	BGFGameLog(context.Context, *ProtoBGFGameResult) (*GameLogReply, error)
	KMJGameLog(context.Context, *ProtoKMJGameResult) (*GameLogReply, error)
	RNNGameLog(context.Context, *ProtoRNNGameResult) (*GameLogReply, error)
	DDZGameLog(context.Context, *ProtoDDZGameResult) (*GameLogReply, error)
	ModifyProfitGold(context.Context, *DbIntWithStringInput) (*LogReply, error)
	ModifyGameStock(context.Context, *DbIntWithStringInput) (*LogReply, error)
	ModifyGameWater(context.Context, *DbIntWithStringInput) (*LogReply, error)
	// rpc GetGameStock (DbIntInput) returns (DbIntReply);
	ModifyGameProfitRate(context.Context, *DbIntWithStringInput) (*LogReply, error)
	ModifyGameWaterRate(context.Context, *DbIntWithStringInput) (*LogReply, error)
	ModifyGameGroupID(context.Context, *DbEOpCodeInput) (*LogReply, error)
	ModifyAIPlay(context.Context, *DbAIPlayInput) (*LogReply, error)
	ModifyGameCheatRate(context.Context, *DbEOpCodeInput) (*LogReply, error)
	ModifyGameRecordAmount(context.Context, *DbEOpCodeInput) (*LogReply, error)
}

// UnimplementedMemberServer can be embedded to have forward compatible implementations.
type UnimplementedMemberServer struct {
}

func (*UnimplementedMemberServer) CreateAccountByPhone(context.Context, *CreateAccountByPhoneInput) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountByPhone not implemented")
}
func (*UnimplementedMemberServer) LoginbyPhoneIDPW(context.Context, *LoginbyPhoneIDPWInput) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginbyPhoneIDPW not implemented")
}
func (*UnimplementedMemberServer) CheckLoginbyPhoneIDPW(context.Context, *LoginbyPhoneIDPWInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLoginbyPhoneIDPW not implemented")
}
func (*UnimplementedMemberServer) PhoneChangePassword(context.Context, *DBPhoneChangePasswordInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneChangePassword not implemented")
}
func (*UnimplementedMemberServer) Login(context.Context, *LoginInput) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedMemberServer) LoginAI(context.Context, *Ids) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginAI not implemented")
}
func (*UnimplementedMemberServer) GetAccountByID(context.Context, *Ids) (*AccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByID not implemented")
}
func (*UnimplementedMemberServer) GetGameConfig(context.Context, *EmptyInput) (*DbGameConfigs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameConfig not implemented")
}
func (*UnimplementedMemberServer) Increase(context.Context, *IncreaseInput) (*IncreaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Increase not implemented")
}
func (*UnimplementedMemberServer) ChangeAvatar(context.Context, *ChangeAvatarInput) (*ChangeAvatarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAvatar not implemented")
}
func (*UnimplementedMemberServer) ChangeName(context.Context, *ChangeNameInput) (*ChangeNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeName not implemented")
}
func (*UnimplementedMemberServer) BindPhone(context.Context, *BindPhoneInput) (*StringReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindPhone not implemented")
}
func (*UnimplementedMemberServer) SetUpLine(context.Context, *DbStringInput) (*StringReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUpLine not implemented")
}
func (*UnimplementedMemberServer) BanPlayer(context.Context, *DbPlayerBanInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanPlayer not implemented")
}
func (*UnimplementedMemberServer) TakeMoney(context.Context, *DbTakeMoneyInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeMoney not implemented")
}
func (*UnimplementedMemberServer) StoredMoney(context.Context, *DbStoredMoneyInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoredMoney not implemented")
}
func (*UnimplementedMemberServer) DbLoginLog(context.Context, *DbLoginLogInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbLoginLog not implemented")
}
func (*UnimplementedMemberServer) DbMailBox(context.Context, *DbMyIDInput) (*DbMailBoxReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbMailBox not implemented")
}
func (*UnimplementedMemberServer) DbMailReceive(context.Context, *DbIntInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbMailReceive not implemented")
}
func (*UnimplementedMemberServer) DbMailSend(context.Context, *DbMailBoxData) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbMailSend not implemented")
}
func (*UnimplementedMemberServer) DbSetSystemMail(context.Context, *DbSystemMailInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbSetSystemMail not implemented")
}
func (*UnimplementedMemberServer) DbSetCheater(context.Context, *DbCheaterInfo) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbSetCheater not implemented")
}
func (*UnimplementedMemberServer) DbDoCheater(context.Context, *DbCheaterInfo) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbDoCheater not implemented")
}
func (*UnimplementedMemberServer) DbGetCheater(context.Context, *DbMyIDInput) (*DbCheaterInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbGetCheater not implemented")
}
func (*UnimplementedMemberServer) DbSystemCheat(context.Context, *DbSystemCheatInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbSystemCheat not implemented")
}
func (*UnimplementedMemberServer) DbGetLeaderboard(context.Context, *DbIntWithStringInput) (*DbLeaderboardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbGetLeaderboard not implemented")
}
func (*UnimplementedMemberServer) DbGetBankCard(context.Context, *DbMyIDInput) (*DbBankCardInput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbGetBankCard not implemented")
}
func (*UnimplementedMemberServer) DbBankCard(context.Context, *DbBankCardInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbBankCard not implemented")
}
func (*UnimplementedMemberServer) SetPromoteOK(context.Context, *PromoteData) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPromoteOK not implemented")
}
func (*UnimplementedMemberServer) GetPromoteInfo(context.Context, *Ids) (*PromoteInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPromoteInfo not implemented")
}
func (*UnimplementedMemberServer) GetPromoteMyPlayerInfo(context.Context, *Ids) (*PromoteMyPlayerInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPromoteMyPlayerInfo not implemented")
}
func (*UnimplementedMemberServer) GetPromoteMyPerformanceInfo(context.Context, *Ids) (*PromoteMyPerformanceInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPromoteMyPerformanceInfo not implemented")
}
func (*UnimplementedMemberServer) DbTakeCommission(context.Context, *DbTakeCommissionInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbTakeCommission not implemented")
}
func (*UnimplementedMemberServer) GetSignInList(context.Context, *DbSignInInput) (*DbSignInReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignInList not implemented")
}
func (*UnimplementedMemberServer) GetPromoteIDbyIP(context.Context, *DbStrInput) (*StringReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPromoteIDbyIP not implemented")
}
func (*UnimplementedMemberServer) SendGift(context.Context, *DbSendGiftInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGift not implemented")
}
func (*UnimplementedMemberServer) GetSendGiftRecord(context.Context, *DbMyIDInput) (*DBSendGiftRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSendGiftRecord not implemented")
}
func (*UnimplementedMemberServer) DbGetIAPItem(context.Context, *DbStrInput) (*DbIAPItemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbGetIAPItem not implemented")
}
func (*UnimplementedMemberServer) DbIAPBuy(context.Context, *DbIAPBuyInput) (*DbIntReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbIAPBuy not implemented")
}
func (*UnimplementedMemberServer) DbIAPBuyResult(context.Context, *DbIAPBuyResultInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbIAPBuyResult not implemented")
}
func (*UnimplementedMemberServer) DbIAPBuyCN(context.Context, *DbIAPBuyCNInput) (*StringReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbIAPBuyCN not implemented")
}
func (*UnimplementedMemberServer) DbIAPBuyResultCN(context.Context, *DbIAPBuyResultCNInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbIAPBuyResultCN not implemented")
}
func (*UnimplementedMemberServer) DbOrderRecordCN(context.Context, *DbMyIDInput) (*DbOrderRecordCNReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbOrderRecordCN not implemented")
}
func (*UnimplementedMemberServer) DbOrderRecord(context.Context, *DbMyIDInput) (*DbOrderRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbOrderRecord not implemented")
}
func (*UnimplementedMemberServer) DbSignUpReimburse(context.Context, *EmptyInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbSignUpReimburse not implemented")
}
func (*UnimplementedMemberServer) DBSMSLog(context.Context, *SMSLogInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DBSMSLog not implemented")
}
func (*UnimplementedMemberServer) DbTakeMoneyRecord(context.Context, *DbMyIDInput) (*DbTakeMoneyRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbTakeMoneyRecord not implemented")
}
func (*UnimplementedMemberServer) DbGetGameStock(context.Context, *EmptyInput) (*DbGameStockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbGetGameStock not implemented")
}
func (*UnimplementedMemberServer) DbDelAccount(context.Context, *Ids) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbDelAccount not implemented")
}
func (*UnimplementedMemberServer) ListMemberByQuery(context.Context, *QueryConditions) (*MembersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMemberByQuery not implemented")
}
func (*UnimplementedMemberServer) QueryTakeMoneyList(context.Context, *QueryConditions) (*DbTakeMoneyListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTakeMoneyList not implemented")
}
func (*UnimplementedMemberServer) SetTakeMoneyStatus(context.Context, *SetTakeMoneyStatusInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTakeMoneyStatus not implemented")
}
func (*UnimplementedMemberServer) QueryTopUpList(context.Context, *QueryConditions) (*DbTopUpListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTopUpList not implemented")
}
func (*UnimplementedMemberServer) SaveAccount(context.Context, *ProtoAccount) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAccount not implemented")
}
func (*UnimplementedMemberServer) SetPW(context.Context, *DbStringInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPW not implemented")
}
func (*UnimplementedMemberServer) ResetPW(context.Context, *DbMyIDInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPW not implemented")
}
func (*UnimplementedMemberServer) DbMailEdit(context.Context, *DbMailBoxData) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbMailEdit not implemented")
}
func (*UnimplementedMemberServer) DbMailDel(context.Context, *DbIntInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbMailDel not implemented")
}
func (*UnimplementedMemberServer) DbSetSystemMailEdit(context.Context, *DbSystemMailInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbSetSystemMailEdit not implemented")
}
func (*UnimplementedMemberServer) DbSetSystemMailDel(context.Context, *DbIntInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbSetSystemMailDel not implemented")
}
func (*UnimplementedMemberServer) DbSetGameConfig(context.Context, *DbGameConfigData) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbSetGameConfig not implemented")
}
func (*UnimplementedMemberServer) BetLog(context.Context, *BetInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BetLog not implemented")
}
func (*UnimplementedMemberServer) DTFGameLog(context.Context, *ProtoDTFGameResult) (*GameLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DTFGameLog not implemented")
}
func (*UnimplementedMemberServer) BMWGameLog(context.Context, *ProtoBMWGameResult) (*GameLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BMWGameLog not implemented")
}
func (*UnimplementedMemberServer) HDWGameLog(context.Context, *ProtoHDWGameResult) (*GameLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HDWGameLog not implemented")
}
func (*UnimplementedMemberServer) RBFGameLog(context.Context, *ProtoRBFGameResult) (*GameLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RBFGameLog not implemented")
}
func (*UnimplementedMemberServer) BCRGameLog(context.Context, *ProtoBCRGameResult) (*GameLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BCRGameLog not implemented")
}
func (*UnimplementedMemberServer) REDGameLog(context.Context, *ProtoREDGameResult) (*GameLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method REDGameLog not implemented")
}
func (*UnimplementedMemberServer) WCRGameLog(context.Context, *ProtoWCRGameResult) (*GameLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WCRGameLog not implemented")
}
func (*UnimplementedMemberServer) FTSGameLog(context.Context, *ProtoFTSGameResult) (*GameLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FTSGameLog not implemented")
}
func (*UnimplementedMemberServer) DZPGameLog(context.Context, *ProtoDZPGameResult) (*GameLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DZPGameLog not implemented")
}
func (*UnimplementedMemberServer) BGFGameLog(context.Context, *ProtoBGFGameResult) (*GameLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BGFGameLog not implemented")
}
func (*UnimplementedMemberServer) KMJGameLog(context.Context, *ProtoKMJGameResult) (*GameLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KMJGameLog not implemented")
}
func (*UnimplementedMemberServer) RNNGameLog(context.Context, *ProtoRNNGameResult) (*GameLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RNNGameLog not implemented")
}
func (*UnimplementedMemberServer) DDZGameLog(context.Context, *ProtoDDZGameResult) (*GameLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DDZGameLog not implemented")
}
func (*UnimplementedMemberServer) ModifyProfitGold(context.Context, *DbIntWithStringInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyProfitGold not implemented")
}
func (*UnimplementedMemberServer) ModifyGameStock(context.Context, *DbIntWithStringInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyGameStock not implemented")
}
func (*UnimplementedMemberServer) ModifyGameWater(context.Context, *DbIntWithStringInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyGameWater not implemented")
}
func (*UnimplementedMemberServer) ModifyGameProfitRate(context.Context, *DbIntWithStringInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyGameProfitRate not implemented")
}
func (*UnimplementedMemberServer) ModifyGameWaterRate(context.Context, *DbIntWithStringInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyGameWaterRate not implemented")
}
func (*UnimplementedMemberServer) ModifyGameGroupID(context.Context, *DbEOpCodeInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyGameGroupID not implemented")
}
func (*UnimplementedMemberServer) ModifyAIPlay(context.Context, *DbAIPlayInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyAIPlay not implemented")
}
func (*UnimplementedMemberServer) ModifyGameCheatRate(context.Context, *DbEOpCodeInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyGameCheatRate not implemented")
}
func (*UnimplementedMemberServer) ModifyGameRecordAmount(context.Context, *DbEOpCodeInput) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyGameRecordAmount not implemented")
}

func RegisterMemberServer(s *grpc.Server, srv MemberServer) {
	s.RegisterService(&_Member_serviceDesc, srv)
}

func _Member_CreateAccountByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountByPhoneInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).CreateAccountByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/CreateAccountByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).CreateAccountByPhone(ctx, req.(*CreateAccountByPhoneInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_LoginbyPhoneIDPW_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginbyPhoneIDPWInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).LoginbyPhoneIDPW(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/LoginbyPhoneIDPW",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).LoginbyPhoneIDPW(ctx, req.(*LoginbyPhoneIDPWInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_CheckLoginbyPhoneIDPW_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginbyPhoneIDPWInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).CheckLoginbyPhoneIDPW(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/CheckLoginbyPhoneIDPW",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).CheckLoginbyPhoneIDPW(ctx, req.(*LoginbyPhoneIDPWInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_PhoneChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DBPhoneChangePasswordInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).PhoneChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/PhoneChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).PhoneChangePassword(ctx, req.(*DBPhoneChangePasswordInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).Login(ctx, req.(*LoginInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_LoginAI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).LoginAI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/LoginAI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).LoginAI(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_GetAccountByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).GetAccountByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/GetAccountByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).GetAccountByID(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_GetGameConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).GetGameConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/GetGameConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).GetGameConfig(ctx, req.(*EmptyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_Increase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).Increase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/Increase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).Increase(ctx, req.(*IncreaseInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_ChangeAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAvatarInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).ChangeAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/ChangeAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).ChangeAvatar(ctx, req.(*ChangeAvatarInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_ChangeName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeNameInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).ChangeName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/ChangeName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).ChangeName(ctx, req.(*ChangeNameInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_BindPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindPhoneInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).BindPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/BindPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).BindPhone(ctx, req.(*BindPhoneInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_SetUpLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbStringInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).SetUpLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/SetUpLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).SetUpLine(ctx, req.(*DbStringInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_BanPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbPlayerBanInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).BanPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/BanPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).BanPlayer(ctx, req.(*DbPlayerBanInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_TakeMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbTakeMoneyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).TakeMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/TakeMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).TakeMoney(ctx, req.(*DbTakeMoneyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_StoredMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbStoredMoneyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).StoredMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/StoredMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).StoredMoney(ctx, req.(*DbStoredMoneyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbLoginLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbLoginLogInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbLoginLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbLoginLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbLoginLog(ctx, req.(*DbLoginLogInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbMailBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbMyIDInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbMailBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbMailBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbMailBox(ctx, req.(*DbMyIDInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbMailReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbIntInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbMailReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbMailReceive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbMailReceive(ctx, req.(*DbIntInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbMailSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbMailBoxData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbMailSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbMailSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbMailSend(ctx, req.(*DbMailBoxData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbSetSystemMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbSystemMailInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbSetSystemMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbSetSystemMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbSetSystemMail(ctx, req.(*DbSystemMailInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbSetCheater_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbCheaterInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbSetCheater(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbSetCheater",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbSetCheater(ctx, req.(*DbCheaterInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbDoCheater_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbCheaterInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbDoCheater(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbDoCheater",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbDoCheater(ctx, req.(*DbCheaterInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbGetCheater_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbMyIDInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbGetCheater(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbGetCheater",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbGetCheater(ctx, req.(*DbMyIDInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbSystemCheat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbSystemCheatInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbSystemCheat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbSystemCheat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbSystemCheat(ctx, req.(*DbSystemCheatInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbGetLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbIntWithStringInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbGetLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbGetLeaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbGetLeaderboard(ctx, req.(*DbIntWithStringInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbGetBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbMyIDInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbGetBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbGetBankCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbGetBankCard(ctx, req.(*DbMyIDInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbBankCardInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbBankCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbBankCard(ctx, req.(*DbBankCardInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_SetPromoteOK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoteData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).SetPromoteOK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/SetPromoteOK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).SetPromoteOK(ctx, req.(*PromoteData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_GetPromoteInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).GetPromoteInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/GetPromoteInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).GetPromoteInfo(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_GetPromoteMyPlayerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).GetPromoteMyPlayerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/GetPromoteMyPlayerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).GetPromoteMyPlayerInfo(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_GetPromoteMyPerformanceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).GetPromoteMyPerformanceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/GetPromoteMyPerformanceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).GetPromoteMyPerformanceInfo(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbTakeCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbTakeCommissionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbTakeCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbTakeCommission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbTakeCommission(ctx, req.(*DbTakeCommissionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_GetSignInList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbSignInInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).GetSignInList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/GetSignInList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).GetSignInList(ctx, req.(*DbSignInInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_GetPromoteIDbyIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbStrInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).GetPromoteIDbyIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/GetPromoteIDbyIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).GetPromoteIDbyIP(ctx, req.(*DbStrInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_SendGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbSendGiftInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).SendGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/SendGift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).SendGift(ctx, req.(*DbSendGiftInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_GetSendGiftRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbMyIDInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).GetSendGiftRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/GetSendGiftRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).GetSendGiftRecord(ctx, req.(*DbMyIDInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbGetIAPItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbStrInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbGetIAPItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbGetIAPItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbGetIAPItem(ctx, req.(*DbStrInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbIAPBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbIAPBuyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbIAPBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbIAPBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbIAPBuy(ctx, req.(*DbIAPBuyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbIAPBuyResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbIAPBuyResultInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbIAPBuyResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbIAPBuyResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbIAPBuyResult(ctx, req.(*DbIAPBuyResultInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbIAPBuyCN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbIAPBuyCNInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbIAPBuyCN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbIAPBuyCN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbIAPBuyCN(ctx, req.(*DbIAPBuyCNInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbIAPBuyResultCN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbIAPBuyResultCNInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbIAPBuyResultCN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbIAPBuyResultCN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbIAPBuyResultCN(ctx, req.(*DbIAPBuyResultCNInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbOrderRecordCN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbMyIDInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbOrderRecordCN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbOrderRecordCN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbOrderRecordCN(ctx, req.(*DbMyIDInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbOrderRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbMyIDInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbOrderRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbOrderRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbOrderRecord(ctx, req.(*DbMyIDInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbSignUpReimburse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbSignUpReimburse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbSignUpReimburse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbSignUpReimburse(ctx, req.(*EmptyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DBSMSLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMSLogInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DBSMSLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DBSMSLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DBSMSLog(ctx, req.(*SMSLogInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbTakeMoneyRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbMyIDInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbTakeMoneyRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbTakeMoneyRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbTakeMoneyRecord(ctx, req.(*DbMyIDInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbGetGameStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbGetGameStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbGetGameStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbGetGameStock(ctx, req.(*EmptyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbDelAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbDelAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbDelAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbDelAccount(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_ListMemberByQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConditions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).ListMemberByQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/ListMemberByQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).ListMemberByQuery(ctx, req.(*QueryConditions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_QueryTakeMoneyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConditions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).QueryTakeMoneyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/QueryTakeMoneyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).QueryTakeMoneyList(ctx, req.(*QueryConditions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_SetTakeMoneyStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTakeMoneyStatusInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).SetTakeMoneyStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/SetTakeMoneyStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).SetTakeMoneyStatus(ctx, req.(*SetTakeMoneyStatusInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_QueryTopUpList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConditions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).QueryTopUpList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/QueryTopUpList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).QueryTopUpList(ctx, req.(*QueryConditions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_SaveAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).SaveAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/SaveAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).SaveAccount(ctx, req.(*ProtoAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_SetPW_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbStringInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).SetPW(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/SetPW",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).SetPW(ctx, req.(*DbStringInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_ResetPW_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbMyIDInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).ResetPW(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/ResetPW",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).ResetPW(ctx, req.(*DbMyIDInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbMailEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbMailBoxData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbMailEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbMailEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbMailEdit(ctx, req.(*DbMailBoxData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbMailDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbIntInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbMailDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbMailDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbMailDel(ctx, req.(*DbIntInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbSetSystemMailEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbSystemMailInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbSetSystemMailEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbSetSystemMailEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbSetSystemMailEdit(ctx, req.(*DbSystemMailInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbSetSystemMailDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbIntInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbSetSystemMailDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbSetSystemMailDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbSetSystemMailDel(ctx, req.(*DbIntInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DbSetGameConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbGameConfigData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DbSetGameConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DbSetGameConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DbSetGameConfig(ctx, req.(*DbGameConfigData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_BetLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).BetLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/BetLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).BetLog(ctx, req.(*BetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DTFGameLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoDTFGameResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DTFGameLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DTFGameLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DTFGameLog(ctx, req.(*ProtoDTFGameResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_BMWGameLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoBMWGameResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).BMWGameLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/BMWGameLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).BMWGameLog(ctx, req.(*ProtoBMWGameResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_HDWGameLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoHDWGameResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).HDWGameLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/HDWGameLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).HDWGameLog(ctx, req.(*ProtoHDWGameResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_RBFGameLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoRBFGameResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).RBFGameLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/RBFGameLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).RBFGameLog(ctx, req.(*ProtoRBFGameResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_BCRGameLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoBCRGameResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).BCRGameLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/BCRGameLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).BCRGameLog(ctx, req.(*ProtoBCRGameResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_REDGameLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoREDGameResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).REDGameLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/REDGameLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).REDGameLog(ctx, req.(*ProtoREDGameResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_WCRGameLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoWCRGameResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).WCRGameLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/WCRGameLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).WCRGameLog(ctx, req.(*ProtoWCRGameResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_FTSGameLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoFTSGameResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).FTSGameLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/FTSGameLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).FTSGameLog(ctx, req.(*ProtoFTSGameResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DZPGameLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoDZPGameResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DZPGameLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DZPGameLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DZPGameLog(ctx, req.(*ProtoDZPGameResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_BGFGameLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoBGFGameResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).BGFGameLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/BGFGameLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).BGFGameLog(ctx, req.(*ProtoBGFGameResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_KMJGameLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoKMJGameResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).KMJGameLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/KMJGameLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).KMJGameLog(ctx, req.(*ProtoKMJGameResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_RNNGameLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoRNNGameResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).RNNGameLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/RNNGameLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).RNNGameLog(ctx, req.(*ProtoRNNGameResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DDZGameLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoDDZGameResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DDZGameLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/DDZGameLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DDZGameLog(ctx, req.(*ProtoDDZGameResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_ModifyProfitGold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbIntWithStringInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).ModifyProfitGold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/ModifyProfitGold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).ModifyProfitGold(ctx, req.(*DbIntWithStringInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_ModifyGameStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbIntWithStringInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).ModifyGameStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/ModifyGameStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).ModifyGameStock(ctx, req.(*DbIntWithStringInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_ModifyGameWater_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbIntWithStringInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).ModifyGameWater(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/ModifyGameWater",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).ModifyGameWater(ctx, req.(*DbIntWithStringInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_ModifyGameProfitRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbIntWithStringInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).ModifyGameProfitRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/ModifyGameProfitRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).ModifyGameProfitRate(ctx, req.(*DbIntWithStringInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_ModifyGameWaterRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbIntWithStringInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).ModifyGameWaterRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/ModifyGameWaterRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).ModifyGameWaterRate(ctx, req.(*DbIntWithStringInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_ModifyGameGroupID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbEOpCodeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).ModifyGameGroupID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/ModifyGameGroupID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).ModifyGameGroupID(ctx, req.(*DbEOpCodeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_ModifyAIPlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbAIPlayInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).ModifyAIPlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/ModifyAIPlay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).ModifyAIPlay(ctx, req.(*DbAIPlayInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_ModifyGameCheatRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbEOpCodeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).ModifyGameCheatRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/ModifyGameCheatRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).ModifyGameCheatRate(ctx, req.(*DbEOpCodeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_ModifyGameRecordAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbEOpCodeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).ModifyGameRecordAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Member.Member/ModifyGameRecordAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).ModifyGameRecordAmount(ctx, req.(*DbEOpCodeInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _Member_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Member.Member",
	HandlerType: (*MemberServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccountByPhone",
			Handler:    _Member_CreateAccountByPhone_Handler,
		},
		{
			MethodName: "LoginbyPhoneIDPW",
			Handler:    _Member_LoginbyPhoneIDPW_Handler,
		},
		{
			MethodName: "CheckLoginbyPhoneIDPW",
			Handler:    _Member_CheckLoginbyPhoneIDPW_Handler,
		},
		{
			MethodName: "PhoneChangePassword",
			Handler:    _Member_PhoneChangePassword_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Member_Login_Handler,
		},
		{
			MethodName: "LoginAI",
			Handler:    _Member_LoginAI_Handler,
		},
		{
			MethodName: "GetAccountByID",
			Handler:    _Member_GetAccountByID_Handler,
		},
		{
			MethodName: "GetGameConfig",
			Handler:    _Member_GetGameConfig_Handler,
		},
		{
			MethodName: "Increase",
			Handler:    _Member_Increase_Handler,
		},
		{
			MethodName: "ChangeAvatar",
			Handler:    _Member_ChangeAvatar_Handler,
		},
		{
			MethodName: "ChangeName",
			Handler:    _Member_ChangeName_Handler,
		},
		{
			MethodName: "BindPhone",
			Handler:    _Member_BindPhone_Handler,
		},
		{
			MethodName: "SetUpLine",
			Handler:    _Member_SetUpLine_Handler,
		},
		{
			MethodName: "BanPlayer",
			Handler:    _Member_BanPlayer_Handler,
		},
		{
			MethodName: "TakeMoney",
			Handler:    _Member_TakeMoney_Handler,
		},
		{
			MethodName: "StoredMoney",
			Handler:    _Member_StoredMoney_Handler,
		},
		{
			MethodName: "DbLoginLog",
			Handler:    _Member_DbLoginLog_Handler,
		},
		{
			MethodName: "DbMailBox",
			Handler:    _Member_DbMailBox_Handler,
		},
		{
			MethodName: "DbMailReceive",
			Handler:    _Member_DbMailReceive_Handler,
		},
		{
			MethodName: "DbMailSend",
			Handler:    _Member_DbMailSend_Handler,
		},
		{
			MethodName: "DbSetSystemMail",
			Handler:    _Member_DbSetSystemMail_Handler,
		},
		{
			MethodName: "DbSetCheater",
			Handler:    _Member_DbSetCheater_Handler,
		},
		{
			MethodName: "DbDoCheater",
			Handler:    _Member_DbDoCheater_Handler,
		},
		{
			MethodName: "DbGetCheater",
			Handler:    _Member_DbGetCheater_Handler,
		},
		{
			MethodName: "DbSystemCheat",
			Handler:    _Member_DbSystemCheat_Handler,
		},
		{
			MethodName: "DbGetLeaderboard",
			Handler:    _Member_DbGetLeaderboard_Handler,
		},
		{
			MethodName: "DbGetBankCard",
			Handler:    _Member_DbGetBankCard_Handler,
		},
		{
			MethodName: "DbBankCard",
			Handler:    _Member_DbBankCard_Handler,
		},
		{
			MethodName: "SetPromoteOK",
			Handler:    _Member_SetPromoteOK_Handler,
		},
		{
			MethodName: "GetPromoteInfo",
			Handler:    _Member_GetPromoteInfo_Handler,
		},
		{
			MethodName: "GetPromoteMyPlayerInfo",
			Handler:    _Member_GetPromoteMyPlayerInfo_Handler,
		},
		{
			MethodName: "GetPromoteMyPerformanceInfo",
			Handler:    _Member_GetPromoteMyPerformanceInfo_Handler,
		},
		{
			MethodName: "DbTakeCommission",
			Handler:    _Member_DbTakeCommission_Handler,
		},
		{
			MethodName: "GetSignInList",
			Handler:    _Member_GetSignInList_Handler,
		},
		{
			MethodName: "GetPromoteIDbyIP",
			Handler:    _Member_GetPromoteIDbyIP_Handler,
		},
		{
			MethodName: "SendGift",
			Handler:    _Member_SendGift_Handler,
		},
		{
			MethodName: "GetSendGiftRecord",
			Handler:    _Member_GetSendGiftRecord_Handler,
		},
		{
			MethodName: "DbGetIAPItem",
			Handler:    _Member_DbGetIAPItem_Handler,
		},
		{
			MethodName: "DbIAPBuy",
			Handler:    _Member_DbIAPBuy_Handler,
		},
		{
			MethodName: "DbIAPBuyResult",
			Handler:    _Member_DbIAPBuyResult_Handler,
		},
		{
			MethodName: "DbIAPBuyCN",
			Handler:    _Member_DbIAPBuyCN_Handler,
		},
		{
			MethodName: "DbIAPBuyResultCN",
			Handler:    _Member_DbIAPBuyResultCN_Handler,
		},
		{
			MethodName: "DbOrderRecordCN",
			Handler:    _Member_DbOrderRecordCN_Handler,
		},
		{
			MethodName: "DbOrderRecord",
			Handler:    _Member_DbOrderRecord_Handler,
		},
		{
			MethodName: "DbSignUpReimburse",
			Handler:    _Member_DbSignUpReimburse_Handler,
		},
		{
			MethodName: "DBSMSLog",
			Handler:    _Member_DBSMSLog_Handler,
		},
		{
			MethodName: "DbTakeMoneyRecord",
			Handler:    _Member_DbTakeMoneyRecord_Handler,
		},
		{
			MethodName: "DbGetGameStock",
			Handler:    _Member_DbGetGameStock_Handler,
		},
		{
			MethodName: "DbDelAccount",
			Handler:    _Member_DbDelAccount_Handler,
		},
		{
			MethodName: "listMemberByQuery",
			Handler:    _Member_ListMemberByQuery_Handler,
		},
		{
			MethodName: "QueryTakeMoneyList",
			Handler:    _Member_QueryTakeMoneyList_Handler,
		},
		{
			MethodName: "SetTakeMoneyStatus",
			Handler:    _Member_SetTakeMoneyStatus_Handler,
		},
		{
			MethodName: "QueryTopUpList",
			Handler:    _Member_QueryTopUpList_Handler,
		},
		{
			MethodName: "SaveAccount",
			Handler:    _Member_SaveAccount_Handler,
		},
		{
			MethodName: "SetPW",
			Handler:    _Member_SetPW_Handler,
		},
		{
			MethodName: "ResetPW",
			Handler:    _Member_ResetPW_Handler,
		},
		{
			MethodName: "DbMailEdit",
			Handler:    _Member_DbMailEdit_Handler,
		},
		{
			MethodName: "DbMailDel",
			Handler:    _Member_DbMailDel_Handler,
		},
		{
			MethodName: "DbSetSystemMailEdit",
			Handler:    _Member_DbSetSystemMailEdit_Handler,
		},
		{
			MethodName: "DbSetSystemMailDel",
			Handler:    _Member_DbSetSystemMailDel_Handler,
		},
		{
			MethodName: "DbSetGameConfig",
			Handler:    _Member_DbSetGameConfig_Handler,
		},
		{
			MethodName: "BetLog",
			Handler:    _Member_BetLog_Handler,
		},
		{
			MethodName: "DTFGameLog",
			Handler:    _Member_DTFGameLog_Handler,
		},
		{
			MethodName: "BMWGameLog",
			Handler:    _Member_BMWGameLog_Handler,
		},
		{
			MethodName: "HDWGameLog",
			Handler:    _Member_HDWGameLog_Handler,
		},
		{
			MethodName: "RBFGameLog",
			Handler:    _Member_RBFGameLog_Handler,
		},
		{
			MethodName: "BCRGameLog",
			Handler:    _Member_BCRGameLog_Handler,
		},
		{
			MethodName: "REDGameLog",
			Handler:    _Member_REDGameLog_Handler,
		},
		{
			MethodName: "WCRGameLog",
			Handler:    _Member_WCRGameLog_Handler,
		},
		{
			MethodName: "FTSGameLog",
			Handler:    _Member_FTSGameLog_Handler,
		},
		{
			MethodName: "DZPGameLog",
			Handler:    _Member_DZPGameLog_Handler,
		},
		{
			MethodName: "BGFGameLog",
			Handler:    _Member_BGFGameLog_Handler,
		},
		{
			MethodName: "KMJGameLog",
			Handler:    _Member_KMJGameLog_Handler,
		},
		{
			MethodName: "RNNGameLog",
			Handler:    _Member_RNNGameLog_Handler,
		},
		{
			MethodName: "DDZGameLog",
			Handler:    _Member_DDZGameLog_Handler,
		},
		{
			MethodName: "ModifyProfitGold",
			Handler:    _Member_ModifyProfitGold_Handler,
		},
		{
			MethodName: "ModifyGameStock",
			Handler:    _Member_ModifyGameStock_Handler,
		},
		{
			MethodName: "ModifyGameWater",
			Handler:    _Member_ModifyGameWater_Handler,
		},
		{
			MethodName: "ModifyGameProfitRate",
			Handler:    _Member_ModifyGameProfitRate_Handler,
		},
		{
			MethodName: "ModifyGameWaterRate",
			Handler:    _Member_ModifyGameWaterRate_Handler,
		},
		{
			MethodName: "ModifyGameGroupID",
			Handler:    _Member_ModifyGameGroupID_Handler,
		},
		{
			MethodName: "ModifyAIPlay",
			Handler:    _Member_ModifyAIPlay_Handler,
		},
		{
			MethodName: "ModifyGameCheatRate",
			Handler:    _Member_ModifyGameCheatRate_Handler,
		},
		{
			MethodName: "ModifyGameRecordAmount",
			Handler:    _Member_ModifyGameRecordAmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "member.proto",
}

// MiniGameClient is the client API for MiniGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MiniGameClient interface {
}

type miniGameClient struct {
	cc grpc.ClientConnInterface
}

func NewMiniGameClient(cc grpc.ClientConnInterface) MiniGameClient {
	return &miniGameClient{cc}
}

// MiniGameServer is the server API for MiniGame service.
type MiniGameServer interface {
}

// UnimplementedMiniGameServer can be embedded to have forward compatible implementations.
type UnimplementedMiniGameServer struct {
}

func RegisterMiniGameServer(s *grpc.Server, srv MiniGameServer) {
	s.RegisterService(&_MiniGame_serviceDesc, srv)
}

var _MiniGame_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Member.MiniGame",
	HandlerType: (*MiniGameServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "member.proto",
}
